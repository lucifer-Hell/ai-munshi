query_type,query,df_command,col_1,col_2
Text/String Operations,Get rows where email field has the substring 'Manager'.,"df[df['email'].str.contains('Manager', case=False, na=False)]",email,
Text/String Operations,Find all values in city that end with 'com'.,"df[df['city'].str.endswith('com', na=False)]",city,
Text/String Operations,List all records where product_name includes 'tech'.,"df[df['product_name'].str.contains('tech', case=False, na=False)]",product_name,
Text/String Operations,Get rows where customer_name field has the substring 'Service'.,"df[df['customer_name'].str.contains('Service', case=False, na=False)]",customer_name,
Text/String Operations,Find all values in category that end with 'Manager'.,"df[df['category'].str.endswith('Manager', na=False)]",category,
Text/String Operations,Filter rows where product_name contains 'Service' substring.,"df[df['product_name'].str.contains('Service', case=False, na=False)]",product_name,
Text/String Operations,Filter rows where customer_name contains 'Service' substring.,"df[df['customer_name'].str.contains('Service', case=False, na=False)]",customer_name,
Text/String Operations,List all records where city includes 'tech'.,"df[df['city'].str.contains('tech', case=False, na=False)]",city,
Text/String Operations,Filter rows where city contains 'Store' substring.,"df[df['city'].str.contains('Store', case=False, na=False)]",city,
Text/String Operations,Find category values that contain 'Pro' case-insensitively.,"df[df['category'].str.contains('Pro', case=False, na=False)]",category,
Text/String Operations,List records where customer_name begins with 'Inc'.,"df[df['customer_name'].str.startswith('Inc', na=False)]",customer_name,
Text/String Operations,List all records where department includes 'Manager'.,"df[df['department'].str.contains('Manager', case=False, na=False)]",department,
Text/String Operations,Get rows where category field has the substring 'sales'.,"df[df['category'].str.contains('sales', case=False, na=False)]",category,
Text/String Operations,Get rows where department field has the substring 'Service'.,"df[df['department'].str.contains('Service', case=False, na=False)]",department,
Text/String Operations,Get rows where product_name field has the substring 'Inc'.,"df[df['product_name'].str.contains('Inc', case=False, na=False)]",product_name,
Text/String Operations,Find customer_name values that contain 'Manager' case-insensitively.,"df[df['customer_name'].str.contains('Manager', case=False, na=False)]",customer_name,
Text/String Operations,List all records where city includes 'Store'.,"df[df['city'].str.contains('Store', case=False, na=False)]",city,
Text/String Operations,Filter rows where email contains 'North' substring.,"df[df['email'].str.contains('North', case=False, na=False)]",email,
Text/String Operations,List records where city begins with 'Manager'.,"df[df['city'].str.startswith('Manager', na=False)]",city,
Text/String Operations,List records where city begins with 'com'.,"df[df['city'].str.startswith('com', na=False)]",city,
Text/String Operations,Get rows where city field has the substring 'tech'.,"df[df['city'].str.contains('tech', case=False, na=False)]",city,
Text/String Operations,Find customer_name values that contain 'Inc' case-insensitively.,"df[df['customer_name'].str.contains('Inc', case=False, na=False)]",customer_name,
Text/String Operations,List all records where city includes 'Inc'.,"df[df['city'].str.contains('Inc', case=False, na=False)]",city,
Text/String Operations,List records where department begins with 'New'.,"df[df['department'].str.startswith('New', na=False)]",department,
Text/String Operations,List all records where customer_name includes 'Service'.,"df[df['customer_name'].str.contains('Service', case=False, na=False)]",customer_name,
Text/String Operations,Find department values that contain 'Store' case-insensitively.,"df[df['department'].str.contains('Store', case=False, na=False)]",department,
Text/String Operations,List records where category begins with 'tech'.,"df[df['category'].str.startswith('tech', na=False)]",category,
Text/String Operations,Get rows where customer_name starts with 'tech'.,"df[df['customer_name'].str.startswith('tech', na=False)]",customer_name,
Text/String Operations,List all records where city includes 'New'.,"df[df['city'].str.contains('New', case=False, na=False)]",city,
Text/String Operations,Find product_name values that contain 'North' case-insensitively.,"df[df['product_name'].str.contains('North', case=False, na=False)]",product_name,
Text/String Operations,Show entries where city ends with 'Pro'.,"df[df['city'].str.endswith('Pro', na=False)]",city,
Text/String Operations,Find all category that contain the word 'tech'.,"df[df['category'].str.contains('tech', case=False, na=False)]",category,
Text/String Operations,Show entries where department ends with 'Service'.,"df[df['department'].str.endswith('Service', na=False)]",department,
Text/String Operations,Get rows where product_name starts with 'Store'.,"df[df['product_name'].str.startswith('Store', na=False)]",product_name,
Text/String Operations,Find email values that contain 'Service' case-insensitively.,"df[df['email'].str.contains('Service', case=False, na=False)]",email,
Text/String Operations,Get rows where city field has the substring 'New'.,"df[df['city'].str.contains('New', case=False, na=False)]",city,
Text/String Operations,Find all city that contain the word 'Service'.,"df[df['city'].str.contains('Service', case=False, na=False)]",city,
Text/String Operations,Get rows where product_name starts with 'Manager'.,"df[df['product_name'].str.startswith('Manager', na=False)]",product_name,
Text/String Operations,Get rows where product_name field has the substring 'Store'.,"df[df['product_name'].str.contains('Store', case=False, na=False)]",product_name,
Text/String Operations,Find all customer_name that contain the word 'New'.,"df[df['customer_name'].str.contains('New', case=False, na=False)]",customer_name,
Text/String Operations,Find all values in city that end with 'Inc'.,"df[df['city'].str.endswith('Inc', na=False)]",city,
Text/String Operations,List all records where product_name includes 'North'.,"df[df['product_name'].str.contains('North', case=False, na=False)]",product_name,
Text/String Operations,Find all entries with category matching 'Store' exactly.,df[df['category'] == 'Store'],category,
Text/String Operations,Find all values in customer_name that end with 'North'.,"df[df['customer_name'].str.endswith('North', na=False)]",customer_name,
Text/String Operations,Find all entries with email matching 'Service' exactly.,df[df['email'] == 'Service'],email,
Text/String Operations,Find category values that contain 'Manager' case-insensitively.,"df[df['category'].str.contains('Manager', case=False, na=False)]",category,
Text/String Operations,Find category values that contain 'Store' case-insensitively.,"df[df['category'].str.contains('Store', case=False, na=False)]",category,
Text/String Operations,Find all category that contain the word 'Inc'.,"df[df['category'].str.contains('Inc', case=False, na=False)]",category,
Text/String Operations,List all records where department includes 'sales'.,"df[df['department'].str.contains('sales', case=False, na=False)]",department,
Text/String Operations,Find department values that contain 'Inc' case-insensitively.,"df[df['department'].str.contains('Inc', case=False, na=False)]",department,
Text/String Operations,Show entries where customer_name ends with 'New'.,"df[df['customer_name'].str.endswith('New', na=False)]",customer_name,
Text/String Operations,List records where product_name begins with 'New'.,"df[df['product_name'].str.startswith('New', na=False)]",product_name,
Text/String Operations,Find all email that contain the word 'Service'.,"df[df['email'].str.contains('Service', case=False, na=False)]",email,
Text/String Operations,Find all values in email that end with 'tech'.,"df[df['email'].str.endswith('tech', na=False)]",email,
Text/String Operations,Find all customer_name that contain the word 'tech'.,"df[df['customer_name'].str.contains('tech', case=False, na=False)]",customer_name,
Text/String Operations,Find department values that contain 'Service' case-insensitively.,"df[df['department'].str.contains('Service', case=False, na=False)]",department,
Text/String Operations,Get rows where department starts with 'sales'.,"df[df['department'].str.startswith('sales', na=False)]",department,
Text/String Operations,Find department values that contain 'Store' case-insensitively.,"df[df['department'].str.contains('Store', case=False, na=False)]",department,
Text/String Operations,List all records where email includes 'Inc'.,"df[df['email'].str.contains('Inc', case=False, na=False)]",email,
Text/String Operations,List records where customer_name begins with 'New'.,"df[df['customer_name'].str.startswith('New', na=False)]",customer_name,
Text/String Operations,Find customer_name values that contain 'Inc' case-insensitively.,"df[df['customer_name'].str.contains('Inc', case=False, na=False)]",customer_name,
Text/String Operations,Find all customer_name that contain the word 'tech'.,"df[df['customer_name'].str.contains('tech', case=False, na=False)]",customer_name,
Text/String Operations,Find all values in department that end with 'Store'.,"df[df['department'].str.endswith('Store', na=False)]",department,
Text/String Operations,Find email values that contain 'Inc' case-insensitively.,"df[df['email'].str.contains('Inc', case=False, na=False)]",email,
Text/String Operations,Get rows where department field has the substring 'tech'.,"df[df['department'].str.contains('tech', case=False, na=False)]",department,
Text/String Operations,Find all entries with city matching 'North' exactly.,df[df['city'] == 'North'],city,
Text/String Operations,List records where email begins with 'Service'.,"df[df['email'].str.startswith('Service', na=False)]",email,
Text/String Operations,Get rows where category starts with 'Pro'.,"df[df['category'].str.startswith('Pro', na=False)]",category,
Text/String Operations,Find all entries with department matching 'com' exactly.,df[df['department'] == 'com'],department,
Text/String Operations,Find all values in city that end with 'Pro'.,"df[df['city'].str.endswith('Pro', na=False)]",city,
Text/String Operations,Get rows where customer_name starts with 'Store'.,"df[df['customer_name'].str.startswith('Store', na=False)]",customer_name,
Text/String Operations,Find all values in product_name that end with 'tech'.,"df[df['product_name'].str.endswith('tech', na=False)]",product_name,
Text/String Operations,Find all values in product_name that end with 'New'.,"df[df['product_name'].str.endswith('New', na=False)]",product_name,
Text/String Operations,Get rows where category field has the substring 'Service'.,"df[df['category'].str.contains('Service', case=False, na=False)]",category,
Text/String Operations,Find customer_name values that contain 'Store' case-insensitively.,"df[df['customer_name'].str.contains('Store', case=False, na=False)]",customer_name,
Text/String Operations,Find all entries with department matching 'Service' exactly.,df[df['department'] == 'Service'],department,
Text/String Operations,Get rows where email starts with 'com'.,"df[df['email'].str.startswith('com', na=False)]",email,
Text/String Operations,Find all entries with city matching 'com' exactly.,df[df['city'] == 'com'],city,
Text/String Operations,Get rows where customer_name starts with 'com'.,"df[df['customer_name'].str.startswith('com', na=False)]",customer_name,
Text/String Operations,Find all entries with department matching 'Service' exactly.,df[df['department'] == 'Service'],department,
Text/String Operations,Find department values that contain 'Manager' case-insensitively.,"df[df['department'].str.contains('Manager', case=False, na=False)]",department,
Text/String Operations,List records where product_name begins with 'Service'.,"df[df['product_name'].str.startswith('Service', na=False)]",product_name,
Text/String Operations,Get rows where city starts with 'tech'.,"df[df['city'].str.startswith('tech', na=False)]",city,
Text/String Operations,Filter rows where product_name contains 'Manager' substring.,"df[df['product_name'].str.contains('Manager', case=False, na=False)]",product_name,
Text/String Operations,List records where product_name begins with 'North'.,"df[df['product_name'].str.startswith('North', na=False)]",product_name,
Text/String Operations,Get rows where email field has the substring 'Pro'.,"df[df['email'].str.contains('Pro', case=False, na=False)]",email,
Text/String Operations,List all records where category includes 'com'.,"df[df['category'].str.contains('com', case=False, na=False)]",category,
Text/String Operations,Find all values in email that end with 'Service'.,"df[df['email'].str.endswith('Service', na=False)]",email,
Text/String Operations,Find all customer_name that contain the word 'tech'.,"df[df['customer_name'].str.contains('tech', case=False, na=False)]",customer_name,
Text/String Operations,List records where customer_name begins with 'tech'.,"df[df['customer_name'].str.startswith('tech', na=False)]",customer_name,
Text/String Operations,Get rows where department field has the substring 'Service'.,"df[df['department'].str.contains('Service', case=False, na=False)]",department,
Text/String Operations,Get rows where product_name starts with 'Store'.,"df[df['product_name'].str.startswith('Store', na=False)]",product_name,
Text/String Operations,List all records where department includes 'New'.,"df[df['department'].str.contains('New', case=False, na=False)]",department,
Text/String Operations,Find category values that contain 'Pro' case-insensitively.,"df[df['category'].str.contains('Pro', case=False, na=False)]",category,
Text/String Operations,List records where email begins with 'Inc'.,"df[df['email'].str.startswith('Inc', na=False)]",email,
Text/String Operations,List all records where product_name includes 'Service'.,"df[df['product_name'].str.contains('Service', case=False, na=False)]",product_name,
Text/String Operations,Get rows where department starts with 'New'.,"df[df['department'].str.startswith('New', na=False)]",department,
Text/String Operations,Get rows where department field has the substring 'tech'.,"df[df['department'].str.contains('tech', case=False, na=False)]",department,
Text/String Operations,List records where department begins with 'tech'.,"df[df['department'].str.startswith('tech', na=False)]",department,
Text/String Operations,Find all entries with email matching 'Service' exactly.,df[df['email'] == 'Service'],email,
Text/String Operations,find company_name ending in Sales,"df[df['company_name'].str.endswith('sales', na=False)]",company_name,
Text/String Operations,find email ending in salez,"df[df['email'].str.endswith('sales', na=False)]",email,
Text/String Operations,department has 'managr' in it,"df[df['department'].str.contains('manager', case=False, na=False)]",department,
Text/String Operations,product_name has word salez,"df[df['product_name'].str.contains('sales', case=False, na=False)]",product_name,
Text/String Operations,city has 'Manager' in it,"df[df['city'].str.contains('manager', case=False, na=False)]",city,
Text/String Operations,get records with product_name beginning as Tech,"df[df['product_name'].str.startswith('tech', na=False)]",product_name,
Text/String Operations,get values with product_name trailing with dotcom,"df[df['product_name'].str.endswith('.com', na=False)]",product_name,
Text/String Operations,find rows where email includes 'Manager',"df[df['email'].str.contains('manager', case=False, na=False)]",email,
Text/String Operations,email has word mngr,"df[df['email'].str.contains('manager', case=False, na=False)]",email,
Text/String Operations,get records with job_title beginning as mngr,"df[df['job_title'].str.startswith('manager', na=False)]",job_title,
Text/String Operations,show rows where city starts with dotcom,"df[df['city'].str.startswith('.com', na=False)]",city,
Text/String Operations,product_name field holds value support,"df[df['product_name'].str.contains('support', case=False, na=False)]",product_name,
Text/String Operations,city has word hiringg,"df[df['city'].str.contains('hiring', case=False, na=False)]",city,
Text/String Operations,find email ending in dotcom,"df[df['email'].str.endswith('.com', na=False)]",email,
Text/String Operations,get values with product_name trailing with Pro,"df[df['product_name'].str.endswith('pro', na=False)]",product_name,
Text/String Operations,get values with job_title trailing with inc.,"df[df['job_title'].str.endswith('inc', na=False)]",job_title,
Text/String Operations,find rows where email includes 'manager',"df[df['email'].str.contains('manager', case=False, na=False)]",email,
Text/String Operations,get records with job_title beginning as pro,"df[df['job_title'].str.startswith('pro', na=False)]",job_title,
Text/String Operations,find product_name ending in Manager,"df[df['product_name'].str.endswith('manager', na=False)]",product_name,
Text/String Operations,find department ending in support,"df[df['department'].str.endswith('support', na=False)]",department,
Text/String Operations,list where department ends with INC,"df[df['department'].str.endswith('inc', na=False)]",department,
Text/String Operations,show rows where city starts with sup,"df[df['city'].str.startswith('support', na=False)]",city,
Text/String Operations,job_title has word managr,"df[df['job_title'].str.contains('manager', case=False, na=False)]",job_title,
Text/String Operations,list where city ends with hiringg,"df[df['city'].str.endswith('hiring', na=False)]",city,
Text/String Operations,department field begins with dotcom,"df[df['department'].str.startswith('.com', na=False)]",department,
Text/String Operations,find city ending in Manager,"df[df['city'].str.endswith('manager', na=False)]",city,
Text/String Operations,job_title field begins with Pro,"df[df['job_title'].str.startswith('pro', na=False)]",job_title,
Text/String Operations,find department ending in managr,"df[df['department'].str.endswith('manager', na=False)]",department,
Text/String Operations,get values with email trailing with manager,"df[df['email'].str.endswith('manager', na=False)]",email,
Text/String Operations,list where company_name ends with .COM,"df[df['company_name'].str.endswith('.com', na=False)]",company_name,
Text/String Operations,find rows where city includes 'Sales',"df[df['city'].str.contains('sales', case=False, na=False)]",city,
Text/String Operations,find city ending in support,"df[df['city'].str.endswith('support', na=False)]",city,
Text/String Operations,list where department ends with Hiring,"df[df['department'].str.endswith('hiring', na=False)]",department,
Text/String Operations,show all department with tech in it,"df[df['department'].str.contains('tech', case=False, na=False)]",department,
Text/String Operations,find rows where product_name includes 'TECH',"df[df['product_name'].str.contains('tech', case=False, na=False)]",product_name,
Text/String Operations,job_title has 'mngr' in it,"df[df['job_title'].str.contains('manager', case=False, na=False)]",job_title,
Text/String Operations,product_name has word INC,"df[df['product_name'].str.contains('inc', case=False, na=False)]",product_name,
Text/String Operations,show rows where email starts with sales,"df[df['email'].str.startswith('sales', na=False)]",email,
Text/String Operations,get records with product_name beginning as TECH,"df[df['product_name'].str.startswith('tech', na=False)]",product_name,
Text/String Operations,find department ending in Manager,"df[df['department'].str.endswith('manager', na=False)]",department,
Text/String Operations,get records with email beginning as Support,"df[df['email'].str.startswith('support', na=False)]",email,
Text/String Operations,job_title has 'hire' in it,"df[df['job_title'].str.contains('hiring', case=False, na=False)]",job_title,
Text/String Operations,company_name field holds value Sales,"df[df['company_name'].str.contains('sales', case=False, na=False)]",company_name,
Text/String Operations,show rows where department starts with pro,"df[df['department'].str.startswith('pro', na=False)]",department,
Text/String Operations,department has word inc.,"df[df['department'].str.contains('inc', case=False, na=False)]",department,
Text/String Operations,show rows where email starts with INC,"df[df['email'].str.startswith('inc', na=False)]",email,
Text/String Operations,get values with product_name trailing with dotcom,"df[df['product_name'].str.endswith('.com', na=False)]",product_name,
Text/String Operations,find product_name ending in Support,"df[df['product_name'].str.endswith('support', na=False)]",product_name,
Text/String Operations,product_name field begins with TECH,"df[df['product_name'].str.startswith('tech', na=False)]",product_name,
Text/String Operations,get entries if department contains .com,"df[df['department'].str.contains('.com', case=False, na=False)]",department,
Text/String Operations,get rows where product_name does not contain 'suport',"df[~df['product_name'].str.contains('suport', case=False, na=False)]",product_name,
Text/String Operations,get rows where company_name does not contain '.COM',"df[~df['company_name'].str.contains('.COM', case=False, na=False)]",company_name,
Text/String Operations,find email having 'tech' and company_name with 'hiringg',"df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]",email,
Text/String Operations,get rows where product_name does not contain 'tek',"df[~df['product_name'].str.contains('tek', case=False, na=False)]",product_name,
Text/String Operations,find department having 'support' and job_title with 'inc.',"df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]",department,
Text/String Operations,get rows where company_name does not contain 'hiring',"df[~df['company_name'].str.contains('hiring', case=False, na=False)]",company_name,
Text/String Operations,find company_name having 'salez' and product_name with 'managr',"df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]",company_name,
Text/String Operations,find department having 'salez' and email with 'sales',"df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]",department,
Text/String Operations,get rows where product_name does not contain 'Sales',"df[~df['product_name'].str.contains('Sales', case=False, na=False)]",product_name,
Text/String Operations,get rows where email does not contain 'support',"df[~df['email'].str.contains('support', case=False, na=False)]",email,
Text/String Operations,list records where department has 'dotcom' or company_name has 'dotcom',"df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]",department,
Text/String Operations,get rows where department does not contain 'inc.',"df[~df['department'].str.contains('inc.', case=False, na=False)]",department,
Text/String Operations,find job_title having 'managr' and city with '.com',"df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]",job_title,
Text/String Operations,get rows where department does not contain 'tek',"df[~df['department'].str.contains('tek', case=False, na=False)]",department,
Text/String Operations,get rows where department does not contain 'hiring',"df[~df['department'].str.contains('hiring', case=False, na=False)]",department,
Text/String Operations,get rows where product_name does not contain 'PRo',"df[~df['product_name'].str.contains('PRo', case=False, na=False)]",product_name,
Text/String Operations,find city having 'dotcom' and product_name with 'pr0',"df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]",city,
Text/String Operations,list records where product_name has 'Tech' or job_title has 'PRo',"df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]",product_name,
Text/String Operations,list records where department has '.com' or job_title has 'hiring',"df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]",department,
Text/String Operations,list records where job_title has 'sup' or product_name has '.com',"df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]",job_title,
Text/String Operations,list records where product_name has 'support' or job_title has 'Sales',"df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]",product_name,
Text/String Operations,find email having 'salez' and job_title with 'dotcom',"df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]",email,
Text/String Operations,find job_title having 'mngr' and company_name with 'hiringg',"df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]",job_title,
Text/String Operations,list records where job_title has 'sales' or product_name has 'ink',"df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]",job_title,
Text/String Operations,list records where job_title has '.COM' or email has 'pro',"df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]",job_title,
Text/String Operations,list entries where Salary Range To has 'inc' in it,"df[df['Salary Range To'].str.contains('inc', case=False, na=False)]",Salary Range To,
Text/String Operations,show rows where Civil Service Title finishes with salez,"df[df['Civil Service Title'].str.endswith('sales', na=False)]",Civil Service Title,
Text/String Operations,show records where Level begins with INC,"df[df['Level'].str.startswith('inc', na=False)]",Level,
Text/String Operations,show records where Additional Information begins with sells,"df[df['Additional Information'].str.startswith('sales', na=False)]",Additional Information,
Text/String Operations,Salary Range To contains value sales,"df[df['Salary Range To'].str.contains('sales', case=False, na=False)]",Salary Range To,
Text/String Operations,find all where Job Description contains 'hire',"df[df['Job Description'].str.contains('hiring', case=False, na=False)]",Job Description,
Text/String Operations,list entries where Salary Range From has '.com' in it,"df[df['Salary Range From'].str.contains('.com', case=False, na=False)]",Salary Range From,
Text/String Operations,find all where Civil Service Title contains 'Tech',"df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]",Civil Service Title,
Text/String Operations,show records where Work Location 1 begins with ink,"df[df['Work Location 1'].str.startswith('inc', na=False)]",Work Location 1,
Text/String Operations,Level starts with 'support',"df[df['Level'].str.startswith('support', na=False)]",Level,
Text/String Operations,Posting Updated ends with 'Support',"df[df['Posting Updated'].str.endswith('support', na=False)]",Posting Updated,
Text/String Operations,Additional Information starts with 'managr',"df[df['Additional Information'].str.startswith('manager', na=False)]",Additional Information,
Text/String Operations,show records where Residency Requirement begins with sup,"df[df['Residency Requirement'].str.startswith('support', na=False)]",Residency Requirement,
Text/String Operations,show records where Residency Requirement begins with sells,"df[df['Residency Requirement'].str.startswith('sales', na=False)]",Residency Requirement,
Text/String Operations,Additional Information ends with 'Sales',"df[df['Additional Information'].str.endswith('sales', na=False)]",Additional Information,
Text/String Operations,Additional Information includes 'Pro',"df[df['Additional Information'].str.contains('pro', case=False, na=False)]",Additional Information,
Text/String Operations,list entries where Hours/Shift has 'pr0' in it,"df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]",Hours/Shift,
Text/String Operations,show records where Level begins with Manager,"df[df['Level'].str.startswith('manager', na=False)]",Level,
Text/String Operations,show rows where Posting Date finishes with pro,"df[df['Posting Date'].str.endswith('pro', na=False)]",Posting Date,
Text/String Operations,Minimum Qual Requirements includes 'INC',"df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]",Minimum Qual Requirements,
Text/String Operations,Career Level includes 'pr0',"df[df['Career Level'].str.contains('pro', case=False, na=False)]",Career Level,
Text/String Operations,Process Date starts with 'Tech',"df[df['Process Date'].str.startswith('tech', na=False)]",Process Date,
Text/String Operations,Hours/Shift ends with 'dotcom',"df[df['Hours/Shift'].str.endswith('.com', na=False)]",Hours/Shift,
Text/String Operations,show records where Level begins with Pro,"df[df['Level'].str.startswith('pro', na=False)]",Level,
Text/String Operations,Process Date ends with 'Hiring',"df[df['Process Date'].str.endswith('hiring', na=False)]",Process Date,
Text/String Operations,show rows where Career Level finishes with inc.,"df[df['Career Level'].str.endswith('inc', na=False)]",Career Level,
Text/String Operations,find all where Minimum Qual Requirements contains 'TECH',"df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]",Minimum Qual Requirements,
Text/String Operations,Full-Time/Part-Time indicator starts with 'ink',"df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]",Full-Time/Part-Time indicator,
Text/String Operations,Job Description starts with 'dotcom',"df[df['Job Description'].str.startswith('.com', na=False)]",Job Description,
Text/String Operations,Post Until ends with 'sales',"df[df['Post Until'].str.endswith('sales', na=False)]",Post Until,
Text/String Operations,Title Classification starts with 'managr',"df[df['Title Classification'].str.startswith('manager', na=False)]",Title Classification,
Text/String Operations,show rows where Post Until finishes with Support,"df[df['Post Until'].str.endswith('support', na=False)]",Post Until,
Text/String Operations,Hours/Shift ends with 'hiringg',"df[df['Hours/Shift'].str.endswith('hiring', na=False)]",Hours/Shift,
Text/String Operations,Level contains value pro,"df[df['Level'].str.contains('pro', case=False, na=False)]",Level,
Text/String Operations,Salary Frequency ends with '.COM',"df[df['Salary Frequency'].str.endswith('.com', na=False)]",Salary Frequency,
Text/String Operations,Title Classification includes 'inc.',"df[df['Title Classification'].str.contains('inc', case=False, na=False)]",Title Classification,
Text/String Operations,Work Location 1 ends with 'hiring',"df[df['Work Location 1'].str.endswith('hiring', na=False)]",Work Location 1,
Text/String Operations,Level ends with 'Tech',"df[df['Level'].str.endswith('tech', na=False)]",Level,
Text/String Operations,Division/Work Unit starts with 'sells',"df[df['Division/Work Unit'].str.startswith('sales', na=False)]",Division/Work Unit,
Text/String Operations,Posting Updated ends with 'TECH',"df[df['Posting Updated'].str.endswith('tech', na=False)]",Posting Updated,
Text/String Operations,find company_name ending in Sales,"df[df['company_name'].str.endswith('sales', na=False)]",company_name,
Text/String Operations,find email ending in salez,"df[df['email'].str.endswith('sales', na=False)]",email,
Text/String Operations,department has 'managr' in it,"df[df['department'].str.contains('manager', case=False, na=False)]",department,
Text/String Operations,product_name has word salez,"df[df['product_name'].str.contains('sales', case=False, na=False)]",product_name,
Text/String Operations,city has 'Manager' in it,"df[df['city'].str.contains('manager', case=False, na=False)]",city,
Text/String Operations,get records with product_name beginning as Tech,"df[df['product_name'].str.startswith('tech', na=False)]",product_name,
Text/String Operations,get values with product_name trailing with dotcom,"df[df['product_name'].str.endswith('.com', na=False)]",product_name,
Text/String Operations,find rows where email includes 'Manager',"df[df['email'].str.contains('manager', case=False, na=False)]",email,
Text/String Operations,email has word mngr,"df[df['email'].str.contains('manager', case=False, na=False)]",email,
Text/String Operations,get records with job_title beginning as mngr,"df[df['job_title'].str.startswith('manager', na=False)]",job_title,
Text/String Operations,show rows where city starts with dotcom,"df[df['city'].str.startswith('.com', na=False)]",city,
Text/String Operations,product_name field holds value support,"df[df['product_name'].str.contains('support', case=False, na=False)]",product_name,
Text/String Operations,city has word hiringg,"df[df['city'].str.contains('hiring', case=False, na=False)]",city,
Text/String Operations,find email ending in dotcom,"df[df['email'].str.endswith('.com', na=False)]",email,
Text/String Operations,get values with product_name trailing with Pro,"df[df['product_name'].str.endswith('pro', na=False)]",product_name,
Text/String Operations,get values with job_title trailing with inc.,"df[df['job_title'].str.endswith('inc', na=False)]",job_title,
Text/String Operations,find rows where email includes 'manager',"df[df['email'].str.contains('manager', case=False, na=False)]",email,
Text/String Operations,get records with job_title beginning as pro,"df[df['job_title'].str.startswith('pro', na=False)]",job_title,
Text/String Operations,find product_name ending in Manager,"df[df['product_name'].str.endswith('manager', na=False)]",product_name,
Text/String Operations,find department ending in support,"df[df['department'].str.endswith('support', na=False)]",department,
Text/String Operations,list where department ends with INC,"df[df['department'].str.endswith('inc', na=False)]",department,
Text/String Operations,show rows where city starts with sup,"df[df['city'].str.startswith('support', na=False)]",city,
Text/String Operations,job_title has word managr,"df[df['job_title'].str.contains('manager', case=False, na=False)]",job_title,
Text/String Operations,list where city ends with hiringg,"df[df['city'].str.endswith('hiring', na=False)]",city,
Text/String Operations,department field begins with dotcom,"df[df['department'].str.startswith('.com', na=False)]",department,
Text/String Operations,find city ending in Manager,"df[df['city'].str.endswith('manager', na=False)]",city,
Text/String Operations,job_title field begins with Pro,"df[df['job_title'].str.startswith('pro', na=False)]",job_title,
Text/String Operations,find department ending in managr,"df[df['department'].str.endswith('manager', na=False)]",department,
Text/String Operations,get values with email trailing with manager,"df[df['email'].str.endswith('manager', na=False)]",email,
Text/String Operations,list where company_name ends with .COM,"df[df['company_name'].str.endswith('.com', na=False)]",company_name,
Text/String Operations,find rows where city includes 'Sales',"df[df['city'].str.contains('sales', case=False, na=False)]",city,
Text/String Operations,find city ending in support,"df[df['city'].str.endswith('support', na=False)]",city,
Text/String Operations,list where department ends with Hiring,"df[df['department'].str.endswith('hiring', na=False)]",department,
Text/String Operations,show all department with tech in it,"df[df['department'].str.contains('tech', case=False, na=False)]",department,
Text/String Operations,find rows where product_name includes 'TECH',"df[df['product_name'].str.contains('tech', case=False, na=False)]",product_name,
Text/String Operations,job_title has 'mngr' in it,"df[df['job_title'].str.contains('manager', case=False, na=False)]",job_title,
Text/String Operations,product_name has word INC,"df[df['product_name'].str.contains('inc', case=False, na=False)]",product_name,
Text/String Operations,show rows where email starts with sales,"df[df['email'].str.startswith('sales', na=False)]",email,
Text/String Operations,get records with product_name beginning as TECH,"df[df['product_name'].str.startswith('tech', na=False)]",product_name,
Text/String Operations,find department ending in Manager,"df[df['department'].str.endswith('manager', na=False)]",department,
Text/String Operations,get records with email beginning as Support,"df[df['email'].str.startswith('support', na=False)]",email,
Text/String Operations,job_title has 'hire' in it,"df[df['job_title'].str.contains('hiring', case=False, na=False)]",job_title,
Text/String Operations,company_name field holds value Sales,"df[df['company_name'].str.contains('sales', case=False, na=False)]",company_name,
Text/String Operations,show rows where department starts with pro,"df[df['department'].str.startswith('pro', na=False)]",department,
Text/String Operations,department has word inc.,"df[df['department'].str.contains('inc', case=False, na=False)]",department,
Text/String Operations,show rows where email starts with INC,"df[df['email'].str.startswith('inc', na=False)]",email,
Text/String Operations,get values with product_name trailing with dotcom,"df[df['product_name'].str.endswith('.com', na=False)]",product_name,
Text/String Operations,find product_name ending in Support,"df[df['product_name'].str.endswith('support', na=False)]",product_name,
Text/String Operations,product_name field begins with TECH,"df[df['product_name'].str.startswith('tech', na=False)]",product_name,
Text/String Operations,get entries if department contains .com,"df[df['department'].str.contains('.com', case=False, na=False)]",department,
Text/String Operations,get rows where product_name does not contain 'suport',"df[~df['product_name'].str.contains('suport', case=False, na=False)]",product_name,
Text/String Operations,get rows where company_name does not contain '.COM',"df[~df['company_name'].str.contains('.COM', case=False, na=False)]",company_name,
Text/String Operations,find email having 'tech' and company_name with 'hiringg',"df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]",email,company_name
Text/String Operations,get rows where product_name does not contain 'tek',"df[~df['product_name'].str.contains('tek', case=False, na=False)]",product_name,
Text/String Operations,find department having 'support' and job_title with 'inc.',"df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]",department,job_title
Text/String Operations,get rows where company_name does not contain 'hiring',"df[~df['company_name'].str.contains('hiring', case=False, na=False)]",company_name,
Text/String Operations,find company_name having 'salez' and product_name with 'managr',"df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]",company_name,product_name
Text/String Operations,find department having 'salez' and email with 'sales',"df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]",department,email
Text/String Operations,get rows where product_name does not contain 'Sales',"df[~df['product_name'].str.contains('Sales', case=False, na=False)]",product_name,
Text/String Operations,get rows where email does not contain 'support',"df[~df['email'].str.contains('support', case=False, na=False)]",email,
Text/String Operations,list records where department has 'dotcom' or company_name has 'dotcom',"df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]",department,company_name
Text/String Operations,get rows where department does not contain 'inc.',"df[~df['department'].str.contains('inc.', case=False, na=False)]",department,
Text/String Operations,find job_title having 'managr' and city with '.com',"df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]",job_title,city
Text/String Operations,get rows where department does not contain 'tek',"df[~df['department'].str.contains('tek', case=False, na=False)]",department,
Text/String Operations,get rows where department does not contain 'hiring',"df[~df['department'].str.contains('hiring', case=False, na=False)]",department,
Text/String Operations,get rows where product_name does not contain 'PRo',"df[~df['product_name'].str.contains('PRo', case=False, na=False)]",product_name,
Text/String Operations,find city having 'dotcom' and product_name with 'pr0',"df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]",city,product_name
Text/String Operations,list records where product_name has 'Tech' or job_title has 'PRo',"df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]",product_name,job_title
Text/String Operations,list records where department has '.com' or job_title has 'hiring',"df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]",department,job_title
Text/String Operations,list records where job_title has 'sup' or product_name has '.com',"df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]",job_title,product_name
Text/String Operations,list records where product_name has 'support' or job_title has 'Sales',"df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]",product_name,job_title
Text/String Operations,find email having 'salez' and job_title with 'dotcom',"df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]",email,job_title
Text/String Operations,find job_title having 'mngr' and company_name with 'hiringg',"df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]",job_title,company_name
Text/String Operations,list records where job_title has 'sales' or product_name has 'ink',"df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]",job_title,product_name
Text/String Operations,list records where job_title has '.COM' or email has 'pro',"df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]",job_title,email
Text/String Operations,list entries where Salary Range To has 'inc' in it,"df[df['Salary Range To'].str.contains('inc', case=False, na=False)]",Salary Range To,
Text/String Operations,show rows where Civil Service Title finishes with salez,"df[df['Civil Service Title'].str.endswith('sales', na=False)]",Civil Service Title,
Text/String Operations,show records where Level begins with INC,"df[df['Level'].str.startswith('inc', na=False)]",Level,
Text/String Operations,show records where Additional Information begins with sells,"df[df['Additional Information'].str.startswith('sales', na=False)]",Additional Information,
Text/String Operations,Salary Range To contains value sales,"df[df['Salary Range To'].str.contains('sales', case=False, na=False)]",Salary Range To,
Text/String Operations,find all where Job Description contains 'hire',"df[df['Job Description'].str.contains('hiring', case=False, na=False)]",Job Description,
Text/String Operations,list entries where Salary Range From has '.com' in it,"df[df['Salary Range From'].str.contains('.com', case=False, na=False)]",Salary Range From,
Text/String Operations,find all where Civil Service Title contains 'Tech',"df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]",Civil Service Title,
Text/String Operations,show records where Work Location 1 begins with ink,"df[df['Work Location 1'].str.startswith('inc', na=False)]",Work Location 1,
Text/String Operations,Level starts with 'support',"df[df['Level'].str.startswith('support', na=False)]",Level,
Text/String Operations,Posting Updated ends with 'Support',"df[df['Posting Updated'].str.endswith('support', na=False)]",Posting Updated,
Text/String Operations,Additional Information starts with 'managr',"df[df['Additional Information'].str.startswith('manager', na=False)]",Additional Information,
Text/String Operations,show records where Residency Requirement begins with sup,"df[df['Residency Requirement'].str.startswith('support', na=False)]",Residency Requirement,
Text/String Operations,show records where Residency Requirement begins with sells,"df[df['Residency Requirement'].str.startswith('sales', na=False)]",Residency Requirement,
Text/String Operations,Additional Information ends with 'Sales',"df[df['Additional Information'].str.endswith('sales', na=False)]",Additional Information,
Text/String Operations,Additional Information includes 'Pro',"df[df['Additional Information'].str.contains('pro', case=False, na=False)]",Additional Information,
Text/String Operations,list entries where Hours/Shift has 'pr0' in it,"df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]",Hours/Shift,
Text/String Operations,show records where Level begins with Manager,"df[df['Level'].str.startswith('manager', na=False)]",Level,
Text/String Operations,show rows where Posting Date finishes with pro,"df[df['Posting Date'].str.endswith('pro', na=False)]",Posting Date,
Text/String Operations,Minimum Qual Requirements includes 'INC',"df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]",Minimum Qual Requirements,
Text/String Operations,Career Level includes 'pr0',"df[df['Career Level'].str.contains('pro', case=False, na=False)]",Career Level,
Text/String Operations,Process Date starts with 'Tech',"df[df['Process Date'].str.startswith('tech', na=False)]",Process Date,
Text/String Operations,Hours/Shift ends with 'dotcom',"df[df['Hours/Shift'].str.endswith('.com', na=False)]",Hours/Shift,
Text/String Operations,show records where Level begins with Pro,"df[df['Level'].str.startswith('pro', na=False)]",Level,
Text/String Operations,Process Date ends with 'Hiring',"df[df['Process Date'].str.endswith('hiring', na=False)]",Process Date,
Text/String Operations,show rows where Career Level finishes with inc.,"df[df['Career Level'].str.endswith('inc', na=False)]",Career Level,
Text/String Operations,find all where Minimum Qual Requirements contains 'TECH',"df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]",Minimum Qual Requirements,
Text/String Operations,Full-Time/Part-Time indicator starts with 'ink',"df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]",Full-Time/Part-Time indicator,
Text/String Operations,Job Description starts with 'dotcom',"df[df['Job Description'].str.startswith('.com', na=False)]",Job Description,
Text/String Operations,Post Until ends with 'sales',"df[df['Post Until'].str.endswith('sales', na=False)]",Post Until,
Text/String Operations,Title Classification starts with 'managr',"df[df['Title Classification'].str.startswith('manager', na=False)]",Title Classification,
Text/String Operations,show rows where Post Until finishes with Support,"df[df['Post Until'].str.endswith('support', na=False)]",Post Until,
Text/String Operations,Hours/Shift ends with 'hiringg',"df[df['Hours/Shift'].str.endswith('hiring', na=False)]",Hours/Shift,
Text/String Operations,Level contains value pro,"df[df['Level'].str.contains('pro', case=False, na=False)]",Level,
Text/String Operations,Salary Frequency ends with '.COM',"df[df['Salary Frequency'].str.endswith('.com', na=False)]",Salary Frequency,
Text/String Operations,Title Classification includes 'inc.',"df[df['Title Classification'].str.contains('inc', case=False, na=False)]",Title Classification,
Text/String Operations,Work Location 1 ends with 'hiring',"df[df['Work Location 1'].str.endswith('hiring', na=False)]",Work Location 1,
Text/String Operations,Level ends with 'Tech',"df[df['Level'].str.endswith('tech', na=False)]",Level,
Text/String Operations,Division/Work Unit starts with 'sells',"df[df['Division/Work Unit'].str.startswith('sales', na=False)]",Division/Work Unit,
Text/String Operations,Posting Updated ends with 'TECH',"df[df['Posting Updated'].str.endswith('tech', na=False)]",Posting Updated,
Text/String Operations,list all jobs with Salary Range From minimum 50000,df[df['Salary Range From'] >= 50000],Salary Range From,
Text/String Operations,Level != 100000,df[df['Level'] != 100000],Level,
Text/String Operations,Salary Range To should be below 30000,df[df['Salary Range To'] < 30000],Salary Range To,
Text/String Operations,Salary Range From should be maximum 200000,df[df['Salary Range From'] <= 200000],Salary Range From,
Text/String Operations,show records where Salary Range From is below 75000,df[df['Salary Range From'] < 75000],Salary Range From,
Text/String Operations,list all jobs with Salary Range To maximum 75000,df[df['Salary Range To'] <= 75000],Salary Range To,
Text/String Operations,get jobs where Level is greater than 150000,df[df['Level'] > 150000],Level,
Text/String Operations,show records where Level is >= 50000,df[df['Level'] >= 50000],Level,
Text/String Operations,Salary Range To should be maximum 150000,df[df['Salary Range To'] <= 150000],Salary Range To,
Text/String Operations,show records where Level is more than 30000,df[df['Level'] > 30000],Level,
Text/String Operations,get jobs where Level is != 50000,df[df['Level'] != 50000],Level,
Text/String Operations,Salary Range From should be == 75000,df[df['Salary Range From'] == 75000],Salary Range From,
Text/String Operations,show records where Level is maximum 75000,df[df['Level'] <= 75000],Level,
Text/String Operations,get jobs where Level is more than 30000,df[df['Level'] > 30000],Level,
Text/String Operations,Level <= 30000,df[df['Level'] <= 30000],Level,
Text/String Operations,list all jobs with Level not 200000,df[df['Level'] != 200000],Level,
Text/String Operations,get jobs where Salary Range From is under 100000,df[df['Salary Range From'] < 100000],Salary Range From,
Text/String Operations,Salary Range From should be under 75000,df[df['Salary Range From'] < 75000],Salary Range From,
Text/String Operations,list all jobs with Level equal to 100000,df[df['Level'] == 100000],Level,
Text/String Operations,Salary Range To should be not 30000,df[df['Salary Range To'] != 30000],Salary Range To,
Text/String Operations,show records where Level is more than 50000,df[df['Level'] > 50000],Level,
Text/String Operations,Salary Range To != 50000,df[df['Salary Range To'] != 50000],Salary Range To,
Text/String Operations,Salary Range From <= 75000,df[df['Salary Range From'] <= 75000],Salary Range From,
Text/String Operations,get jobs where Salary Range From is maximum 75000,df[df['Salary Range From'] <= 75000],Salary Range From,
Text/String Operations,get jobs where Level is >= 200000,df[df['Level'] >= 200000],Level,
Text/String Operations,Level minimum 50000,df[df['Level'] >= 50000],Level,
Text/String Operations,Salary Range To should be != 200000,df[df['Salary Range To'] != 200000],Salary Range To,
Text/String Operations,Salary Range To less than 200000,df[df['Salary Range To'] < 200000],Salary Range To,
Text/String Operations,show records where Salary Range To is under 30000,df[df['Salary Range To'] < 30000],Salary Range To,
Text/String Operations,show records where Level is at most 200000,df[df['Level'] <= 200000],Level,
Text/String Operations,get jobs where Salary Range To is <= 100000,df[df['Salary Range To'] <= 100000],Salary Range To,
Text/String Operations,list all jobs with Salary Range To maximum 150000,df[df['Salary Range To'] <= 150000],Salary Range To,
Text/String Operations,Salary Range From should be above 100000,df[df['Salary Range From'] > 100000],Salary Range From,
Text/String Operations,show records where Salary Range To is at most 30000,df[df['Salary Range To'] <= 30000],Salary Range To,
Text/String Operations,list all jobs with Level less than 30000,df[df['Level'] < 30000],Level,
Text/String Operations,show records where Salary Range From is equal to 30000,df[df['Salary Range From'] == 30000],Salary Range From,
Text/String Operations,get jobs where Salary Range From is minimum 50000,df[df['Salary Range From'] >= 50000],Salary Range From,
Text/String Operations,show records where Salary Range From is not 200000,df[df['Salary Range From'] != 200000],Salary Range From,
Text/String Operations,get jobs where Level is at most 100000,df[df['Level'] <= 100000],Level,
Text/String Operations,list all jobs with Salary Range From above 75000,df[df['Salary Range From'] > 75000],Salary Range From,
Text/String Operations,Salary Range From should be != 200000,df[df['Salary Range From'] != 200000],Salary Range From,
Text/String Operations,list all jobs with Level is 150000,df[df['Level'] == 150000],Level,
Text/String Operations,show records where Salary Range To is greater than 200000,df[df['Salary Range To'] > 200000],Salary Range To,
Text/String Operations,show records where Salary Range To is not equal to 150000,df[df['Salary Range To'] != 150000],Salary Range To,
Text/String Operations,list all jobs with Salary Range From >= 100000,df[df['Salary Range From'] >= 100000],Salary Range From,
Text/String Operations,list all jobs with Level not 75000,df[df['Level'] != 75000],Level,
Text/String Operations,show records where Level is greater than 200000,df[df['Level'] > 200000],Level,
Text/String Operations,Salary Range From maximum 100000,df[df['Salary Range From'] <= 100000],Salary Range From,
Text/String Operations,Salary Range To should be at least 75000,df[df['Salary Range To'] >= 75000],Salary Range To,
Text/String Operations,Salary Range To != 50000,df[df['Salary Range To'] != 50000],Salary Range To,
Text/String Operations,show records where Posting Date is not equal to 200000,df[pd.to_datetime(df['Posting Date']) != pd.to_datetime('200000')],Posting Date,
Text/String Operations,show entries having Sales >= 25000,df[df['Sales'] >= 25000],Sales,
Text/String Operations,show entries having discount is 150000,df[df['discount'] == 150000],discount,
Text/String Operations,units_sold <= 30000,df[df['units_sold'] <= 30000],units_sold,
Text/String Operations,revenue should be more than 30000,df[df['revenue'] > 30000],revenue,
Text/String Operations,show entries having discount below 200000,df[df['discount'] < 200000],discount,
Text/String Operations,Salary Range To >= 200000,df[df['Salary Range To'] >= 200000],Salary Range To,
Text/String Operations,Posting Date should be minimum 100000,df[pd.to_datetime(df['Posting Date']) >= pd.to_datetime('100000')],Posting Date,
Text/String Operations,units_sold should be >= 25000,df[df['units_sold'] >= 25000],units_sold,
Text/String Operations,Salary Range To not 150000,df[df['Salary Range To'] != 150000],Salary Range To,
Text/String Operations,revenue equal to 25000,df[df['revenue'] == 25000],revenue,
Text/String Operations,show entries having revenue not 99999,df[df['revenue'] != 99999],revenue,
Text/String Operations,get records where revenue is greater than 50000,df[df['revenue'] > 50000],revenue,
Text/String Operations,Salary Range To less than 30000,df[df['Salary Range To'] < 30000],Salary Range To,
Text/String Operations,Salary Range From under 25000,df[df['Salary Range From'] < 25000],Salary Range From,
Text/String Operations,Process Date should be <= 99999,df[pd.to_datetime(df['Process Date']) <= pd.to_datetime('99999')],Process Date,
Text/String Operations,show entries having Salary Range From equal to 1,df[df['Salary Range From'] == 1],Salary Range From,
Text/String Operations,revenue should be equal to 30000,df[df['revenue'] == 30000],revenue,
Text/String Operations,entries where Posting Updated is at most 25000,df[pd.to_datetime(df['Posting Updated']) <= pd.to_datetime('25000')],Posting Updated,
Text/String Operations,get records where Sales is greater than 100000,df[df['Sales'] > 100000],Sales,
Text/String Operations,get records where revenue is more than 100000,df[df['revenue'] > 100000],revenue,
Text/String Operations,list data with Posting Updated less than 10,df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')],Posting Updated,
Text/String Operations,list data with Posting Updated under 0,df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('0')],Posting Updated,
Text/String Operations,show records where Posting Updated is below 10,df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')],Posting Updated,
Text/String Operations,Post Until should be not 200000,df[pd.to_datetime(df['Post Until']) != pd.to_datetime('200000')],Post Until,
Text/String Operations,show records where Process Date is >= 150000,df[pd.to_datetime(df['Process Date']) >= pd.to_datetime('150000')],Process Date,
Text/String Operations,Sales below 10,df[df['Sales'] < 10],Sales,
Text/String Operations,Salary Range From greater than 200000,df[df['Salary Range From'] > 200000],Salary Range From,
Text/String Operations,get records where Salary Range From is == 25000,df[df['Salary Range From'] == 25000],Salary Range From,
Text/String Operations,units_sold should be is 30000,df[df['units_sold'] == 30000],units_sold,
Text/String Operations,Process Date should be greater than 30000,df[pd.to_datetime(df['Process Date']) > pd.to_datetime('30000')],Process Date,
Text/String Operations,show entries having discount at most 30000,df[df['discount'] <= 30000],discount,
Text/String Operations,show entries having units_sold at most 150000,df[df['units_sold'] <= 150000],units_sold,
Text/String Operations,Process Date should be under 9999,df[pd.to_datetime(df['Process Date']) < pd.to_datetime('9999')],Process Date,
Text/String Operations,show entries having discount at least 25000,df[df['discount'] >= 25000],discount,
Text/String Operations,Sales should be is 99999,df[df['Sales'] == 99999],Sales,
Text/String Operations,get records where revenue is at most 50000,df[df['revenue'] <= 50000],revenue,
Text/String Operations,revenue should be != 0,df[df['revenue'] != 0],revenue,
Text/String Operations,Sales should be below 9999,df[df['Sales'] < 9999],Sales,
Text/String Operations,get records where Sales is is 150000,df[df['Sales'] == 150000],Sales,