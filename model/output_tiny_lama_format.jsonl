{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Origin System, Project Tag, Request ID, channel, quantity\n<|end|>\n<|user|>\nGet the number of quantity values grouped by channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['quantity'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Release Version, Sync Status, Timestamp Created, cost, region\n<|end|>\n<|user|>\nCompute the minimum cost per region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['cost'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Environment Name, Response Time (ms), Session Token, cost, month\n<|end|>\n<|user|>\nGet the average cost grouped by month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['cost'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Processing Time, Request ID, Tracking Code, month\n<|end|>\n<|user|>\nGive the median month for each month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['month'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Request ID, Sync Status, System ID, profit, store_id\n<|end|>\n<|user|>\nFind standard deviation of profit grouped by store_id.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('store_id')['profit'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Processing Time, Project Tag, Run ID, channel, expenses\n<|end|>\n<|user|>\nCalculate the total expenses for each channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['expenses'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Origin System, Response Time (ms), Source File Name, Sync Status, cost, department\n<|end|>\n<|user|>\nFind the maximum cost in every department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['cost'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Request ID, Retry Count, Source File Name, category, cost\n<|end|>\n<|user|>\nCompute the minimum cost per category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['cost'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Processing Time, Run ID, Timestamp Created, Workflow Step, city, profit\n<|end|>\n<|user|>\nShow the sum of profit across city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['profit'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Internal Notes, Retry Count, Workflow Step, channel, cost\n<|end|>\n<|user|>\nFind the maximum cost in every channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['cost'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Flagged Reason, Internal Notes, Reviewer Comments, city, tax\n<|end|>\n<|user|>\nCalculate the total tax for each city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['tax'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Origin System, Source File Name, Tracking Code, department, sales\n<|end|>\n<|user|>\nList the count of sales for each department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['sales'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Flagged Reason, Internal Notes, Validation Notes, customer_type, expenses\n<|end|>\n<|user|>\nGive the median expenses for each customer_type.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('customer_type')['expenses'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Batch Number, Project Tag, category, units_sold\n<|end|>\n<|user|>\nCalculate the total units_sold for each category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['units_sold'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Error Code, Response Time (ms), Reviewer Comments, Session Token, store_id\n<|end|>\n<|user|>\nGet the average store_id grouped by store_id.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('store_id')['store_id'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Release Version, Run ID, Sync Status, Tracking Code, cost, product\n<|end|>\n<|user|>\nGet the average cost grouped by product.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('product')['cost'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Retry Count, Sync Status, channel, quantity\n<|end|>\n<|user|>\nFind the maximum quantity in every channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['quantity'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Flagged Reason, Internal Notes, Manual Override, Origin System, channel, expenses\n<|end|>\n<|user|>\nFind the maximum expenses in every channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['expenses'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Last Modified By, Project Tag, Reviewer Comments, customer_type, order_value\n<|end|>\n<|user|>\nGet the number of order_value values grouped by customer_type.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('customer_type')['order_value'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Project Tag, Release Version, Run ID, Validation Notes, month, units_sold\n<|end|>\n<|user|>\nShow how many units_sold entries exist per month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['units_sold'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Last Modified By, Project Tag, discount, store_id\n<|end|>\n<|user|>\nFind standard deviation of discount grouped by store_id.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('store_id')['discount'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Last Modified By, Manual Override, Sync Status, department, quantity\n<|end|>\n<|user|>\nShow how many quantity entries exist per department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['quantity'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Origin System, Project Tag, Run ID, Validation Notes, department, units_sold\n<|end|>\n<|user|>\nShow the sum of units_sold across department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['units_sold'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Release Version, Retry Count, Sync Status, Workflow Step, category, sales\n<|end|>\n<|user|>\nGive the median sales for each category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['sales'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Retry Count, Source File Name, Sync Status, Tracking Code, category, units_sold\n<|end|>\n<|user|>\nShow how many units_sold entries exist per category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['units_sold'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Flagged Reason, Origin System, Workflow Step, department, sales\n<|end|>\n<|user|>\nShow the sum of sales across department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['sales'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Response Time (ms), Run ID, Session Token, Validation Notes, Workflow Step, department, units_sold\n<|end|>\n<|user|>\nCalculate the total units_sold for each department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['units_sold'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Flagged Reason, Project Tag, Session Token, department, discount\n<|end|>\n<|user|>\nCalculate the total discount for each department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['discount'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Origin System, Project Tag, Timestamp Created, Validation Notes, month, units_sold\n<|end|>\n<|user|>\nShow how many units_sold entries exist per month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['units_sold'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Origin System, Sync Status, Timestamp Created, channel, units_sold\n<|end|>\n<|user|>\nList the count of units_sold for each channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['units_sold'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Processing Time, Response Time (ms), Session Token, category, tax\n<|end|>\n<|user|>\nFind the maximum tax in every category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['tax'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Reviewer Comments, Sync Status, System ID, Timestamp Created, store_id, units_sold\n<|end|>\n<|user|>\nList the count of units_sold for each store_id.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('store_id')['units_sold'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Internal Notes, Retry Count, Tracking Code, department, units_sold\n<|end|>\n<|user|>\nFind standard deviation of units_sold grouped by department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['units_sold'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Project Tag, Release Version, Source File Name, Timestamp Created, city, order_value\n<|end|>\n<|user|>\nGet the average order_value grouped by city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['order_value'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Flagged Reason, Manual Override, Processing Time, order_value, store_id\n<|end|>\n<|user|>\nFind standard deviation of order_value grouped by store_id.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('store_id')['order_value'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Origin System, Request ID, System ID, region\n<|end|>\n<|user|>\nCalculate the total region for each region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['region'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Internal Notes, Release Version, Session Token, department, discount\n<|end|>\n<|user|>\nFind standard deviation of discount grouped by department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['discount'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Origin System, Project Tag, Retry Count, Workflow Step, customer_type, units_sold\n<|end|>\n<|user|>\nShow the sum of units_sold across customer_type.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('customer_type')['units_sold'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Last Modified By, Manual Override, Processing Time, Request ID, product, quantity\n<|end|>\n<|user|>\nShow how many quantity entries exist per product.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('product')['quantity'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Origin System, Retry Count, Session Token, System ID, month, profit\n<|end|>\n<|user|>\nFind standard deviation of profit grouped by month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['profit'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Last Modified By, System ID, Validation Notes, department, units_sold\n<|end|>\n<|user|>\nList the count of units_sold for each department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['units_sold'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Project Tag, System ID, cost, department\n<|end|>\n<|user|>\nList the count of cost for each department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['cost'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Last Modified By, Retry Count, Reviewer Comments, Timestamp Created, cost, region\n<|end|>\n<|user|>\nCalculate the total cost for each region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['cost'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Request ID, Retry Count, System ID, Validation Notes, product, units_sold\n<|end|>\n<|user|>\nGet the average units_sold grouped by product.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('product')['units_sold'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Internal Notes, Request ID, Workflow Step, quantity, store_id\n<|end|>\n<|user|>\nFind standard deviation of quantity grouped by store_id.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('store_id')['quantity'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Reviewer Comments, Session Token, Source File Name, Validation Notes, order_value, region\n<|end|>\n<|user|>\nShow the sum of order_value across region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['order_value'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Response Time (ms), Session Token, Sync Status, Tracking Code, order_value, region\n<|end|>\n<|user|>\nFind the maximum order_value in every region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['order_value'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Document Ref, Environment Name, Retry Count, expenses, store_id\n<|end|>\n<|user|>\nFind standard deviation of expenses grouped by store_id.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('store_id')['expenses'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Release Version, Retry Count, Timestamp Created, channel, order_value\n<|end|>\n<|user|>\nCompute the minimum order_value per channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['order_value'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Last Modified By, Origin System, System ID, customer_type, profit\n<|end|>\n<|user|>\nList the count of profit for each customer_type.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('customer_type')['profit'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Error Code, Processing Time, Validation Notes, region, units_sold\n<|end|>\n<|user|>\nCompute the minimum units_sold per region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['units_sold'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Error Code, Retry Count, Run ID, cost, region\n<|end|>\n<|user|>\nGet the number of cost values grouped by region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['cost'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Manual Override, Project Tag, Release Version, Reviewer Comments, region, sales\n<|end|>\n<|user|>\nGive the median sales for each region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['sales'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Session Token, Sync Status, System ID, channel, quantity\n<|end|>\n<|user|>\nGet the number of quantity values grouped by channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['quantity'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Request ID, Response Time (ms), Sync Status, Workflow Step, profit, region\n<|end|>\n<|user|>\nShow how many profit entries exist per region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['profit'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Request ID, Response Time (ms), Sync Status, product\n<|end|>\n<|user|>\nShow how many product entries exist per product.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('product')['product'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Run ID, Sync Status, Tracking Code, department, tax\n<|end|>\n<|user|>\nGet the average tax grouped by department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['tax'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Session Token, Tracking Code, Workflow Step, department, order_value\n<|end|>\n<|user|>\nShow the sum of order_value across department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['order_value'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Origin System, Release Version, Sync Status, System ID, category, units_sold\n<|end|>\n<|user|>\nGet the number of units_sold values grouped by category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['units_sold'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Error Code, Timestamp Created, Validation Notes, category, sales\n<|end|>\n<|user|>\nGet the number of sales values grouped by category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['sales'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Response Time (ms), Session Token, Source File Name, Sync Status, category, order_value\n<|end|>\n<|user|>\nGet the average order_value grouped by category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['order_value'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Internal Notes, Processing Time, Source File Name, city, cost\n<|end|>\n<|user|>\nGet the number of cost values grouped by city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['cost'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Processing Time, Release Version, Reviewer Comments, city, units_sold\n<|end|>\n<|user|>\nCompute the minimum units_sold per city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['units_sold'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Project Tag, Release Version, Tracking Code, employee, expenses\n<|end|>\n<|user|>\nShow the sum of expenses across employee.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('employee')['expenses'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Internal Notes, Project Tag, Tracking Code, expenses, store_id\n<|end|>\n<|user|>\nFind the maximum expenses in every store_id.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('store_id')['expenses'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Source File Name, Sync Status, Workflow Step, region\n<|end|>\n<|user|>\nGive the median region for each region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['region'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Manual Override, Processing Time, Timestamp Created, category, tax\n<|end|>\n<|user|>\nList the count of tax for each category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['tax'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Manual Override, Origin System, Sync Status, channel\n<|end|>\n<|user|>\nGet the average channel grouped by channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['channel'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Manual Override, Source File Name, Validation Notes, cost, month\n<|end|>\n<|user|>\nShow the sum of cost across month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['cost'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Internal Notes, Project Tag, Tracking Code, department, discount\n<|end|>\n<|user|>\nFind the maximum discount in every department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['discount'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Batch Number, Request ID, Validation Notes, discount, month\n<|end|>\n<|user|>\nShow the sum of discount across month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['discount'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Processing Time, Retry Count, Sync Status, channel, quantity\n<|end|>\n<|user|>\nFind the maximum quantity in every channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['quantity'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Error Code, Flagged Reason, Session Token, channel, tax\n<|end|>\n<|user|>\nCompute the minimum tax per channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['tax'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Origin System, Request ID, Tracking Code, cost, month\n<|end|>\n<|user|>\nCalculate the total cost for each month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['cost'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Processing Time, Source File Name, Validation Notes, month, profit\n<|end|>\n<|user|>\nGet the average profit grouped by month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['profit'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Release Version, Run ID, Source File Name, channel\n<|end|>\n<|user|>\nGet the average channel grouped by channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['channel'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Error Code, Run ID, Timestamp Created, expenses, month\n<|end|>\n<|user|>\nFind the maximum expenses in every month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['expenses'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Error Code, Response Time (ms), Tracking Code, city, units_sold\n<|end|>\n<|user|>\nGet the number of units_sold values grouped by city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['units_sold'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Response Time (ms), Tracking Code, Workflow Step, channel, expenses\n<|end|>\n<|user|>\nShow the sum of expenses across channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['expenses'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, System ID, Tracking Code, Validation Notes, expenses, region\n<|end|>\n<|user|>\nList the count of expenses for each region.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('region')['expenses'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Backup ID, Last Modified By, System ID, month, order_value\n<|end|>\n<|user|>\nGet the average order_value grouped by month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['order_value'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Flagged Reason, Release Version, Sync Status, city, sales\n<|end|>\n<|user|>\nCalculate the total sales for each city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['sales'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Internal Notes, Response Time (ms), Session Token, Sync Status, expenses, product\n<|end|>\n<|user|>\nFind the maximum expenses in every product.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('product')['expenses'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Processing Time, Release Version, Tracking Code, cost, employee\n<|end|>\n<|user|>\nList the count of cost for each employee.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('employee')['cost'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Response Time (ms), System ID, Validation Notes, Workflow Step, department, sales\n<|end|>\n<|user|>\nShow how many sales entries exist per department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['sales'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Release Version, Run ID, Sync Status, Workflow Step, channel, profit\n<|end|>\n<|user|>\nGet the average profit grouped by channel.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('channel')['profit'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Origin System, Project Tag, Release Version, Timestamp Created, category, discount\n<|end|>\n<|user|>\nCalculate the total discount for each category.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('category')['discount'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Retry Count, Validation Notes, Workflow Step, employee, profit\n<|end|>\n<|user|>\nShow how many profit entries exist per employee.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('employee')['profit'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Manual Override, Request ID, Validation Notes, month, sales\n<|end|>\n<|user|>\nFind the maximum sales in every month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['sales'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Error Code, Internal Notes, Response Time (ms), city, sales\n<|end|>\n<|user|>\nGive the median sales for each city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['sales'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Reviewer Comments, System ID, Timestamp Created, Validation Notes, department, units_sold\n<|end|>\n<|user|>\nShow the sum of units_sold across department.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('department')['units_sold'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Reviewer Comments, Session Token, Sync Status, cost, employee\n<|end|>\n<|user|>\nGive the median cost for each employee.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('employee')['cost'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Last Modified By, Manual Override, Run ID, customer_type, profit\n<|end|>\n<|user|>\nGet the number of profit values grouped by customer_type.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('customer_type')['profit'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Project Tag, Source File Name, System ID, employee, profit\n<|end|>\n<|user|>\nFind the maximum profit in every employee.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('employee')['profit'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Batch Number, Release Version, Request ID, city, profit\n<|end|>\n<|user|>\nCalculate the total profit for each city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['profit'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Session Token, Timestamp Created, Validation Notes, month, units_sold\n<|end|>\n<|user|>\nFind standard deviation of units_sold grouped by month.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('month')['units_sold'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Internal Notes, Origin System, Session Token, employee\n<|end|>\n<|user|>\nFind the maximum employee in every employee.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('employee')['employee'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Error Code, Origin System, Timestamp Created, customer_type, quantity\n<|end|>\n<|user|>\nCalculate the total quantity for each customer_type.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('customer_type')['quantity'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Project Tag, Release Version, Run ID, Workflow Step, city, quantity\n<|end|>\n<|user|>\nShow the sum of quantity across city.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('city')['quantity'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Origin System, Session Token, System ID, customer_type, units_sold\n<|end|>\n<|user|>\nCompute the minimum units_sold per customer_type.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('customer_type')['units_sold'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Job ID, Level, Project Tag, Tracking Code, Validation Notes\n<|end|>\n<|user|>\ngroup job id and apply min on Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Job ID, Level, Origin System, Processing Time, Request ID, Tracking Code\n<|end|>\n<|user|>\ngroup JOB ID and apply count on Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Level, Origin System, Project Tag, Retry Count, Timestamp Created, Workflow Step\n<|end|>\n<|user|>\ngroup job identifier and apply sum on Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Environment Name, Last Modified By, Manual Override, Run ID\n<|end|>\n<|user|>\nagcy wise std of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Batch Number, Internal Notes, Processing Time, Request ID\n<|end|>\n<|user|>\ngroup AGENCY and apply mean on # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Run ID, Session Token, Timestamp Created, Tracking Code\n<|end|>\n<|user|>\ngroup the data by AGENCY and get sum of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Business Title, Level, Response Time (ms), Reviewer Comments, Timestamp Created\n<|end|>\n<|user|>\nmin Level per biz title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Business Title, Level, Processing Time, Reviewer Comments, Timestamp Created, Tracking Code\n<|end|>\n<|user|>\ngroup the data by biz title and get max of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Session Token, Source File Name, Tracking Code, Validation Notes\n<|end|>\n<|user|>\naggregate # Of Positions by civil title using max\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Error Code, Release Version, Reviewer Comments, Session Token, Sync Status\n<|end|>\n<|user|>\ngroup civil title and apply median on # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Job ID, Release Version, Retry Count, Reviewer Comments, Title Classification\n<|end|>\n<|user|>\ncount Job ID per title class\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Environment Name, Level, Processing Time, Session Token, Title Code No\n<|end|>\n<|user|>\ngroup title code no and apply median on Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Level, Sync Status, Timestamp Created, Title Code No, Validation Notes\n<|end|>\n<|user|>\ngroup the data by tcode and get count of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Level, Processing Time, Request ID, Session Token, Source File Name, Title Code No\n<|end|>\n<|user|>\ncount Level based on tile code\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Environment Name, Last Modified By, Source File Name, Validation Notes, Workflow Step\n<|end|>\n<|user|>\nsum # Of Positions by agency\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Job ID, Level, Processing Time, Release Version, Source File Name, Validation Notes\n<|end|>\n<|user|>\nmedian Level by Job Id\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Environment Name, Last Modified By, Level, Origin System, Source File Name, Sync Status\n<|end|>\n<|user|>\ncount Level per official title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Flagged Reason, Internal Notes, Run ID, Source File Name\n<|end|>\n<|user|>\norganize by service title and get sum of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Error Code, Level, Sync Status, Title Code No, Tracking Code\n<|end|>\n<|user|>\ncategorized by tile code and get mean of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Archived Flag, Manual Override, Reviewer Comments, Validation Notes\n<|end|>\n<|user|>\nsplit by agcy and get min of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Level, Request ID, Source File Name, Sync Status, Title Code No\n<|end|>\n<|user|>\nmin Level wise title code\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Error Code, Flagged Reason, Origin System, Release Version, Workflow Step\n<|end|>\n<|user|>\ngroup by organisation and get max of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Business Title, Level, Origin System, Retry Count, Reviewer Comments\n<|end|>\n<|user|>\nsum Level grpby title of job\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Job ID, Project Tag, Release Version, System ID, Title Classification\n<|end|>\n<|user|>\nmax Job ID per title classfn\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Business Title, Internal Notes, Level, Request ID, Session Token, Workflow Step\n<|end|>\n<|user|>\nsum Level grp biz title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Internal Notes, Last Modified By, Level, Origin System, Response Time (ms), Tracking Code\n<|end|>\n<|user|>\norganize by title and get count of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Level, Processing Time, Reviewer Comments, Source File Name, Title Code No\n<|end|>\n<|user|>\nbucket by titlecode number and get median of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Internal Notes, Level, Processing Time, System ID, Workflow Step\n<|end|>\n<|user|>\npartition by business title and get count of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Job ID, Level, Origin System, Response Time (ms), Session Token\n<|end|>\n<|user|>\ncount Level by JOB ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Processing Time, Request ID, Run ID, System ID, Title Code No, Tracking Code\n<|end|>\n<|user|>\nstd Level grpby tcode\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Batch Number, Civil Service Title, Environment Name, Release Version, Source File Name, Validation Notes\n<|end|>\n<|user|>\nmax # Of Positions based on service title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Job ID, Processing Time, Release Version, Reviewer Comments, Title Classification\n<|end|>\n<|user|>\npartition by classification and get mean of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Job ID, Release Version, Title Classification, Validation Notes, Workflow Step\n<|end|>\n<|user|>\ngroub by title classfn and get std of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Internal Notes, Job ID, Posting Type, Release Version, Workflow Step\n<|end|>\n<|user|>\nmax Job ID grpby PostingType\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Job ID, Level, Processing Time, Release Version, Session Token, System ID\n<|end|>\n<|user|>\ngroup by job id and get max of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Flagged Reason, Job ID, Posting Type, Run ID, Workflow Step\n<|end|>\n<|user|>\nmax Job ID grp posting type\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Job ID, Processing Time, Release Version, Timestamp Created, Title Classification\n<|end|>\n<|user|>\ngroub by classification and get mean of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Job ID, Last Modified By, Posting Type, Release Version, Session Token\n<|end|>\n<|user|>\norganize by posting and get median of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Batch Number, Flagged Reason, Level, Response Time (ms), Title Code No\n<|end|>\n<|user|>\nsplit by tcode and get std of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Job ID, Level, Processing Time, Request ID, Source File Name\n<|end|>\n<|user|>\nmean Level wise job identifier\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Level, Manual Override, Project Tag, Response Time (ms), Workflow Step\n<|end|>\n<|user|>\ngrup by biz title and get max of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Document Ref, Error Code, Level, Manual Override, Release Version, System ID\n<|end|>\n<|user|>\nsplit by biz title and get median of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Level, Release Version, Session Token, Source File Name, Title Code No\n<|end|>\n<|user|>\ncategorized by title_code and get std of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Job ID, Level, Project Tag, Release Version, System ID\n<|end|>\n<|user|>\ncount Level on the basis of job id\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Audit Trail, Job ID, Retry Count, Title Classification, Workflow Step\n<|end|>\n<|user|>\npartition by classification and get min of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Error Code, Release Version, Source File Name, Sync Status\n<|end|>\n<|user|>\ncategorized by agency and get std of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Document Ref, Request ID, Sync Status, Timestamp Created, Tracking Code\n<|end|>\n<|user|>\ncluster by agcy and get std of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Audit Trail, Backup ID, Manual Override, Retry Count\n<|end|>\n<|user|>\ngrup by agency and get mean of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Error Code, Level, Processing Time, Project Tag, Response Time (ms), Session Token\n<|end|>\n<|user|>\ncategorized by title and get std of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Document Ref, Flagged Reason, Run ID, Sync Status, Timestamp Created\n<|end|>\n<|user|>\ncategorized by AGENCY and get std of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Project Tag, Request ID, Retry Count, Run ID, Session Token, Title Classification\n<|end|>\n<|user|>\npartition by title class and get mean of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Job ID, Level, Processing Time, Retry Count, Session Token\n<|end|>\n<|user|>\nstd Level based on job id\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Last Modified By, Run ID, Source File Name, Sync Status, System ID\n<|end|>\n<|user|>\npartition by AGENCY and get min of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Job ID, Level, Manual Override, Sync Status, Tracking Code, Validation Notes\n<|end|>\n<|user|>\nstd Level by job identifier\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Business Title, Internal Notes, Level, Manual Override, Source File Name, Timestamp Created\n<|end|>\n<|user|>\nmax Level grp title of job\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Audit Trail, Batch Number, Manual Override, Release Version, System ID\n<|end|>\n<|user|>\ngroub by agcy and get min of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Level, Manual Override, Retry Count, Session Token, Workflow Step\n<|end|>\n<|user|>\npartition by title of job and get max of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Job ID, Processing Time, Session Token, System ID, Title Classification\n<|end|>\n<|user|>\ngroop by title classfn and get mean of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Job ID, Manual Override, Posting Type, Session Token, Validation Notes\n<|end|>\n<|user|>\ngroub by post type and get median of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Environment Name, Job ID, Last Modified By, Level, Manual Override\n<|end|>\n<|user|>\norganize by job id and get mean of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Job ID, Level, Origin System, Project Tag, Retry Count, Sync Status\n<|end|>\n<|user|>\nstd Level based on job id\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Document Ref, Origin System, Project Tag, Retry Count, System ID\n<|end|>\n<|user|>\nmax # Of Positions based on agency\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Job ID, Level, Manual Override, Origin System, Run ID, Sync Status\n<|end|>\n<|user|>\nsplit by Job Id and get mean of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Civil Service Title, Origin System, Session Token, Sync Status, Workflow Step\n<|end|>\n<|user|>\ncount # Of Positions grpby service title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Flagged Reason, Job ID, Posting Type, Sync Status, Timestamp Created\n<|end|>\n<|user|>\npartition by PostingType and get sum of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Job ID, Level, Processing Time, Run ID, Timestamp Created\n<|end|>\n<|user|>\ngroup by job identifier and get mean of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Job ID, Manual Override, Posting Type, Processing Time, Tracking Code, Workflow Step\n<|end|>\n<|user|>\nsplit by posting and get std of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Flagged Reason, Level, Processing Time, Session Token, Title Code No\n<|end|>\n<|user|>\npartition by tile code and get sum of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Backup ID, Request ID, Response Time (ms), Retry Count, Run ID\n<|end|>\n<|user|>\ni want to see it group organisation\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Posting Type, Response Time (ms), Retry Count, Session Token\n<|end|>\n<|user|>\ncan you grp type of post?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Business Title, Flagged Reason, Request ID, Retry Count, Reviewer Comments\n<|end|>\n<|user|>\ni want to see it by title of job\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Alert Triggered, Backup ID, Batch Number, Processing Time, Session Token\n<|end|>\n<|user|>\ngrpby organisation\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Business Title, Environment Name, Session Token, Source File Name\n<|end|>\n<|user|>\ni want to see it based on title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Document Ref, Origin System, Processing Time, Request ID, Sync Status\n<|end|>\n<|user|>\nshow data by AGENCY\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Posting Type, Release Version, Source File Name, Workflow Step\n<|end|>\n<|user|>\nshow data categorize by PostingType\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Business Title, Last Modified By, Manual Override, Timestamp Created, Validation Notes\n<|end|>\n<|user|>\ngrp biz title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Audit Trail, Batch Number, Flagged Reason, Request ID, Validation Notes\n<|end|>\n<|user|>\ncan you organize by AGENCY?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Civil Service Title, Project Tag, Release Version, Request ID, Response Time (ms)\n<|end|>\n<|user|>\ncategorize by cst\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Backup ID, Last Modified By, Manual Override, Processing Time, Timestamp Created\n<|end|>\n<|user|>\ncluster by Agency\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Error Code, Flagged Reason, Origin System, Tracking Code, Workflow Step\n<|end|>\n<|user|>\ni want to see it grp cst\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Flagged Reason, Manual Override, Retry Count, Session Token, Workflow Step\n<|end|>\n<|user|>\ni want to see it grpby biz title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Civil Service Title, Origin System, Processing Time, Retry Count\n<|end|>\n<|user|>\nbased on service title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Civil Service Title, Document Ref, Environment Name, Request ID, Tracking Code\n<|end|>\n<|user|>\ncan you cluster by govt title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Retry Count, Reviewer Comments, Sync Status, Title Code No\n<|end|>\n<|user|>\nshow data organize by title code no\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Project Tag, Request ID, Retry Count, Sync Status, Tracking Code\n<|end|>\n<|user|>\ncan you grouped by j o b i d?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Alert Triggered, Audit Trail, Error Code, Request ID, Timestamp Created\n<|end|>\n<|user|>\ngrouped by AGENCY\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Document Ref, Internal Notes, Release Version, Sync Status, Timestamp Created\n<|end|>\n<|user|>\ncan you split by agcy?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Error Code, Manual Override, Origin System, Response Time (ms), Run ID\n<|end|>\n<|user|>\nshow data by govt title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Last Modified By, Level, Retry Count, Reviewer Comments, Title Code No\n<|end|>\n<|user|>\nCould you group the data by title code and show the mean of Level?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Job ID, Last Modified By, Retry Count, Run ID, Title Classification\n<|end|>\n<|user|>\nI'd like to know the count of Job ID by title classification.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Civil Service Title, Internal Notes, Request ID, Response Time (ms), Validation Notes\n<|end|>\n<|user|>\nHow many # Of Positions values are there per civil title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Level, Release Version, Response Time (ms), Title Code No, Validation Notes\n<|end|>\n<|user|>\nWhich title code no has the highest Level std?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Civil Service Title, Error Code, Flagged Reason, Response Time (ms), Run ID\n<|end|>\n<|user|>\nCan you show me the max # Of Positions grouped by service title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Internal Notes, Project Tag, Run ID, Sync Status\n<|end|>\n<|user|>\nWhat\u2019s the min of # Of Positions in each AGENCY group?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Backup ID, Civil Service Title, Release Version, Retry Count, Run ID\n<|end|>\n<|user|>\nList count # Of Positions per civil service.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Internal Notes, Level, Response Time (ms), Source File Name, Title Code No, Tracking Code\n<|end|>\n<|user|>\nCan you show me the mean Level grouped by tile code?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Batch Number, Processing Time, Release Version, Reviewer Comments\n<|end|>\n<|user|>\nList sum # Of Positions per Agency.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Backup ID, Project Tag, Request ID, System ID, Workflow Step\n<|end|>\n<|user|>\nCould you group the data by Agency and show the count of # Of Positions?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Alert Triggered, Civil Service Title, Document Ref, Internal Notes, Processing Time, Reviewer Comments\n<|end|>\n<|user|>\nWhich service title has the highest # Of Positions std?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Business Title, Level, Manual Override, Project Tag, Run ID, Session Token\n<|end|>\n<|user|>\nI'd like to know the min of Level by business title.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Job ID, Last Modified By, Processing Time, System ID, Timestamp Created, Title Classification\n<|end|>\n<|user|>\nWhich title classfn has the highest Job ID count?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Level, Origin System, Project Tag, Source File Name, Validation Notes\n<|end|>\n<|user|>\nCould you group the data by biz title and show the count of Level?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Job ID, Level, Manual Override, Processing Time, Retry Count\n<|end|>\n<|user|>\nWhich j o b i d has the highest Level min?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Business Title, Environment Name, Level, Origin System, Response Time (ms), Workflow Step\n<|end|>\n<|user|>\nList std Level per official title.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Alert Triggered, Approval Status, Backup ID, Civil Service Title, Sync Status, Validation Notes\n<|end|>\n<|user|>\nGive me the std of # Of Positions for every cst.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Manual Override, Origin System, Retry Count, Session Token, Sync Status, Title Classification\n<|end|>\n<|user|>\nHow is Job ID distributed across title classfn?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Flagged Reason, Level, Manual Override, Release Version, Response Time (ms)\n<|end|>\n<|user|>\nWhich business title has the highest Level sum?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Job ID, Last Modified By, Request ID, Title Classification, Workflow Step\n<|end|>\n<|user|>\nCould you group the data by title class and show the sum of Job ID?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Job ID, Origin System, Reviewer Comments, Source File Name, Title Classification\n<|end|>\n<|user|>\nHow is Job ID distributed across title classfn?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Job ID, Level, Origin System, Run ID, Session Token, Workflow Step\n<|end|>\n<|user|>\nWhat\u2019s the count of Level in each j o b i d group?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Job ID, Origin System, Request ID, Session Token, System ID, Title Classification\n<|end|>\n<|user|>\nHow many Job ID values are there per title classification?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Civil Service Title, Environment Name, Error Code, Processing Time, Sync Status\n<|end|>\n<|user|>\nHow many # Of Positions values are there per civil title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Batch Number, Civil Service Title, Document Ref, Retry Count, Run ID, Sync Status\n<|end|>\n<|user|>\nCan you show me the min # Of Positions grouped by civil title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Job ID, Level, Manual Override, Project Tag, Run ID, Source File Name\n<|end|>\n<|user|>\ngroup job id and apply min on Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Flagged Reason, Job ID, Level, Request ID, Sync Status\n<|end|>\n<|user|>\ngroup JOB ID and apply count on Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Job ID, Level, Release Version, Response Time (ms), Run ID, Sync Status\n<|end|>\n<|user|>\ngroup job identifier and apply sum on Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Document Ref, Processing Time, Reviewer Comments, System ID\n<|end|>\n<|user|>\nagcy wise std of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Environment Name, Reviewer Comments, Run ID, Workflow Step\n<|end|>\n<|user|>\ngroup AGENCY and apply mean on # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Internal Notes, Manual Override, Origin System, Sync Status\n<|end|>\n<|user|>\ngroup the data by AGENCY and get sum of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Business Title, Environment Name, Error Code, Internal Notes, Level, Workflow Step\n<|end|>\n<|user|>\nmin Level per biz title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Environment Name, Error Code, Last Modified By, Level, Retry Count, Run ID\n<|end|>\n<|user|>\ngroup the data by biz title and get max of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Document Ref, Environment Name, Origin System, Response Time (ms), Retry Count\n<|end|>\n<|user|>\naggregate # Of Positions by civil title using max\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Alert Triggered, Archived Flag, Audit Trail, Civil Service Title, Internal Notes, System ID\n<|end|>\n<|user|>\ngroup civil title and apply median on # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Job ID, Last Modified By, Reviewer Comments, Sync Status, Title Classification\n<|end|>\n<|user|>\ncount Job ID per title class\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Level, Request ID, Run ID, Timestamp Created, Title Code No\n<|end|>\n<|user|>\ngroup title code no and apply median on Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Level, Origin System, Run ID, Title Code No, Tracking Code\n<|end|>\n<|user|>\ngroup the data by tcode and get count of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Level, Project Tag, Retry Count, Timestamp Created, Title Code No\n<|end|>\n<|user|>\ncount Level based on tile code\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Backup ID, Internal Notes, Request ID, Response Time (ms)\n<|end|>\n<|user|>\nsum # Of Positions by agency\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Job ID, Last Modified By, Level, Manual Override, Tracking Code, Workflow Step\n<|end|>\n<|user|>\nmedian Level by Job Id\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Business Title, Document Ref, Internal Notes, Level, Origin System\n<|end|>\n<|user|>\ncount Level per official title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Civil Service Title, Document Ref, Flagged Reason, Project Tag, Response Time (ms)\n<|end|>\n<|user|>\norganize by service title and get sum of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Release Version, Response Time (ms), Source File Name, Timestamp Created, Title Code No, Tracking Code\n<|end|>\n<|user|>\ncategorized by tile code and get mean of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Archived Flag, Batch Number, Internal Notes, Sync Status\n<|end|>\n<|user|>\nsplit by agcy and get min of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Level, Processing Time, Retry Count, Source File Name, Sync Status, Title Code No\n<|end|>\n<|user|>\nmin Level wise title code\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Flagged Reason, Manual Override, Retry Count, System ID, Validation Notes\n<|end|>\n<|user|>\ngroup by organisation and get max of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Business Title, Level, Manual Override, Processing Time, Response Time (ms)\n<|end|>\n<|user|>\nsum Level grpby title of job\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Job ID, Response Time (ms), Title Classification, Tracking Code\n<|end|>\n<|user|>\nmax Job ID per title classfn\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Error Code, Internal Notes, Level, Origin System, Project Tag, Retry Count\n<|end|>\n<|user|>\nsum Level grp biz title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Business Title, Last Modified By, Level, Release Version, Sync Status\n<|end|>\n<|user|>\norganize by title and get count of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Level, Manual Override, Processing Time, Request ID, Title Code No\n<|end|>\n<|user|>\nbucket by titlecode number and get median of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Business Title, Document Ref, Level, Run ID, Tracking Code\n<|end|>\n<|user|>\npartition by business title and get count of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Job ID, Level, Manual Override, Run ID, Sync Status\n<|end|>\n<|user|>\ncount Level by JOB ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Level, Origin System, Release Version, Sync Status, Title Code No, Validation Notes\n<|end|>\n<|user|>\nstd Level grpby tcode\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Project Tag, Release Version, Response Time (ms), Source File Name, Validation Notes\n<|end|>\n<|user|>\nmax # Of Positions based on service title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Internal Notes, Job ID, Processing Time, Sync Status, Title Classification\n<|end|>\n<|user|>\npartition by classification and get mean of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Job ID, Origin System, Project Tag, Timestamp Created, Title Classification, Validation Notes\n<|end|>\n<|user|>\ngroub by title classfn and get std of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Job ID, Last Modified By, Posting Type, Source File Name, Timestamp Created, Tracking Code\n<|end|>\n<|user|>\nmax Job ID grpby PostingType\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Environment Name, Job ID, Level, Response Time (ms)\n<|end|>\n<|user|>\ngroup by job id and get max of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Job ID, Manual Override, Posting Type, Run ID, Validation Notes\n<|end|>\n<|user|>\nmax Job ID grp posting type\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Job ID, Origin System, Run ID, System ID, Title Classification\n<|end|>\n<|user|>\ngroub by classification and get mean of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Document Ref, Job ID, Manual Override, Posting Type\n<|end|>\n<|user|>\norganize by posting and get median of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Level, Processing Time, Session Token, Title Code No, Tracking Code, Workflow Step\n<|end|>\n<|user|>\nsplit by tcode and get std of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Job ID, Level, Origin System, Request ID, Sync Status\n<|end|>\n<|user|>\nmean Level wise job identifier\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Business Title, Level, Release Version, Request ID, Response Time (ms)\n<|end|>\n<|user|>\ngrup by biz title and get max of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Business Title, Level, Origin System, Release Version, Response Time (ms), Retry Count\n<|end|>\n<|user|>\nsplit by biz title and get median of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Level, Retry Count, System ID, Title Code No, Tracking Code\n<|end|>\n<|user|>\ncategorized by title_code and get std of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Last Modified By, Level, Manual Override, Origin System, Project Tag, Validation Notes\n<|end|>\n<|user|>\ncount Level on the basis of job id\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Job ID, Processing Time, Project Tag, Response Time (ms), Title Classification\n<|end|>\n<|user|>\npartition by classification and get min of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Document Ref, Processing Time, Reviewer Comments, Workflow Step\n<|end|>\n<|user|>\ncategorized by agency and get std of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Backup ID, Internal Notes, Last Modified By, Release Version, Workflow Step\n<|end|>\n<|user|>\ncluster by agcy and get std of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Document Ref, Processing Time, Run ID, Workflow Step\n<|end|>\n<|user|>\ngrup by agency and get mean of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Business Title, Flagged Reason, Level, Release Version, Retry Count\n<|end|>\n<|user|>\ncategorized by title and get std of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Manual Override, Origin System, Tracking Code, Workflow Step\n<|end|>\n<|user|>\ncategorized by AGENCY and get std of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Flagged Reason, Internal Notes, Job ID, Retry Count, Title Classification, Workflow Step\n<|end|>\n<|user|>\npartition by title class and get mean of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Job ID, Level, Release Version, Request ID, System ID\n<|end|>\n<|user|>\nstd Level based on job id\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Error Code, Manual Override, Processing Time, Tracking Code\n<|end|>\n<|user|>\npartition by AGENCY and get min of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Job ID, Level, Retry Count, Reviewer Comments, System ID\n<|end|>\n<|user|>\nstd Level by job identifier\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Error Code, Level, Manual Override, Project Tag, Retry Count, Tracking Code\n<|end|>\n<|user|>\nmax Level grp title of job\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Batch Number, Origin System, Timestamp Created, Validation Notes\n<|end|>\n<|user|>\ngroub by agcy and get min of # Of Positions\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Document Ref, Internal Notes, Level, Manual Override, Run ID, Session Token\n<|end|>\n<|user|>\npartition by title of job and get max of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Job ID, Project Tag, Request ID, Source File Name, Sync Status, Title Classification\n<|end|>\n<|user|>\ngroop by title classfn and get mean of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Job ID, Last Modified By, Posting Type, Request ID, Run ID\n<|end|>\n<|user|>\ngroub by post type and get median of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('median').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Batch Number, Job ID, Level, Processing Time, Sync Status\n<|end|>\n<|user|>\norganize by job id and get mean of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Job ID, Level, Manual Override, Project Tag, Validation Notes\n<|end|>\n<|user|>\nstd Level based on job id\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Document Ref, Run ID, Timestamp Created, Validation Notes\n<|end|>\n<|user|>\nmax # Of Positions based on agency\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Job ID, Level, Origin System, Processing Time, Run ID, System ID\n<|end|>\n<|user|>\nsplit by Job Id and get mean of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Batch Number, Civil Service Title, Document Ref, Manual Override, Sync Status, Timestamp Created\n<|end|>\n<|user|>\ncount # Of Positions grpby service title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Flagged Reason, Job ID, Posting Type, System ID, Validation Notes\n<|end|>\n<|user|>\npartition by PostingType and get sum of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Environment Name, Job ID, Level, Session Token, Timestamp Created\n<|end|>\n<|user|>\ngroup by job identifier and get mean of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Job ID, Origin System, Posting Type, Processing Time, Retry Count, Source File Name\n<|end|>\n<|user|>\nsplit by posting and get std of Job ID\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Origin System, Source File Name, System ID, Title Code No, Validation Notes, Workflow Step\n<|end|>\n<|user|>\npartition by tile code and get sum of Level\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Alert Triggered, Archived Flag, Environment Name, Request ID, Response Time (ms)\n<|end|>\n<|user|>\ni want to see it group organisation\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Posting Type, Release Version, Response Time (ms), Timestamp Created\n<|end|>\n<|user|>\ncan you grp type of post?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Business Title, Document Ref, Manual Override, Reviewer Comments, Workflow Step\n<|end|>\n<|user|>\ni want to see it by title of job\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Batch Number, Flagged Reason, Manual Override, Retry Count, Validation Notes\n<|end|>\n<|user|>\ngrpby organisation\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Business Title, Error Code, Run ID, Sync Status, Workflow Step\n<|end|>\n<|user|>\ni want to see it based on title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Backup ID, Flagged Reason, Response Time (ms), Retry Count, Sync Status\n<|end|>\n<|user|>\nshow data by AGENCY\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Posting Type, Processing Time, Tracking Code, Workflow Step\n<|end|>\n<|user|>\nshow data categorize by PostingType\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Flagged Reason, Release Version, Run ID, Source File Name, Validation Notes\n<|end|>\n<|user|>\ngrp biz title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Alert Triggered, Document Ref, Project Tag, Source File Name, Timestamp Created\n<|end|>\n<|user|>\ncan you organize by AGENCY?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Response Time (ms), System ID, Timestamp Created, Tracking Code, Workflow Step\n<|end|>\n<|user|>\ncategorize by cst\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Backup ID, Internal Notes, Manual Override, System ID, Validation Notes\n<|end|>\n<|user|>\ncluster by Agency\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Environment Name, Manual Override, Processing Time, Request ID, Timestamp Created\n<|end|>\n<|user|>\ni want to see it grp cst\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Business Title, Document Ref, Project Tag, Timestamp Created\n<|end|>\n<|user|>\ni want to see it grpby biz title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Civil Service Title, Origin System, Run ID, Source File Name, Workflow Step\n<|end|>\n<|user|>\nbased on service title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Civil Service Title, Flagged Reason, Project Tag, Workflow Step\n<|end|>\n<|user|>\ncan you cluster by govt title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Flagged Reason, Release Version, Title Code No, Workflow Step\n<|end|>\n<|user|>\nshow data organize by title code no\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Job ID, Project Tag, Retry Count, Run ID, Session Token\n<|end|>\n<|user|>\ncan you grouped by j o b i d?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Approval Status, Audit Trail, Backup ID, Batch Number, Tracking Code\n<|end|>\n<|user|>\ngrouped by AGENCY\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Archived Flag, Project Tag, Release Version, Sync Status, Validation Notes\n<|end|>\n<|user|>\ncan you split by agcy?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Civil Service Title, Environment Name, Internal Notes, Processing Time, Sync Status\n<|end|>\n<|user|>\nshow data by govt title\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title').first().reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Level, Project Tag, Retry Count, Run ID, Title Code No\n<|end|>\n<|user|>\nCould you group the data by title code and show the mean of Level?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Job ID, Last Modified By, Manual Override, Run ID, Session Token, Title Classification\n<|end|>\n<|user|>\nI'd like to know the count of Job ID by title classification.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Civil Service Title, Request ID, Source File Name, Tracking Code, Workflow Step\n<|end|>\n<|user|>\nHow many # Of Positions values are there per civil title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Processing Time, Reviewer Comments, Sync Status, System ID, Timestamp Created, Title Code No\n<|end|>\n<|user|>\nWhich title code no has the highest Level std?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Last Modified By, Processing Time, Release Version, Response Time (ms), Source File Name\n<|end|>\n<|user|>\nCan you show me the max # Of Positions grouped by service title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Audit Trail, Backup ID, Flagged Reason, Last Modified By\n<|end|>\n<|user|>\nWhat\u2019s the min of # Of Positions in each AGENCY group?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Audit Trail, Civil Service Title, Document Ref, Release Version, Sync Status, Validation Notes\n<|end|>\n<|user|>\nList count # Of Positions per civil service.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Manual Override, Project Tag, Response Time (ms), Sync Status, Timestamp Created, Title Code No\n<|end|>\n<|user|>\nCan you show me the mean Level grouped by tile code?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Manual Override, Origin System, Release Version, Request ID, Session Token\n<|end|>\n<|user|>\nList sum # Of Positions per Agency.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Manual Override, Release Version, Session Token, Source File Name\n<|end|>\n<|user|>\nCould you group the data by Agency and show the count of # Of Positions?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Batch Number, Civil Service Title, Last Modified By, Manual Override, Reviewer Comments\n<|end|>\n<|user|>\nWhich service title has the highest # Of Positions std?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Business Title, Level, Processing Time, Project Tag, Response Time (ms), Run ID\n<|end|>\n<|user|>\nI'd like to know the min of Level by business title.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Error Code, Job ID, Manual Override, Origin System, Title Classification\n<|end|>\n<|user|>\nWhich title classfn has the highest Job ID count?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Business Title, Document Ref, Flagged Reason, Internal Notes, Level, Sync Status\n<|end|>\n<|user|>\nCould you group the data by biz title and show the count of Level?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Job ID, Level, Response Time (ms), Reviewer Comments, Run ID\n<|end|>\n<|user|>\nWhich j o b i d has the highest Level min?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Business Title, Flagged Reason, Level, Release Version, Request ID\n<|end|>\n<|user|>\nList std Level per official title.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Origin System, Release Version, Request ID, Response Time (ms)\n<|end|>\n<|user|>\nGive me the std of # Of Positions for every cst.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Job ID, Retry Count, Title Classification, Tracking Code, Validation Notes\n<|end|>\n<|user|>\nHow is Job ID distributed across title classfn?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Business Title, Document Ref, Environment Name, Level, Session Token\n<|end|>\n<|user|>\nWhich business title has the highest Level sum?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Job ID, Retry Count, Reviewer Comments, Source File Name, Sync Status, Title Classification\n<|end|>\n<|user|>\nCould you group the data by title class and show the sum of Job ID?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Job ID, Origin System, Project Tag, Sync Status, Title Classification\n<|end|>\n<|user|>\nHow is Job ID distributed across title classfn?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Job ID, Level, Release Version, Retry Count, Timestamp Created\n<|end|>\n<|user|>\nWhat\u2019s the count of Level in each j o b i d group?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Job ID, Project Tag, Session Token, Title Classification, Tracking Code\n<|end|>\n<|user|>\nHow many Job ID values are there per title classification?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Manual Override, Response Time (ms), Reviewer Comments, Source File Name, Tracking Code\n<|end|>\n<|user|>\nHow many # Of Positions values are there per civil title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Archived Flag, Civil Service Title, Environment Name, Timestamp Created, Validation Notes\n<|end|>\n<|user|>\nCan you show me the min # Of Positions grouped by civil title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('min').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Job ID, Last Modified By, Level, Processing Time, Workflow Step\n<|end|>\n<|user|>\nHow does the Level vary across job id?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Job ID, Reviewer Comments, Session Token, Source File Name, Timestamp Created, Title Classification\n<|end|>\n<|user|>\nShow the spread of Job ID by classification.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Alert Triggered, Civil Service Title, Last Modified By, Origin System, System ID, Validation Notes\n<|end|>\n<|user|>\nWhat\u2019s the variation in # Of Positions per civil title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Level, Origin System, Source File Name, Title Code No, Validation Notes\n<|end|>\n<|user|>\nTell me the spread of Level across different title code no.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Backup ID, Civil Service Title, Environment Name, Source File Name, Workflow Step\n<|end|>\n<|user|>\nWhat is the variability of # Of Positions grouped by civil service?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Internal Notes, Level, Manual Override, Retry Count, Timestamp Created, Title Code No\n<|end|>\n<|user|>\nWhat is the variability of Level grouped by title code?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Environment Name, Flagged Reason, Release Version, Sync Status\n<|end|>\n<|user|>\nWhat is the variability of # Of Positions grouped by service title?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Backup ID, Batch Number, Civil Service Title, Reviewer Comments, Source File Name\n<|end|>\n<|user|>\nTell me the spread of # Of Positions across different govt title.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Job ID, Origin System, Posting Type, Request ID, Source File Name\n<|end|>\n<|user|>\nCheck how Job ID changes across type of post.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Environment Name, Internal Notes, Manual Override, Release Version, Reviewer Comments\n<|end|>\n<|user|>\nWhat's the range of # Of Positions for each AGENCY?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Job ID, Level, Origin System, Release Version, Response Time (ms)\n<|end|>\n<|user|>\nGive the scattered values of Level by jobid.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Job ID, Posting Type, Project Tag, Release Version, Reviewer Comments, Sync Status\n<|end|>\n<|user|>\nHow is Job ID scattered over type of post?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Posting Type')['Job ID'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Document Ref, Level, Request ID, Session Token, Title Code No\n<|end|>\n<|user|>\nHow does the Level vary across title_code?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Level, Project Tag, Sync Status, Validation Notes, Workflow Step\n<|end|>\n<|user|>\nGive the scattered values of Level by title.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Job ID, Manual Override, Project Tag, Title Classification, Validation Notes\n<|end|>\n<|user|>\nHow does the Job ID vary across title classfn?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Level, Processing Time, Project Tag, Run ID, Title Code No\n<|end|>\n<|user|>\nWhat's the range of Level for each tcode?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Code No')['Level'].agg('max').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Document Ref, Internal Notes, Timestamp Created, Tracking Code\n<|end|>\n<|user|>\nWhat\u2019s the variation in # Of Positions per agcy?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Job ID, Session Token, Sync Status, Timestamp Created, Title Classification\n<|end|>\n<|user|>\nCheck how Job ID changes across title classfn.\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Environment Name, Flagged Reason, Manual Override, Release Version, Reviewer Comments\n<|end|>\n<|user|>\nWhat\u2019s the variation in # Of Positions per civil service?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Environment Name, Processing Time, Response Time (ms), Run ID\n<|end|>\n<|user|>\nCan you show the distribution of # Of Positions across agcy?\n<|end|>\n<|assistant|>\n", "completion": "df.groupby('Agency')['# Of Positions'].agg('count').reset_index()"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Processing Time, Project Tag, Session Token, Timestamp Created, customers, revenue\n<|end|>\n<|user|>\nShow customers in increasing order of revenue.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Document Ref, Internal Notes, Processing Time, employees, units_sold\n<|end|>\n<|user|>\nDisplay employees in order of decreasing units_sold.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Origin System, Reviewer Comments, Run ID, Tracking Code, employees, sales\n<|end|>\n<|user|>\nGet the highest sales values for each employees.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Manual Override, Reviewer Comments, Sync Status, rating, stores\n<|end|>\n<|user|>\nFind top 3 stores with highest rating.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Project Tag, Release Version, Reviewer Comments, Session Token, departments, sales\n<|end|>\n<|user|>\nGet the highest sales values for each departments.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Origin System, Reviewer Comments, Tracking Code, departments, units_sold\n<|end|>\n<|user|>\nFind top 3 departments with highest units_sold.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Backup ID, Internal Notes, Manual Override, revenue, stores\n<|end|>\n<|user|>\nList the lowest revenue values grouped by stores.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Project Tag, Release Version, Request ID, customers, profit\n<|end|>\n<|user|>\nShow customers in increasing order of profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Source File Name, Sync Status, Timestamp Created, Tracking Code, Workflow Step, departments, units_sold\n<|end|>\n<|user|>\nRank departments by units_sold.\n<|end|>\n<|assistant|>\n", "completion": "df['units_sold_rank'] = df['units_sold'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Error Code, Response Time (ms), Source File Name, profit, stores\n<|end|>\n<|user|>\nGet the highest profit values for each stores.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Error Code, Response Time (ms), Retry Count, employees, expenses\n<|end|>\n<|user|>\nRank employees by expenses.\n<|end|>\n<|assistant|>\n", "completion": "df['expenses_rank'] = df['expenses'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Retry Count, Sync Status, Timestamp Created, Workflow Step, customers, profit\n<|end|>\n<|user|>\nShow customers sorted by profit ascending.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Origin System, Request ID, Session Token, Source File Name, sales, stores\n<|end|>\n<|user|>\nShow stores sorted by sales ascending.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Origin System, Source File Name, Timestamp Created, expenses, stores\n<|end|>\n<|user|>\nRank stores by expenses.\n<|end|>\n<|assistant|>\n", "completion": "df['expenses_rank'] = df['expenses'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Last Modified By, Release Version, Request ID, expenses, stores\n<|end|>\n<|user|>\nDisplay stores in order of decreasing expenses.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Request ID, Reviewer Comments, Source File Name, Sync Status, Timestamp Created, sales, stores\n<|end|>\n<|user|>\nGet bottom 10 stores based on sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Origin System, Request ID, Response Time (ms), Workflow Step, customers, units_sold\n<|end|>\n<|user|>\nGet bottom 10 customers based on units_sold.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Processing Time, System ID, Timestamp Created, Tracking Code, products, profit\n<|end|>\n<|user|>\nRank products by profit.\n<|end|>\n<|assistant|>\n", "completion": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Environment Name, Internal Notes, Manual Override, customers, profit\n<|end|>\n<|user|>\nSort customers by profit in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Response Time (ms), Retry Count, Reviewer Comments, System ID, employees, profit\n<|end|>\n<|user|>\nList top 5 employees by profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Manual Override, Sync Status, System ID, Tracking Code, products, profit\n<|end|>\n<|user|>\nGet bottom 10 products based on profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Release Version, Source File Name, Validation Notes, departments, units_sold\n<|end|>\n<|user|>\nFind top 3 departments with highest units_sold.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Project Tag, Request ID, System ID, products, rating\n<|end|>\n<|user|>\nDisplay products in order of decreasing rating.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Flagged Reason, Processing Time, Tracking Code, rating, stores\n<|end|>\n<|user|>\nGet the highest rating values for each stores.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Internal Notes, Release Version, Run ID, Validation Notes, customers, sales\n<|end|>\n<|user|>\nShow customers in increasing order of sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Manual Override, Session Token, Workflow Step, products, revenue\n<|end|>\n<|user|>\nList the lowest revenue values grouped by products.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Origin System, Project Tag, Timestamp Created, employees, expenses\n<|end|>\n<|user|>\nFind top 3 employees with highest expenses.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Response Time (ms), Run ID, Workflow Step, sales, stores\n<|end|>\n<|user|>\nSort stores by sales in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Manual Override, Processing Time, System ID, revenue, stores\n<|end|>\n<|user|>\nSort stores by revenue in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Project Tag, Run ID, Source File Name, products, sales\n<|end|>\n<|user|>\nFind top 3 products with highest sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Project Tag, Retry Count, Session Token, products, rating\n<|end|>\n<|user|>\nRank products by rating.\n<|end|>\n<|assistant|>\n", "completion": "df['rating_rank'] = df['rating'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Error Code, Manual Override, Processing Time, Session Token, departments, profit\n<|end|>\n<|user|>\nRank departments by profit.\n<|end|>\n<|assistant|>\n", "completion": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Manual Override, Processing Time, Sync Status, Workflow Step, employees, units_sold\n<|end|>\n<|user|>\nGet bottom 10 employees based on units_sold.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Internal Notes, Processing Time, Workflow Step, customers, expenses\n<|end|>\n<|user|>\nDisplay customers in order of decreasing expenses.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Processing Time, Release Version, Reviewer Comments, Workflow Step, employees, revenue\n<|end|>\n<|user|>\nGet bottom 10 employees based on revenue.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Release Version, Timestamp Created, Validation Notes, customers, profit\n<|end|>\n<|user|>\nSort customers by profit in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Environment Name, Internal Notes, Processing Time, employees, profit\n<|end|>\n<|user|>\nList the lowest profit values grouped by employees.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Reviewer Comments, Source File Name, Timestamp Created, employees, revenue\n<|end|>\n<|user|>\nList the lowest revenue values grouped by employees.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Release Version, Response Time (ms), Tracking Code, Workflow Step, departments, profit\n<|end|>\n<|user|>\nShow departments in increasing order of profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Processing Time, Release Version, Reviewer Comments, products, profit\n<|end|>\n<|user|>\nFind top 3 products with highest profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Processing Time, Retry Count, Validation Notes, customers, revenue\n<|end|>\n<|user|>\nFind top 3 customers with highest revenue.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Internal Notes, Reviewer Comments, Tracking Code, rating, stores\n<|end|>\n<|user|>\nSort stores by rating in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Release Version, Response Time (ms), System ID, Timestamp Created, departments, expenses\n<|end|>\n<|user|>\nList the lowest expenses values grouped by departments.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Internal Notes, Reviewer Comments, Sync Status, departments, profit\n<|end|>\n<|user|>\nDisplay departments in order of decreasing profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Internal Notes, Retry Count, Reviewer Comments, employees, profit\n<|end|>\n<|user|>\nFind top 3 employees with highest profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Processing Time, Response Time (ms), Source File Name, Sync Status, products, revenue\n<|end|>\n<|user|>\nShow products in increasing order of revenue.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Backup ID, Batch Number, Retry Count, customers, rating\n<|end|>\n<|user|>\nDisplay customers in order of decreasing rating.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Project Tag, Release Version, Request ID, departments, expenses\n<|end|>\n<|user|>\nList the lowest expenses values grouped by departments.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Release Version, Run ID, Validation Notes, expenses, products\n<|end|>\n<|user|>\nFind top 3 products with highest expenses.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Origin System, Request ID, Retry Count, Run ID, departments, sales\n<|end|>\n<|user|>\nDisplay departments in order of decreasing sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Request ID, Reviewer Comments, Validation Notes, Workflow Step, products, units_sold\n<|end|>\n<|user|>\nList the lowest units_sold values grouped by products.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Release Version, Response Time (ms), Timestamp Created, departments, revenue\n<|end|>\n<|user|>\nShow departments in increasing order of revenue.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Flagged Reason, Project Tag, Timestamp Created, departments, revenue\n<|end|>\n<|user|>\nList the lowest revenue values grouped by departments.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Error Code, Request ID, System ID, customers, rating\n<|end|>\n<|user|>\nShow customers sorted by rating ascending.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Manual Override, Processing Time, Workflow Step, expenses, products\n<|end|>\n<|user|>\nGet bottom 10 products based on expenses.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Retry Count, Reviewer Comments, Workflow Step, departments, profit\n<|end|>\n<|user|>\nList top 5 departments by profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Response Time (ms), Session Token, Tracking Code, customers, rating\n<|end|>\n<|user|>\nList top 5 customers by rating.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Retry Count, Timestamp Created, Tracking Code, products, rating\n<|end|>\n<|user|>\nGet bottom 10 products based on rating.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Origin System, Processing Time, Release Version, revenue, stores\n<|end|>\n<|user|>\nRank stores by revenue.\n<|end|>\n<|assistant|>\n", "completion": "df['revenue_rank'] = df['revenue'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Manual Override, Origin System, Processing Time, employees, units_sold\n<|end|>\n<|user|>\nShow employees sorted by units_sold ascending.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Retry Count, Reviewer Comments, System ID, customers, units_sold\n<|end|>\n<|user|>\nRank customers by units_sold.\n<|end|>\n<|assistant|>\n", "completion": "df['units_sold_rank'] = df['units_sold'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Processing Time, Release Version, Response Time (ms), employees, rating\n<|end|>\n<|user|>\nFind top 3 employees with highest rating.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Release Version, System ID, Tracking Code, departments, expenses\n<|end|>\n<|user|>\nShow departments in increasing order of expenses.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Request ID, Sync Status, Tracking Code, products, profit\n<|end|>\n<|user|>\nRank products by profit.\n<|end|>\n<|assistant|>\n", "completion": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Origin System, Retry Count, Timestamp Created, employees, revenue\n<|end|>\n<|user|>\nSort employees by revenue in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Internal Notes, Request ID, Workflow Step, customers, rating\n<|end|>\n<|user|>\nDisplay customers in order of decreasing rating.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Last Modified By, Processing Time, Timestamp Created, sales, stores\n<|end|>\n<|user|>\nSort stores by sales in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Run ID, Sync Status, System ID, customers, sales\n<|end|>\n<|user|>\nFind top 3 customers with highest sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Release Version, Reviewer Comments, Source File Name, departments, expenses\n<|end|>\n<|user|>\nShow departments in increasing order of expenses.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Processing Time, Request ID, Tracking Code, customers, profit\n<|end|>\n<|user|>\nFind top 3 customers with highest profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Manual Override, Validation Notes, Workflow Step, expenses, products\n<|end|>\n<|user|>\nRank products by expenses.\n<|end|>\n<|assistant|>\n", "completion": "df['expenses_rank'] = df['expenses'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Processing Time, Project Tag, Response Time (ms), Run ID, sales, stores\n<|end|>\n<|user|>\nShow stores sorted by sales ascending.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Internal Notes, Processing Time, Request ID, customers, rating\n<|end|>\n<|user|>\nList the lowest rating values grouped by customers.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Manual Override, Source File Name, Workflow Step, employees, expenses\n<|end|>\n<|user|>\nList the lowest expenses values grouped by employees.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Reviewer Comments, Run ID, Validation Notes, expenses, stores\n<|end|>\n<|user|>\nSort stores by expenses in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Processing Time, Response Time (ms), Sync Status, sales, stores\n<|end|>\n<|user|>\nFind top 3 stores with highest sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Flagged Reason, System ID, products, sales\n<|end|>\n<|user|>\nGet bottom 10 products based on sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Retry Count, Sync Status, Workflow Step, sales, stores\n<|end|>\n<|user|>\nFind top 2 stores with highest sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(2)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Internal Notes, Project Tag, System ID, employees, units_sold\n<|end|>\n<|user|>\nSort employees by units_sold in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Retry Count, Reviewer Comments, Session Token, profit, stores\n<|end|>\n<|user|>\nGet bottom 10 stores based on profit.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Project Tag, Sync Status, Timestamp Created, customers, profit\n<|end|>\n<|user|>\nRank customers by profit.\n<|end|>\n<|assistant|>\n", "completion": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Last Modified By, Origin System, Timestamp Created, employees, profit\n<|end|>\n<|user|>\nList the lowest profit values grouped by employees.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Project Tag, Retry Count, Timestamp Created, stores, units_sold\n<|end|>\n<|user|>\nSort stores by units_sold in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Manual Override, Project Tag, Response Time (ms), Retry Count, departments, sales\n<|end|>\n<|user|>\nDisplay departments in order of decreasing sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Release Version, Response Time (ms), Retry Count, Validation Notes, employees, profit\n<|end|>\n<|user|>\nRank employees by profit.\n<|end|>\n<|assistant|>\n", "completion": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Project Tag, Response Time (ms), Session Token, Workflow Step, employees, rating\n<|end|>\n<|user|>\nShow employees in increasing order of rating.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Manual Override, Project Tag, Timestamp Created, Workflow Step, departments, units_sold\n<|end|>\n<|user|>\nSort departments by units_sold in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Document Ref, Manual Override, Project Tag, products, profit\n<|end|>\n<|user|>\nRank products by profit.\n<|end|>\n<|assistant|>\n", "completion": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Response Time (ms), Reviewer Comments, Source File Name, Tracking Code, employees, sales\n<|end|>\n<|user|>\nFind top 2 employees with highest sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(2)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Manual Override, System ID, Tracking Code, expenses, products\n<|end|>\n<|user|>\nShow products in increasing order of expenses.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Archived Flag, Reviewer Comments, Tracking Code, customers, sales\n<|end|>\n<|user|>\nShow customers sorted by sales ascending.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Backup ID, Project Tag, System ID, departments, revenue\n<|end|>\n<|user|>\nList top 5 departments by revenue.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Manual Override, Response Time (ms), Source File Name, customers, revenue\n<|end|>\n<|user|>\nGet bottom 10 customers based on revenue.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Session Token, Tracking Code, Validation Notes, customers, revenue\n<|end|>\n<|user|>\nSort customers by revenue in descending order.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Project Tag, Response Time (ms), Source File Name, Workflow Step, employees, revenue\n<|end|>\n<|user|>\nList the lowest revenue values grouped by employees.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, System ID, Timestamp Created, Tracking Code, employees, units_sold\n<|end|>\n<|user|>\nRank employees by units_sold.\n<|end|>\n<|assistant|>\n", "completion": "df['units_sold_rank'] = df['units_sold'].rank(ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Manual Override, Session Token, Source File Name, departments, revenue\n<|end|>\n<|user|>\nList top 5 departments by revenue.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Run ID, System ID, Workflow Step, customers, rating\n<|end|>\n<|user|>\nGet bottom 10 customers based on rating.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='rating', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Manual Override, Run ID, Sync Status, Tracking Code, expenses, products\n<|end|>\n<|user|>\nGet bottom 10 products based on expenses.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='expenses', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Manual Override, Reviewer Comments, System ID, employees, sales\n<|end|>\n<|user|>\nList top 5 employees by sales.\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Processing Time, Reviewer Comments, Validation Notes, customers, revenue\n<|end|>\n<|user|>\n10 customers with most revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Release Version, Retry Count, Tracking Code, Workflow Step, profit, stores\n<|end|>\n<|user|>\nstores sorted top by profit\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Internal Notes, Project Tag, Source File Name, Workflow Step, products, ratings\n<|end|>\n<|user|>\nshow top 20 products by ratings\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=True).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Flagged Reason, Origin System, Release Version, profit, stores\n<|end|>\n<|user|>\nlist 10 stores having low to high profit\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Environment Name, Release Version, Validation Notes, categories, orders\n<|end|>\n<|user|>\ncategories sorted least by orders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Response Time (ms), Timestamp Created, Workflow Step, customers, revenue\n<|end|>\n<|user|>\nget top 20 customers increasing revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Release Version, Reviewer Comments, Timestamp Created, Validation Notes, categories, orders\n<|end|>\n<|user|>\nlist 5 categories having decreasing orders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Project Tag, Release Version, Run ID, Timestamp Created, customers, revenue\n<|end|>\n<|user|>\nshow top 20 customers by revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Audit Trail, Batch Number, Run ID, profit, stores\n<|end|>\n<|user|>\nget top 10 stores bottom profit\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Project Tag, Source File Name, Workflow Step, products, ratings\n<|end|>\n<|user|>\norganize products by ratings (least)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Release Version, Run ID, Timestamp Created, employees, sales\n<|end|>\n<|user|>\nlist 20 employees having increasing sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Release Version, System ID, Validation Notes, categories, orders\n<|end|>\n<|user|>\nsort categories by orders in bottom order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Release Version, Request ID, Reviewer Comments, System ID, profit, stores\n<|end|>\n<|user|>\narrange all stores according to most profit\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Last Modified By, Reviewer Comments, Workflow Step, products, ratings\n<|end|>\n<|user|>\nget top 3 products greatest ratings\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Retry Count, Sync Status, Timestamp Created, customers, revenue\n<|end|>\n<|user|>\nget top 20 customers highest revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Source File Name, Timestamp Created, customers, revenue\n<|end|>\n<|user|>\ncustomers sorted most by revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Internal Notes, Retry Count, System ID, categories, orders\n<|end|>\n<|user|>\ncategories sorted bottom by orders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Release Version, Session Token, System ID, Tracking Code, employees, sales\n<|end|>\n<|user|>\nemployees sorted most by sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Retry Count, Session Token, Timestamp Created, Workflow Step, employees, units_sold\n<|end|>\n<|user|>\nemployees sorted low to high by units_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Flagged Reason, Last Modified By, Timestamp Created, products, ratings\n<|end|>\n<|user|>\nshow top 20 products by ratings\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Retry Count, Run ID, Session Token, Source File Name, employees, sales\n<|end|>\n<|user|>\n3 employees with greatest sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Manual Override, Processing Time, Tracking Code, customers, revenue\n<|end|>\n<|user|>\ncustomers sorted bottom by revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Release Version, Reviewer Comments, Sync Status, employees, sales\n<|end|>\n<|user|>\n5 employees with greatest sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Retry Count, Source File Name, employees, sales\n<|end|>\n<|user|>\nshow top 5 employees by sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Manual Override, Source File Name, Sync Status, products, ratings\n<|end|>\n<|user|>\norganize products by ratings (bottom)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Error Code, Session Token, Source File Name, categories, orders\n<|end|>\n<|user|>\ncategories sorted ascending by orders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Release Version, Response Time (ms), Retry Count, Reviewer Comments, categories, orders\n<|end|>\n<|user|>\ncategories sorted top by orders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Processing Time, Retry Count, System ID, employees, sales\n<|end|>\n<|user|>\nshow top 10 employees by sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Error Code, Last Modified By, Source File Name, customers, revenue\n<|end|>\n<|user|>\ncustomers sorted descending by revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Origin System, Project Tag, Timestamp Created, Tracking Code, customers, revenue\n<|end|>\n<|user|>\narrange all customers according to low to high revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Document Ref, Reviewer Comments, Validation Notes, categories, orders\n<|end|>\n<|user|>\nget top 10 categories bottom orders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Internal Notes, Run ID, System ID, profit, stores\n<|end|>\n<|user|>\norder stores based on profit (least)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Manual Override, Origin System, Retry Count, products, ratings\n<|end|>\n<|user|>\norder products based on ratings (greatest)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Processing Time, Session Token, System ID, Timestamp Created, employees, units_sold\n<|end|>\n<|user|>\n3 employees with least units_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Manual Override, Sync Status, Validation Notes, employees, units_sold\n<|end|>\n<|user|>\nget top 5 employees decreasing units_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Request ID, Reviewer Comments, Session Token, Validation Notes, profit, stores\n<|end|>\n<|user|>\norganize stores by profit (bottom)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Reviewer Comments, Sync Status, System ID, Tracking Code, profit, stores\n<|end|>\n<|user|>\nsort stores by profit in least order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Request ID, Reviewer Comments, Sync Status, profit, stores\n<|end|>\n<|user|>\narrange all stores according to high to low profit\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Run ID, Validation Notes, Workflow Step, employees, units_sold\n<|end|>\n<|user|>\norganize employees by units_sold (greatest)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Project Tag, Source File Name, Timestamp Created, Tracking Code, Workflow Step, categories, orders\n<|end|>\n<|user|>\nsort categories by orders in most order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Document Ref, Run ID, Validation Notes, employees, sales\n<|end|>\n<|user|>\nget top 5 employees top sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Retry Count, Run ID, Timestamp Created, products, ratings\n<|end|>\n<|user|>\norder products based on ratings (most)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Manual Override, Request ID, Session Token, products, ratings\n<|end|>\n<|user|>\norganize products by ratings (increasing)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Origin System, Request ID, Timestamp Created, categories, orders\n<|end|>\n<|user|>\norder categories based on orders (descending)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Environment Name, Processing Time, System ID, employees, sales\n<|end|>\n<|user|>\nlist 5 employees having least sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Retry Count, Sync Status, Tracking Code, employees, units_sold\n<|end|>\n<|user|>\narrange all employees according to decreasing units_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Processing Time, Project Tag, Source File Name, Sync Status, employees, sales\n<|end|>\n<|user|>\nget top 20 employees highest sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Internal Notes, Manual Override, Session Token, profit, stores\n<|end|>\n<|user|>\ndisplay 3 stores sorted by profit (ascending)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Document Ref, Project Tag, Request ID, customers, revenue\n<|end|>\n<|user|>\narrange all customers according to low to high revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Response Time (ms), Run ID, Sync Status, System ID, Timestamp Created, employees, sales\n<|end|>\n<|user|>\nemployees sorted least by sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Processing Time, Request ID, Reviewer Comments, customers, revenue\n<|end|>\n<|user|>\n10 customrs with most Revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Processing Time, Release Version, Response Time (ms), Sync Status, profit, stores\n<|end|>\n<|user|>\nSTORES sorted top by Profitt\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Release Version, Reviewer Comments, System ID, products, ratings\n<|end|>\n<|user|>\nshow top 20 PRODUCTS by RATINGS\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=True).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Request ID, Source File Name, System ID, profit, stores\n<|end|>\n<|user|>\nlist 10 Storez having low to high PROFIT\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Flagged Reason, Project Tag, Tracking Code, categories, orders\n<|end|>\n<|user|>\ncategores sorted least by ORDERS\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Origin System, Request ID, Reviewer Comments, Source File Name, customers, revenue\n<|end|>\n<|user|>\nget top 20 customrs increasing REVENUE\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Release Version, Reviewer Comments, Sync Status, categories, orders\n<|end|>\n<|user|>\nlist 5 categores having decreasing odders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Project Tag, Response Time (ms), Retry Count, customers, revenue\n<|end|>\n<|user|>\nshow top 20 customrs by REVENUE\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Retry Count, Reviewer Comments, Timestamp Created, Tracking Code, Workflow Step, profit, stores\n<|end|>\n<|user|>\nget top 10 Storez bottom proffit\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=True).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Last Modified By, Project Tag, Workflow Step, products, ratings\n<|end|>\n<|user|>\norganize productz by raatings (least)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Manual Override, Release Version, Retry Count, Run ID, employees, sales\n<|end|>\n<|user|>\nlist 20 empoyees having increasing sails\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Project Tag, Source File Name, Timestamp Created, categories, orders\n<|end|>\n<|user|>\nsort CategorieS by Orderz in bottom order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Retry Count, Run ID, Tracking Code, profit, stores\n<|end|>\n<|user|>\narrange all stoers according to most PROFIT\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Session Token, Source File Name, Tracking Code, products, ratings\n<|end|>\n<|user|>\nget top 3 PRODUCTS greatest RATINGS\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, System ID, Tracking Code, Validation Notes, Workflow Step, customers, revenue\n<|end|>\n<|user|>\nget top 20 custmers highest Revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Document Ref, Flagged Reason, Origin System, customers, revenue\n<|end|>\n<|user|>\nCustomerS sorted most by reveneu\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Project Tag, Retry Count, Tracking Code, categories, orders\n<|end|>\n<|user|>\nCategorieS sorted bottom by ORDERS\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Project Tag, Retry Count, Reviewer Comments, Tracking Code, employees, sales\n<|end|>\n<|user|>\nempoyees sorted most by Sells\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Origin System, Reviewer Comments, Source File Name, Workflow Step, employees, units_sold\n<|end|>\n<|user|>\nEMPLoyees sorted low to high by unit_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Manual Override, Processing Time, Session Token, products, ratings\n<|end|>\n<|user|>\nshow top 20 PRODUCTS by ratingz\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Last Modified By, Session Token, Workflow Step, employees, sales\n<|end|>\n<|user|>\n3 empoyees with greatest sails\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Reviewer Comments, Run ID, Source File Name, Validation Notes, customers, revenue\n<|end|>\n<|user|>\ncustomrs sorted bottom by Revenue\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Origin System, Source File Name, System ID, employees, sales\n<|end|>\n<|user|>\n5 empoyees with greatest SALES\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Audit Trail, Last Modified By, Processing Time, employees, sales\n<|end|>\n<|user|>\nshow top 5 EMPLoyees by SALES\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Internal Notes, Workflow Step, products, ratings\n<|end|>\n<|user|>\norganize PRODUCTS by RATINGS (bottom)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Manual Override, Release Version, Workflow Step, categories, orders\n<|end|>\n<|user|>\ncategores sorted ascending by odders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Manual Override, Processing Time, Reviewer Comments, Run ID, categories, orders\n<|end|>\n<|user|>\ncategoriess sorted top by ORDERS\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Manual Override, Tracking Code, Validation Notes, employees, sales\n<|end|>\n<|user|>\nshow top 10 empoyees by Sells\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=False).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Origin System, Processing Time, Project Tag, Reviewer Comments, customers, revenue\n<|end|>\n<|user|>\nCustomerS sorted descending by REVENUE\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Release Version, Source File Name, Tracking Code, customers, revenue\n<|end|>\n<|user|>\narrange all custmers according to low to high reveneu\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='revenue', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Reviewer Comments, Source File Name, System ID, categories, orders\n<|end|>\n<|user|>\nshow top eight categories by orders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True).head(8)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Release Version, Request ID, Timestamp Created, profit, stores\n<|end|>\n<|user|>\nlist two stores having most profit\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False).head(2)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Manual Override, Release Version, Source File Name, Tracking Code, employees, units_sold\n<|end|>\n<|user|>\nshow top two employees by units_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(2)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Retry Count, Sync Status, Timestamp Created, employees, units_sold\n<|end|>\n<|user|>\nthree employees with bottom units_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Response Time (ms), Reviewer Comments, Tracking Code, employees, units_sold\n<|end|>\n<|user|>\nlist three employees having greatest units_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Release Version, Retry Count, Reviewer Comments, Timestamp Created, employees, units_sold\n<|end|>\n<|user|>\ndisplay five employees sorted by units_sold (increasing)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Response Time (ms), Reviewer Comments, System ID, Timestamp Created, employees, units_sold\n<|end|>\n<|user|>\ndisplay fifty employees sorted by units_sold (increasing)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(50)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Origin System, Project Tag, Sync Status, Workflow Step, employees, units_sold\n<|end|>\n<|user|>\neight employees with smallest units_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(8)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Internal Notes, Last Modified By, Request ID, employees, sales\n<|end|>\n<|user|>\nlist four employees having least sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(4)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Internal Notes, System ID, Validation Notes, categories, orders\n<|end|>\n<|user|>\ndisplay nine categories sorted by orders (increasing)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=True).head(9)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Manual Override, Origin System, Retry Count, Run ID, products, ratings\n<|end|>\n<|user|>\ndisplay twenty products sorted by ratings (decreasing)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Document Ref, Run ID, Validation Notes, employees, sales\n<|end|>\n<|user|>\ndisplay six employees sorted by sales (bottom)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(6)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Error Code, Internal Notes, Timestamp Created, employees, units_sold\n<|end|>\n<|user|>\ndisplay thirty employees sorted by units_sold (increasing)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(30)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Manual Override, Run ID, Session Token, products, ratings\n<|end|>\n<|user|>\nfive products with low to high ratings\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=True).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Release Version, Reviewer Comments, Source File Name, Workflow Step, categories, orders\n<|end|>\n<|user|>\nget top seven categories most orders\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='orders', ascending=False).head(7)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Run ID, Session Token, employees, units_sold\n<|end|>\n<|user|>\nshow top twenty employees by units_sold\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Last Modified By, Run ID, Validation Notes, employees, units_sold\n<|end|>\n<|user|>\ndisplay fifty employees sorted by units_sold (bottom)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='units_sold', ascending=True).head(50)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Project Tag, Reviewer Comments, Run ID, Source File Name, employees, sales\n<|end|>\n<|user|>\nlist seven employees having ascending sales\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='sales', ascending=True).head(7)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Source File Name, Sync Status, System ID, products, ratings\n<|end|>\n<|user|>\nget top four products least ratings\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='ratings', ascending=True).head(4)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Request ID, Source File Name, Sync Status, Timestamp Created, profit, stores\n<|end|>\n<|user|>\nshow top six stores by profit\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='profit', ascending=False).head(6)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Manual Override, Posting Updated, Response Time (ms), Reviewer Comments, Source File Name, jobs\n<|end|>\n<|user|>\ndisplay six entries sorted by Posting Updated (highest)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Posting Updated', ascending=False).head(6)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Session Token, Timestamp Created, Title Classification, jobs\n<|end|>\n<|user|>\nsort jobs by Title Classification in low to high order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Title Classification', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Environment Name, Flagged Reason, Run ID, Title Classification, jobs\n<|end|>\n<|user|>\nlist three jobs with highest Title Classification\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Title Classification', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Division/Work Unit, Document Ref, Processing Time, Retry Count, System ID, jobs\n<|end|>\n<|user|>\narrange job entries according to highest Division/Work Unit\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Division/Work Unit', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Full-Time/Part-Time indicator, Project Tag, Response Time (ms), Timestamp Created, Workflow Step, jobs\n<|end|>\n<|user|>\narrange job entries according to decreasing Full-Time/Part-Time indicator\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Full-Time/Part-Time indicator', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Release Version, Residency Requirement, Reviewer Comments, System ID, jobs\n<|end|>\n<|user|>\ndisplay nine entries sorted by Residency Requirement (highest)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Residency Requirement', ascending=False).head(9)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Posting Date, Retry Count, Session Token, Timestamp Created, jobs\n<|end|>\n<|user|>\ndisplay five entries sorted by Posting Date (low to high)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Posting Date', ascending=True).head(5)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Post Until, Project Tag, Response Time (ms), Retry Count, Timestamp Created, jobs\n<|end|>\n<|user|>\norganize postings by Post Until descending\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Post Until', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Post Until, Processing Time, System ID, Tracking Code, Validation Notes, jobs\n<|end|>\n<|user|>\nsort jobs by Post Until in top order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Post Until', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Internal Notes, Salary Range To, System ID, Timestamp Created, jobs\n<|end|>\n<|user|>\norganize postings by Salary Range To increasing\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Salary Range To', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Division/Work Unit, Last Modified By, Run ID, Sync Status, Validation Notes, Workflow Step, jobs\n<|end|>\n<|user|>\ndisplay two entries sorted by Division/Work Unit (least)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Division/Work Unit', ascending=True).head(2)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Posting Date, Reviewer Comments, Session Token, System ID, jobs\n<|end|>\n<|user|>\ndisplay eight entries sorted by Posting Date (smallest)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Posting Date', ascending=True).head(8)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Error Code, Origin System, Project Tag, Salary Range From, jobs\n<|end|>\n<|user|>\nlist seven jobs with bottom Salary Range From\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Salary Range From', ascending=True).head(7)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Origin System, Posting Updated, Project Tag, Timestamp Created, jobs\n<|end|>\n<|user|>\ndisplay seven entries sorted by Posting Updated (descending)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Posting Updated', ascending=False).head(7)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Last Modified By, Preferred Skills, Project Tag, System ID, jobs\n<|end|>\n<|user|>\nthirty job postings with top Preferred Skills\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Preferred Skills', ascending=False).head(30)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Release Version, Response Time (ms), Salary Range From, Timestamp Created, jobs\n<|end|>\n<|user|>\nfour job postings with increasing Salary Range From\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Salary Range From', ascending=True).head(4)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Environment Name, Recruitment Contact, Session Token, Workflow Step, jobs\n<|end|>\n<|user|>\norganize postings by Recruitment Contact least\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Recruitment Contact', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Response Time (ms), Tracking Code, Validation Notes, Work Location 1, jobs\n<|end|>\n<|user|>\nlist four jobs with high to low Work Location 1\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Work Location 1', ascending=False).head(4)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Request ID, Retry Count, Salary Range From, Tracking Code, jobs\n<|end|>\n<|user|>\nsort jobs by Salary Range From in highest order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Salary Range From', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Minimum Qual Requirements, Origin System, Project Tag, Response Time (ms), Retry Count, jobs\n<|end|>\n<|user|>\nlist two jobs with most Minimum Qual Requirements\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Minimum Qual Requirements', ascending=False).head(2)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Job Category, Processing Time, Project Tag, Request ID, Response Time (ms), jobs\n<|end|>\n<|user|>\nnine job postings with increasing Job Category\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Job Category', ascending=True).head(9)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Document Ref, Project Tag, Session Token, To Apply, jobs\n<|end|>\n<|user|>\nsort jobs by To Apply in bottom order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='To Apply', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Project Tag, Recruitment Contact, Source File Name, Sync Status, jobs\n<|end|>\n<|user|>\nforty job postings with ascending Recruitment Contact\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Recruitment Contact', ascending=True).head(40)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Manual Override, Release Version, Source File Name, Title Classification, jobs\n<|end|>\n<|user|>\ndisplay seven entries sorted by Title Classification (greatest)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Title Classification', ascending=False).head(7)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Manual Override, Run ID, Title Code No, Tracking Code, jobs\n<|end|>\n<|user|>\norganize postings by Title Code No most\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Title Code No', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Document Ref, Error Code, Manual Override, Processing Time, Workflow Step, jobs\n<|end|>\n<|user|>\nshow top two jobs by Civil Service Title\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Civil Service Title', ascending=False).head(2)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Posting Date, Run ID, Timestamp Created, Workflow Step, jobs\n<|end|>\n<|user|>\norganize postings by Posting Date descending\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Posting Date', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Flagged Reason, Full-Time/Part-Time indicator, Reviewer Comments, Workflow Step, jobs\n<|end|>\n<|user|>\nlist ten jobs with top Full-Time/Part-Time indicator\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Full-Time/Part-Time indicator', ascending=False).head(10)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Residency Requirement, Retry Count, Reviewer Comments, System ID, Timestamp Created, jobs\n<|end|>\n<|user|>\ndisplay four entries sorted by Residency Requirement (descending)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Residency Requirement', ascending=False).head(4)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Origin System, Preferred Skills, Sync Status, Workflow Step, jobs\n<|end|>\n<|user|>\nshow top six jobs by Preferred Skills\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Preferred Skills', ascending=True).head(6)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Sync Status, Timestamp Created, Tracking Code, Work Location 1, jobs\n<|end|>\n<|user|>\ndisplay six entries sorted by Work Location 1 (most)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Work Location 1', ascending=False).head(6)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Backup ID, Flagged Reason, Processing Time, Salary Frequency, jobs\n<|end|>\n<|user|>\norder jobs based on Salary Frequency (ascending)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Salary Frequency', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Full-Time/Part-Time indicator, Last Modified By, Session Token, Sync Status, jobs\n<|end|>\n<|user|>\nshow top three jobs by Full-Time/Part-Time indicator\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Full-Time/Part-Time indicator', ascending=False).head(3)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Response Time (ms), Validation Notes, Work Location 1, Workflow Step, jobs\n<|end|>\n<|user|>\ntwenty job postings with ascending Work Location 1\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Work Location 1', ascending=True).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Manual Override, Retry Count, Salary Frequency, System ID, jobs\n<|end|>\n<|user|>\nsort jobs by Salary Frequency in increasing order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Salary Frequency', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Document Ref, Request ID, Salary Frequency, Session Token, jobs\n<|end|>\n<|user|>\nshow top forty jobs by Salary Frequency\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Salary Frequency', ascending=False).head(40)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Manual Override, Salary Range To, Sync Status, System ID, jobs\n<|end|>\n<|user|>\norder jobs based on Salary Range To (least)\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Salary Range To', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Job Category, Response Time (ms), Reviewer Comments, Tracking Code, jobs\n<|end|>\n<|user|>\narrange job entries according to descending Job Category\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Job Category', ascending=False)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Project Tag, Release Version, Salary Range To, Session Token, jobs\n<|end|>\n<|user|>\nsort jobs by Salary Range To in least order\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Salary Range To', ascending=True)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Batch Number, Document Ref, Job Description, Request ID, jobs\n<|end|>\n<|user|>\nshow top twenty jobs by Job Description\n<|end|>\n<|assistant|>\n", "completion": "df.sort_values(by='Job Description', ascending=False).head(20)"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Origin System, Processing Time, Session Token, Timestamp Created, email\n<|end|>\n<|user|>\nGet rows where email field has the substring 'Manager'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('Manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Retry Count, Reviewer Comments, Tracking Code, city\n<|end|>\n<|user|>\nFind all values in city that end with 'com'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Flagged Reason, Response Time (ms), Tracking Code, product_name\n<|end|>\n<|user|>\nList all records where product_name includes 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Flagged Reason, Reviewer Comments, customer_name\n<|end|>\n<|user|>\nGet rows where customer_name field has the substring 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Manual Override, Origin System, Retry Count, System ID, category\n<|end|>\n<|user|>\nFind all values in category that end with 'Manager'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.endswith('Manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Internal Notes, Release Version, Timestamp Created, product_name\n<|end|>\n<|user|>\nFilter rows where product_name contains 'Service' substring.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Internal Notes, Reviewer Comments, Source File Name, Workflow Step, customer_name\n<|end|>\n<|user|>\nFilter rows where customer_name contains 'Service' substring.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Retry Count, Reviewer Comments, Timestamp Created, city\n<|end|>\n<|user|>\nList all records where city includes 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, System ID, Timestamp Created, Tracking Code, city\n<|end|>\n<|user|>\nFilter rows where city contains 'Store' substring.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('Store', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Run ID, Source File Name, System ID, Workflow Step, category\n<|end|>\n<|user|>\nFind category values that contain 'Pro' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.contains('Pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Manual Override, Session Token, System ID, Timestamp Created, customer_name\n<|end|>\n<|user|>\nList records where customer_name begins with 'Inc'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.startswith('Inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Timestamp Created, Validation Notes, Workflow Step, department\n<|end|>\n<|user|>\nList all records where department includes 'Manager'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('Manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Environment Name, Flagged Reason, category\n<|end|>\n<|user|>\nGet rows where category field has the substring 'sales'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Response Time (ms), System ID, Workflow Step, department\n<|end|>\n<|user|>\nGet rows where department field has the substring 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Document Ref, Response Time (ms), Run ID, product_name\n<|end|>\n<|user|>\nGet rows where product_name field has the substring 'Inc'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('Inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Request ID, Reviewer Comments, Workflow Step, customer_name\n<|end|>\n<|user|>\nFind customer_name values that contain 'Manager' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('Manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Processing Time, Response Time (ms), Session Token, Source File Name, city\n<|end|>\n<|user|>\nList all records where city includes 'Store'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('Store', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Project Tag, Request ID, Run ID, email\n<|end|>\n<|user|>\nFilter rows where email contains 'North' substring.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('North', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Origin System, Project Tag, Source File Name, city\n<|end|>\n<|user|>\nList records where city begins with 'Manager'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.startswith('Manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Response Time (ms), Retry Count, Sync Status, Tracking Code, city\n<|end|>\n<|user|>\nList records where city begins with 'com'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.startswith('com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Project Tag, Response Time (ms), System ID, city\n<|end|>\n<|user|>\nGet rows where city field has the substring 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Environment Name, Flagged Reason, Retry Count, customer_name\n<|end|>\n<|user|>\nFind customer_name values that contain 'Inc' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('Inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Release Version, Sync Status, Timestamp Created, Tracking Code, city\n<|end|>\n<|user|>\nList all records where city includes 'Inc'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('Inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Request ID, Response Time (ms), Run ID, department\n<|end|>\n<|user|>\nList records where department begins with 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.startswith('New', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Processing Time, Run ID, Timestamp Created, Workflow Step, customer_name\n<|end|>\n<|user|>\nList all records where customer_name includes 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Processing Time, Retry Count, System ID, department\n<|end|>\n<|user|>\nFind department values that contain 'Store' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('Store', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Environment Name, Tracking Code, Validation Notes, category\n<|end|>\n<|user|>\nList records where category begins with 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Run ID, System ID, Timestamp Created, customer_name\n<|end|>\n<|user|>\nGet rows where customer_name starts with 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Release Version, System ID, Workflow Step, city\n<|end|>\n<|user|>\nList all records where city includes 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('New', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Last Modified By, Manual Override, Validation Notes, Workflow Step, product_name\n<|end|>\n<|user|>\nFind product_name values that contain 'North' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('North', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Release Version, Retry Count, Reviewer Comments, Workflow Step, city\n<|end|>\n<|user|>\nShow entries where city ends with 'Pro'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('Pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Project Tag, Release Version, Source File Name, category\n<|end|>\n<|user|>\nFind all category that contain the word 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Error Code, Origin System, Run ID, department\n<|end|>\n<|user|>\nShow entries where department ends with 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('Service', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Origin System, Retry Count, Sync Status, product_name\n<|end|>\n<|user|>\nGet rows where product_name starts with 'Store'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('Store', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Error Code, Run ID, Workflow Step, email\n<|end|>\n<|user|>\nFind email values that contain 'Service' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Reviewer Comments, Source File Name, Validation Notes, city\n<|end|>\n<|user|>\nGet rows where city field has the substring 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('New', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Internal Notes, Origin System, Response Time (ms), city\n<|end|>\n<|user|>\nFind all city that contain the word 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Flagged Reason, Release Version, Session Token, product_name\n<|end|>\n<|user|>\nGet rows where product_name starts with 'Manager'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('Manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Retry Count, Reviewer Comments, Source File Name, Timestamp Created, product_name\n<|end|>\n<|user|>\nGet rows where product_name field has the substring 'Store'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('Store', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Reviewer Comments, Run ID, Tracking Code, customer_name\n<|end|>\n<|user|>\nFind all customer_name that contain the word 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('New', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Origin System, Project Tag, Validation Notes, city\n<|end|>\n<|user|>\nFind all values in city that end with 'Inc'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('Inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Document Ref, Error Code, Origin System, product_name\n<|end|>\n<|user|>\nList all records where product_name includes 'North'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('North', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Origin System, Run ID, Timestamp Created, Validation Notes, category\n<|end|>\n<|user|>\nFind all entries with category matching 'Store' exactly.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'] == 'Store']"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Internal Notes, Response Time (ms), Sync Status, customer_name\n<|end|>\n<|user|>\nFind all values in customer_name that end with 'North'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.endswith('North', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Release Version, Session Token, Sync Status, System ID, Tracking Code, email\n<|end|>\n<|user|>\nFind all entries with email matching 'Service' exactly.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'] == 'Service']"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Processing Time, Project Tag, Sync Status, Tracking Code, category\n<|end|>\n<|user|>\nFind category values that contain 'Manager' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.contains('Manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Internal Notes, Release Version, Run ID, Workflow Step, category\n<|end|>\n<|user|>\nFind category values that contain 'Store' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.contains('Store', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Request ID, Retry Count, Timestamp Created, Validation Notes, category\n<|end|>\n<|user|>\nFind all category that contain the word 'Inc'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.contains('Inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Processing Time, Project Tag, Session Token, Validation Notes, department\n<|end|>\n<|user|>\nList all records where department includes 'sales'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Project Tag, Retry Count, Session Token, department\n<|end|>\n<|user|>\nFind department values that contain 'Inc' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('Inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Project Tag, Tracking Code, Validation Notes, Workflow Step, customer_name\n<|end|>\n<|user|>\nShow entries where customer_name ends with 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.endswith('New', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Response Time (ms), Retry Count, Sync Status, product_name\n<|end|>\n<|user|>\nList records where product_name begins with 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('New', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Environment Name, Tracking Code, Validation Notes, email\n<|end|>\n<|user|>\nFind all email that contain the word 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Last Modified By, Processing Time, Session Token, Validation Notes, email\n<|end|>\n<|user|>\nFind all values in email that end with 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.endswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Last Modified By, Tracking Code, Validation Notes, customer_name\n<|end|>\n<|user|>\nFind all customer_name that contain the word 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Last Modified By, Source File Name, Validation Notes, department\n<|end|>\n<|user|>\nFind department values that contain 'Service' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Session Token, Tracking Code, Validation Notes, department\n<|end|>\n<|user|>\nGet rows where department starts with 'sales'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.startswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Internal Notes, Request ID, Response Time (ms), department\n<|end|>\n<|user|>\nFind department values that contain 'Store' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('Store', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Project Tag, Validation Notes, Workflow Step, email\n<|end|>\n<|user|>\nList all records where email includes 'Inc'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('Inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Session Token, System ID, Timestamp Created, customer_name\n<|end|>\n<|user|>\nList records where customer_name begins with 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.startswith('New', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Error Code, Manual Override, Origin System, System ID, customer_name\n<|end|>\n<|user|>\nFind customer_name values that contain 'Inc' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('Inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Last Modified By, Source File Name, Workflow Step, customer_name\n<|end|>\n<|user|>\nFind all customer_name that contain the word 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Manual Override, Origin System, Project Tag, Run ID, department\n<|end|>\n<|user|>\nFind all values in department that end with 'Store'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('Store', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Request ID, Source File Name, Workflow Step, email\n<|end|>\n<|user|>\nFind email values that contain 'Inc' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('Inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Last Modified By, Release Version, Response Time (ms), Retry Count, department\n<|end|>\n<|user|>\nGet rows where department field has the substring 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Flagged Reason, Project Tag, Session Token, city\n<|end|>\n<|user|>\nFind all entries with city matching 'North' exactly.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'] == 'North']"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Processing Time, System ID, Workflow Step, email\n<|end|>\n<|user|>\nList records where email begins with 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.startswith('Service', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Internal Notes, Last Modified By, Release Version, Timestamp Created, category\n<|end|>\n<|user|>\nGet rows where category starts with 'Pro'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.startswith('Pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Request ID, Sync Status, Validation Notes, Workflow Step, department\n<|end|>\n<|user|>\nFind all entries with department matching 'com' exactly.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'] == 'com']"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Manual Override, Origin System, Retry Count, Sync Status, city\n<|end|>\n<|user|>\nFind all values in city that end with 'Pro'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('Pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Origin System, Response Time (ms), Workflow Step, customer_name\n<|end|>\n<|user|>\nGet rows where customer_name starts with 'Store'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.startswith('Store', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Project Tag, Request ID, Response Time (ms), Reviewer Comments, product_name\n<|end|>\n<|user|>\nFind all values in product_name that end with 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Run ID, Sync Status, Tracking Code, product_name\n<|end|>\n<|user|>\nFind all values in product_name that end with 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('New', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Last Modified By, Manual Override, Release Version, category\n<|end|>\n<|user|>\nGet rows where category field has the substring 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Retry Count, Run ID, Session Token, System ID, Validation Notes, customer_name\n<|end|>\n<|user|>\nFind customer_name values that contain 'Store' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('Store', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Project Tag, Run ID, Validation Notes, department\n<|end|>\n<|user|>\nFind all entries with department matching 'Service' exactly.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'] == 'Service']"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Reviewer Comments, Sync Status, Timestamp Created, email\n<|end|>\n<|user|>\nGet rows where email starts with 'com'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.startswith('com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Environment Name, Manual Override, Timestamp Created, city\n<|end|>\n<|user|>\nFind all entries with city matching 'com' exactly.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'] == 'com']"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Processing Time, Reviewer Comments, Run ID, Validation Notes, customer_name\n<|end|>\n<|user|>\nGet rows where customer_name starts with 'com'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.startswith('com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Release Version, Retry Count, Source File Name, department\n<|end|>\n<|user|>\nFind all entries with department matching 'Service' exactly.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'] == 'Service']"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Release Version, Retry Count, Sync Status, department\n<|end|>\n<|user|>\nFind department values that contain 'Manager' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('Manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Backup ID, Retry Count, Source File Name, product_name\n<|end|>\n<|user|>\nList records where product_name begins with 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('Service', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Reviewer Comments, Run ID, System ID, city\n<|end|>\n<|user|>\nGet rows where city starts with 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Response Time (ms), Tracking Code, Validation Notes, product_name\n<|end|>\n<|user|>\nFilter rows where product_name contains 'Manager' substring.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('Manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Response Time (ms), Session Token, System ID, product_name\n<|end|>\n<|user|>\nList records where product_name begins with 'North'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('North', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Last Modified By, Timestamp Created, Workflow Step, email\n<|end|>\n<|user|>\nGet rows where email field has the substring 'Pro'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('Pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Manual Override, Release Version, System ID, category\n<|end|>\n<|user|>\nList all records where category includes 'com'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.contains('com', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Response Time (ms), Run ID, Session Token, email\n<|end|>\n<|user|>\nFind all values in email that end with 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.endswith('Service', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Source File Name, System ID, Timestamp Created, Tracking Code, customer_name\n<|end|>\n<|user|>\nFind all customer_name that contain the word 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Processing Time, Response Time (ms), System ID, Tracking Code, customer_name\n<|end|>\n<|user|>\nList records where customer_name begins with 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['customer_name'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Manual Override, Release Version, Source File Name, department\n<|end|>\n<|user|>\nGet rows where department field has the substring 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Flagged Reason, Origin System, Request ID, product_name\n<|end|>\n<|user|>\nGet rows where product_name starts with 'Store'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('Store', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Error Code, Request ID, Response Time (ms), department\n<|end|>\n<|user|>\nList all records where department includes 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('New', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Processing Time, Reviewer Comments, Run ID, Tracking Code, category\n<|end|>\n<|user|>\nFind category values that contain 'Pro' case-insensitively.\n<|end|>\n<|assistant|>\n", "completion": "df[df['category'].str.contains('Pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Session Token, Tracking Code, Validation Notes, email\n<|end|>\n<|user|>\nList records where email begins with 'Inc'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.startswith('Inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Processing Time, Tracking Code, Validation Notes, product_name\n<|end|>\n<|user|>\nList all records where product_name includes 'Service'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('Service', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Project Tag, Retry Count, Timestamp Created, department\n<|end|>\n<|user|>\nGet rows where department starts with 'New'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.startswith('New', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Processing Time, Project Tag, Reviewer Comments, Session Token, department\n<|end|>\n<|user|>\nGet rows where department field has the substring 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Flagged Reason, Manual Override, Validation Notes, department\n<|end|>\n<|user|>\nList records where department begins with 'tech'.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Project Tag, Release Version, Timestamp Created, email\n<|end|>\n<|user|>\nFind all entries with email matching 'Service' exactly.\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'] == 'Service']"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Internal Notes, Last Modified By, Reviewer Comments, company_name\n<|end|>\n<|user|>\nfind company_name ending in Sales\n<|end|>\n<|assistant|>\n", "completion": "df[df['company_name'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Sync Status, System ID, Timestamp Created, email\n<|end|>\n<|user|>\nfind email ending in salez\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Manual Override, Request ID, Retry Count, department\n<|end|>\n<|user|>\ndepartment has 'managr' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Flagged Reason, Processing Time, Release Version, product_name\n<|end|>\n<|user|>\nproduct_name has word salez\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Manual Override, Reviewer Comments, Sync Status, Timestamp Created, city\n<|end|>\n<|user|>\ncity has 'Manager' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Origin System, Session Token, Validation Notes, product_name\n<|end|>\n<|user|>\nget records with product_name beginning as Tech\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Retry Count, Source File Name, Tracking Code, product_name\n<|end|>\n<|user|>\nget values with product_name trailing with dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Processing Time, Retry Count, Session Token, Validation Notes, email\n<|end|>\n<|user|>\nfind rows where email includes 'Manager'\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Request ID, Session Token, Sync Status, email\n<|end|>\n<|user|>\nemail has word mngr\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Internal Notes, Manual Override, Release Version, Tracking Code, job_title\n<|end|>\n<|user|>\nget records with job_title beginning as mngr\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.startswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Run ID, Sync Status, Tracking Code, city\n<|end|>\n<|user|>\nshow rows where city starts with dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.startswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Manual Override, Sync Status, Tracking Code, product_name\n<|end|>\n<|user|>\nproduct_name field holds value support\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('support', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Error Code, Retry Count, Timestamp Created, Tracking Code, city\n<|end|>\n<|user|>\ncity has word hiringg\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Sync Status, System ID, Validation Notes, email\n<|end|>\n<|user|>\nfind email ending in dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Response Time (ms), Retry Count, Workflow Step, product_name\n<|end|>\n<|user|>\nget values with product_name trailing with Pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Release Version, Sync Status, Workflow Step, job_title\n<|end|>\n<|user|>\nget values with job_title trailing with inc.\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.endswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Release Version, Session Token, Sync Status, System ID, Timestamp Created, email\n<|end|>\n<|user|>\nfind rows where email includes 'manager'\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Origin System, Processing Time, Tracking Code, job_title\n<|end|>\n<|user|>\nget records with job_title beginning as pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.startswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Response Time (ms), Session Token, Validation Notes, product_name\n<|end|>\n<|user|>\nfind product_name ending in Manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Processing Time, Project Tag, Release Version, department\n<|end|>\n<|user|>\nfind department ending in support\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Project Tag, Release Version, Reviewer Comments, Tracking Code, department\n<|end|>\n<|user|>\nlist where department ends with INC\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Run ID, Source File Name, System ID, Workflow Step, city\n<|end|>\n<|user|>\nshow rows where city starts with sup\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.startswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Last Modified By, Processing Time, Timestamp Created, job_title\n<|end|>\n<|user|>\njob_title has word managr\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Document Ref, Retry Count, Sync Status, city\n<|end|>\n<|user|>\nlist where city ends with hiringg\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Run ID, Sync Status, Timestamp Created, department\n<|end|>\n<|user|>\ndepartment field begins with dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.startswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Manual Override, Source File Name, Tracking Code, Validation Notes, city\n<|end|>\n<|user|>\nfind city ending in Manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Processing Time, System ID, Timestamp Created, job_title\n<|end|>\n<|user|>\njob_title field begins with Pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.startswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Origin System, Project Tag, Sync Status, Workflow Step, department\n<|end|>\n<|user|>\nfind department ending in managr\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Manual Override, Reviewer Comments, Validation Notes, email\n<|end|>\n<|user|>\nget values with email trailing with manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Batch Number, Environment Name, Error Code, company_name\n<|end|>\n<|user|>\nlist where company_name ends with .COM\n<|end|>\n<|assistant|>\n", "completion": "df[df['company_name'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Origin System, Release Version, Tracking Code, city\n<|end|>\n<|user|>\nfind rows where city includes 'Sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Backup ID, Error Code, Tracking Code, city\n<|end|>\n<|user|>\nfind city ending in support\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Release Version, Response Time (ms), Retry Count, Source File Name, department\n<|end|>\n<|user|>\nlist where department ends with Hiring\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Document Ref, Error Code, Validation Notes, department\n<|end|>\n<|user|>\nshow all department with tech in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Request ID, Validation Notes, Workflow Step, product_name\n<|end|>\n<|user|>\nfind rows where product_name includes 'TECH'\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Internal Notes, Retry Count, Validation Notes, job_title\n<|end|>\n<|user|>\njob_title has 'mngr' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Run ID, Sync Status, Validation Notes, product_name\n<|end|>\n<|user|>\nproduct_name has word INC\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Run ID, Sync Status, Validation Notes, email\n<|end|>\n<|user|>\nshow rows where email starts with sales\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.startswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Flagged Reason, Retry Count, Workflow Step, product_name\n<|end|>\n<|user|>\nget records with product_name beginning as TECH\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Manual Override, Project Tag, Reviewer Comments, department\n<|end|>\n<|user|>\nfind department ending in Manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Origin System, Reviewer Comments, Session Token, System ID, email\n<|end|>\n<|user|>\nget records with email beginning as Support\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.startswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Internal Notes, Manual Override, Source File Name, job_title\n<|end|>\n<|user|>\njob_title has 'hire' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Retry Count, Validation Notes, Workflow Step, company_name\n<|end|>\n<|user|>\ncompany_name field holds value Sales\n<|end|>\n<|assistant|>\n", "completion": "df[df['company_name'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Response Time (ms), Reviewer Comments, Tracking Code, Workflow Step, department\n<|end|>\n<|user|>\nshow rows where department starts with pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.startswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Request ID, Sync Status, Timestamp Created, department\n<|end|>\n<|user|>\ndepartment has word inc.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Origin System, Response Time (ms), Validation Notes, email\n<|end|>\n<|user|>\nshow rows where email starts with INC\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.startswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Processing Time, Timestamp Created, Workflow Step, product_name\n<|end|>\n<|user|>\nget values with product_name trailing with dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Flagged Reason, Response Time (ms), Sync Status, product_name\n<|end|>\n<|user|>\nfind product_name ending in Support\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Origin System, Project Tag, Release Version, Workflow Step, product_name\n<|end|>\n<|user|>\nproduct_name field begins with TECH\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Environment Name, Project Tag, Retry Count, department\n<|end|>\n<|user|>\nget entries if department contains .com\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('.com', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Last Modified By, Manual Override, Source File Name, product_name\n<|end|>\n<|user|>\nget rows where product_name does not contain 'suport'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['product_name'].str.contains('suport', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Last Modified By, Reviewer Comments, Timestamp Created, company_name\n<|end|>\n<|user|>\nget rows where company_name does not contain '.COM'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['company_name'].str.contains('.COM', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Last Modified By, Session Token, Validation Notes, email\n<|end|>\n<|user|>\nfind email having 'tech' and company_name with 'hiringg'\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Project Tag, System ID, Tracking Code, product_name\n<|end|>\n<|user|>\nget rows where product_name does not contain 'tek'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['product_name'].str.contains('tek', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Release Version, Retry Count, Tracking Code, department\n<|end|>\n<|user|>\nfind department having 'support' and job_title with 'inc.'\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Processing Time, Project Tag, Request ID, Timestamp Created, company_name\n<|end|>\n<|user|>\nget rows where company_name does not contain 'hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['company_name'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Request ID, Run ID, Sync Status, Timestamp Created, company_name\n<|end|>\n<|user|>\nfind company_name having 'salez' and product_name with 'managr'\n<|end|>\n<|assistant|>\n", "completion": "df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Manual Override, Reviewer Comments, System ID, Tracking Code, department\n<|end|>\n<|user|>\nfind department having 'salez' and email with 'sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Project Tag, Release Version, Validation Notes, product_name\n<|end|>\n<|user|>\nget rows where product_name does not contain 'Sales'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['product_name'].str.contains('Sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Processing Time, Release Version, Request ID, email\n<|end|>\n<|user|>\nget rows where email does not contain 'support'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['email'].str.contains('support', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Origin System, Request ID, System ID, department\n<|end|>\n<|user|>\nlist records where department has 'dotcom' or company_name has 'dotcom'\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Request ID, Run ID, System ID, department\n<|end|>\n<|user|>\nget rows where department does not contain 'inc.'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['department'].str.contains('inc.', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Processing Time, Release Version, Source File Name, Validation Notes, job_title\n<|end|>\n<|user|>\nfind job_title having 'managr' and city with '.com'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Sync Status, System ID, Timestamp Created, Validation Notes, department\n<|end|>\n<|user|>\nget rows where department does not contain 'tek'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['department'].str.contains('tek', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Error Code, Origin System, System ID, department\n<|end|>\n<|user|>\nget rows where department does not contain 'hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['department'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Origin System, Reviewer Comments, Source File Name, product_name\n<|end|>\n<|user|>\nget rows where product_name does not contain 'PRo'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['product_name'].str.contains('PRo', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Manual Override, Response Time (ms), Reviewer Comments, Sync Status, city\n<|end|>\n<|user|>\nfind city having 'dotcom' and product_name with 'pr0'\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Release Version, Run ID, Sync Status, product_name\n<|end|>\n<|user|>\nlist records where product_name has 'Tech' or job_title has 'PRo'\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Project Tag, Retry Count, Tracking Code, department\n<|end|>\n<|user|>\nlist records where department has '.com' or job_title has 'hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Document Ref, Flagged Reason, Tracking Code, job_title\n<|end|>\n<|user|>\nlist records where job_title has 'sup' or product_name has '.com'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Project Tag, Request ID, Run ID, product_name\n<|end|>\n<|user|>\nlist records where product_name has 'support' or job_title has 'Sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Processing Time, Project Tag, Source File Name, email\n<|end|>\n<|user|>\nfind email having 'salez' and job_title with 'dotcom'\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Response Time (ms), Session Token, Workflow Step, job_title\n<|end|>\n<|user|>\nfind job_title having 'mngr' and company_name with 'hiringg'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Sync Status, System ID, Tracking Code, Validation Notes, job_title\n<|end|>\n<|user|>\nlist records where job_title has 'sales' or product_name has 'ink'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Response Time (ms), Run ID, Session Token, job_title\n<|end|>\n<|user|>\nlist records where job_title has '.COM' or email has 'pro'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Release Version, Salary Range To, Tracking Code, Validation Notes\n<|end|>\n<|user|>\nlist entries where Salary Range To has 'inc' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Civil Service Title, Origin System, Response Time (ms), Session Token, Validation Notes\n<|end|>\n<|user|>\nshow rows where Civil Service Title finishes with salez\n<|end|>\n<|assistant|>\n", "completion": "df[df['Civil Service Title'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Level, Release Version, Tracking Code, Validation Notes\n<|end|>\n<|user|>\nshow records where Level begins with INC\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.startswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Error Code, Request ID, Response Time (ms), Timestamp Created, Workflow Step\n<|end|>\n<|user|>\nshow records where Additional Information begins with sells\n<|end|>\n<|assistant|>\n", "completion": "df[df['Additional Information'].str.startswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Retry Count, Run ID, Salary Range To, Validation Notes\n<|end|>\n<|user|>\nSalary Range To contains value sales\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Job Description, Last Modified By, Response Time (ms), Sync Status\n<|end|>\n<|user|>\nfind all where Job Description contains 'hire'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Job Description'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Flagged Reason, Release Version, Response Time (ms), Salary Range From\n<|end|>\n<|user|>\nlist entries where Salary Range From has '.com' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'].str.contains('.com', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Civil Service Title, Flagged Reason, Retry Count, Session Token, Workflow Step\n<|end|>\n<|user|>\nfind all where Civil Service Title contains 'Tech'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Run ID, Source File Name, Timestamp Created, Work Location 1\n<|end|>\n<|user|>\nshow records where Work Location 1 begins with ink\n<|end|>\n<|assistant|>\n", "completion": "df[df['Work Location 1'].str.startswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Level, Reviewer Comments, System ID, Tracking Code\n<|end|>\n<|user|>\nLevel starts with 'support'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.startswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Posting Updated, Processing Time, Sync Status, Workflow Step\n<|end|>\n<|user|>\nPosting Updated ends with 'Support'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Posting Updated'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Audit Trail, Flagged Reason, Request ID, Retry Count, Workflow Step\n<|end|>\n<|user|>\nAdditional Information starts with 'managr'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Additional Information'].str.startswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Manual Override, Origin System, Project Tag, Residency Requirement, Source File Name\n<|end|>\n<|user|>\nshow records where Residency Requirement begins with sup\n<|end|>\n<|assistant|>\n", "completion": "df[df['Residency Requirement'].str.startswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Processing Time, Residency Requirement, Reviewer Comments, Sync Status\n<|end|>\n<|user|>\nshow records where Residency Requirement begins with sells\n<|end|>\n<|assistant|>\n", "completion": "df[df['Residency Requirement'].str.startswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Approval Status, Flagged Reason, Last Modified By, Release Version, Response Time (ms)\n<|end|>\n<|user|>\nAdditional Information ends with 'Sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Additional Information'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Archived Flag, Audit Trail, Retry Count, Source File Name, Sync Status\n<|end|>\n<|user|>\nAdditional Information includes 'Pro'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Additional Information'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Hours/Shift, Origin System, Run ID, Timestamp Created\n<|end|>\n<|user|>\nlist entries where Hours/Shift has 'pr0' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Level, Project Tag, Run ID, Source File Name, Timestamp Created\n<|end|>\n<|user|>\nshow records where Level begins with Manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.startswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Internal Notes, Posting Date, Reviewer Comments, Workflow Step\n<|end|>\n<|user|>\nshow rows where Posting Date finishes with pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['Posting Date'].str.endswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Minimum Qual Requirements, Request ID, Retry Count, Reviewer Comments\n<|end|>\n<|user|>\nMinimum Qual Requirements includes 'INC'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Career Level, Internal Notes, Last Modified By, Origin System, Timestamp Created\n<|end|>\n<|user|>\nCareer Level includes 'pr0'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Career Level'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Manual Override, Process Date, Processing Time, System ID\n<|end|>\n<|user|>\nProcess Date starts with 'Tech'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Process Date'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Hours/Shift, Request ID, Reviewer Comments\n<|end|>\n<|user|>\nHours/Shift ends with 'dotcom'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Hours/Shift'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Flagged Reason, Level, Source File Name, Workflow Step\n<|end|>\n<|user|>\nshow records where Level begins with Pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.startswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Process Date, Processing Time, Request ID, Retry Count\n<|end|>\n<|user|>\nProcess Date ends with 'Hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Process Date'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Career Level, Environment Name, Session Token, Sync Status\n<|end|>\n<|user|>\nshow rows where Career Level finishes with inc.\n<|end|>\n<|assistant|>\n", "completion": "df[df['Career Level'].str.endswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Minimum Qual Requirements, Release Version, Response Time (ms), System ID\n<|end|>\n<|user|>\nfind all where Minimum Qual Requirements contains 'TECH'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Full-Time/Part-Time indicator, Last Modified By, Origin System, Timestamp Created\n<|end|>\n<|user|>\nFull-Time/Part-Time indicator starts with 'ink'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Job Description, Last Modified By, Origin System, Processing Time, Timestamp Created\n<|end|>\n<|user|>\nJob Description starts with 'dotcom'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Job Description'].str.startswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Document Ref, Post Until, Processing Time, Source File Name\n<|end|>\n<|user|>\nPost Until ends with 'sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Post Until'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Origin System, Project Tag, Reviewer Comments, Sync Status, Title Classification\n<|end|>\n<|user|>\nTitle Classification starts with 'managr'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Title Classification'].str.startswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Error Code, Internal Notes, Manual Override, Post Until\n<|end|>\n<|user|>\nshow rows where Post Until finishes with Support\n<|end|>\n<|assistant|>\n", "completion": "df[df['Post Until'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Hours/Shift, Request ID, Timestamp Created, Workflow Step\n<|end|>\n<|user|>\nHours/Shift ends with 'hiringg'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Hours/Shift'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Backup ID, Flagged Reason, Level, Source File Name\n<|end|>\n<|user|>\nLevel contains value pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Manual Override, Processing Time, Salary Frequency, Workflow Step\n<|end|>\n<|user|>\nSalary Frequency ends with '.COM'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Frequency'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Project Tag, Timestamp Created, Title Classification, Workflow Step\n<|end|>\n<|user|>\nTitle Classification includes 'inc.'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Title Classification'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Error Code, Run ID, Work Location 1, Workflow Step\n<|end|>\n<|user|>\nWork Location 1 ends with 'hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Work Location 1'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Flagged Reason, Last Modified By, Level, Workflow Step\n<|end|>\n<|user|>\nLevel ends with 'Tech'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.endswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Division/Work Unit, Document Ref, Project Tag, Response Time (ms), Run ID, Source File Name\n<|end|>\n<|user|>\nDivision/Work Unit starts with 'sells'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Division/Work Unit'].str.startswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Origin System, Posting Updated, Sync Status, Workflow Step\n<|end|>\n<|user|>\nPosting Updated ends with 'TECH'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Posting Updated'].str.endswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Internal Notes, Reviewer Comments, Source File Name, Validation Notes, company_name\n<|end|>\n<|user|>\nfind company_name ending in Sales\n<|end|>\n<|assistant|>\n", "completion": "df[df['company_name'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Last Modified By, Release Version, Response Time (ms), email\n<|end|>\n<|user|>\nfind email ending in salez\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Manual Override, Request ID, Retry Count, department\n<|end|>\n<|user|>\ndepartment has 'managr' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Manual Override, Run ID, Source File Name, product_name\n<|end|>\n<|user|>\nproduct_name has word salez\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Backup ID, Run ID, Source File Name, city\n<|end|>\n<|user|>\ncity has 'Manager' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Processing Time, Release Version, Source File Name, Timestamp Created, product_name\n<|end|>\n<|user|>\nget records with product_name beginning as Tech\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Origin System, Project Tag, Release Version, Sync Status, product_name\n<|end|>\n<|user|>\nget values with product_name trailing with dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Processing Time, Run ID, Source File Name, Timestamp Created, email\n<|end|>\n<|user|>\nfind rows where email includes 'Manager'\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Document Ref, Manual Override, Response Time (ms), email\n<|end|>\n<|user|>\nemail has word mngr\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Flagged Reason, System ID, Validation Notes, job_title\n<|end|>\n<|user|>\nget records with job_title beginning as mngr\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.startswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Processing Time, Run ID, Source File Name, Tracking Code, city\n<|end|>\n<|user|>\nshow rows where city starts with dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.startswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Reviewer Comments, Run ID, Session Token, Source File Name, product_name\n<|end|>\n<|user|>\nproduct_name field holds value support\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('support', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Internal Notes, Project Tag, Validation Notes, city\n<|end|>\n<|user|>\ncity has word hiringg\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Release Version, Retry Count, Reviewer Comments, Sync Status, email\n<|end|>\n<|user|>\nfind email ending in dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Project Tag, Release Version, Response Time (ms), Tracking Code, product_name\n<|end|>\n<|user|>\nget values with product_name trailing with Pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Project Tag, Retry Count, Source File Name, Workflow Step, job_title\n<|end|>\n<|user|>\nget values with job_title trailing with inc.\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.endswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Origin System, Processing Time, Request ID, Sync Status, email\n<|end|>\n<|user|>\nfind rows where email includes 'manager'\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Response Time (ms), Run ID, System ID, job_title\n<|end|>\n<|user|>\nget records with job_title beginning as pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.startswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Manual Override, Response Time (ms), Reviewer Comments, Sync Status, product_name\n<|end|>\n<|user|>\nfind product_name ending in Manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Release Version, Response Time (ms), Retry Count, Run ID, department\n<|end|>\n<|user|>\nfind department ending in support\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Request ID, Reviewer Comments, System ID, Timestamp Created, department\n<|end|>\n<|user|>\nlist where department ends with INC\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Internal Notes, Processing Time, Validation Notes, city\n<|end|>\n<|user|>\nshow rows where city starts with sup\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.startswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Internal Notes, Reviewer Comments, Timestamp Created, job_title\n<|end|>\n<|user|>\njob_title has word managr\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Manual Override, Source File Name, Workflow Step, city\n<|end|>\n<|user|>\nlist where city ends with hiringg\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Internal Notes, Manual Override, Reviewer Comments, System ID, department\n<|end|>\n<|user|>\ndepartment field begins with dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.startswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Manual Override, Run ID, Workflow Step, city\n<|end|>\n<|user|>\nfind city ending in Manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Run ID, Source File Name, Tracking Code, job_title\n<|end|>\n<|user|>\njob_title field begins with Pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.startswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Project Tag, Request ID, Workflow Step, department\n<|end|>\n<|user|>\nfind department ending in managr\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Release Version, Source File Name, Validation Notes, email\n<|end|>\n<|user|>\nget values with email trailing with manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Last Modified By, Sync Status, System ID, Workflow Step, company_name\n<|end|>\n<|user|>\nlist where company_name ends with .COM\n<|end|>\n<|assistant|>\n", "completion": "df[df['company_name'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Manual Override, Processing Time, Source File Name, Sync Status, city\n<|end|>\n<|user|>\nfind rows where city includes 'Sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Processing Time, Project Tag, Release Version, city\n<|end|>\n<|user|>\nfind city ending in support\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Flagged Reason, Request ID, Session Token, department\n<|end|>\n<|user|>\nlist where department ends with Hiring\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Manual Override, Processing Time, Response Time (ms), department\n<|end|>\n<|user|>\nshow all department with tech in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Origin System, Request ID, Retry Count, Run ID, product_name\n<|end|>\n<|user|>\nfind rows where product_name includes 'TECH'\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Internal Notes, Response Time (ms), Run ID, Source File Name, job_title\n<|end|>\n<|user|>\njob_title has 'mngr' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('manager', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Last Modified By, Reviewer Comments, Source File Name, product_name\n<|end|>\n<|user|>\nproduct_name has word INC\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Manual Override, Origin System, Workflow Step, email\n<|end|>\n<|user|>\nshow rows where email starts with sales\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.startswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Project Tag, Release Version, System ID, product_name\n<|end|>\n<|user|>\nget records with product_name beginning as TECH\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Internal Notes, Response Time (ms), Workflow Step, department\n<|end|>\n<|user|>\nfind department ending in Manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.endswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Last Modified By, Manual Override, Reviewer Comments, email\n<|end|>\n<|user|>\nget records with email beginning as Support\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.startswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Release Version, Run ID, Source File Name, job_title\n<|end|>\n<|user|>\njob_title has 'hire' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Release Version, Response Time (ms), Validation Notes, company_name\n<|end|>\n<|user|>\ncompany_name field holds value Sales\n<|end|>\n<|assistant|>\n", "completion": "df[df['company_name'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Sync Status, Timestamp Created, Workflow Step, department\n<|end|>\n<|user|>\nshow rows where department starts with pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.startswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Last Modified By, Reviewer Comments, Run ID, Timestamp Created, department\n<|end|>\n<|user|>\ndepartment has word inc.\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Processing Time, System ID, Timestamp Created, email\n<|end|>\n<|user|>\nshow rows where email starts with INC\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.startswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Last Modified By, Processing Time, Response Time (ms), product_name\n<|end|>\n<|user|>\nget values with product_name trailing with dotcom\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Last Modified By, Project Tag, Run ID, Validation Notes, product_name\n<|end|>\n<|user|>\nfind product_name ending in Support\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Document Ref, Last Modified By, Timestamp Created, product_name\n<|end|>\n<|user|>\nproduct_name field begins with TECH\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Last Modified By, Manual Override, Workflow Step, department\n<|end|>\n<|user|>\nget entries if department contains .com\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('.com', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Request ID, Reviewer Comments, Tracking Code, product_name\n<|end|>\n<|user|>\nget rows where product_name does not contain 'suport'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['product_name'].str.contains('suport', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Error Code, Flagged Reason, Timestamp Created, company_name\n<|end|>\n<|user|>\nget rows where company_name does not contain '.COM'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['company_name'].str.contains('.COM', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Processing Time, Project Tag, Release Version, System ID, company_name, email\n<|end|>\n<|user|>\nfind email having 'tech' and company_name with 'hiringg'\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Manual Override, Processing Time, Run ID, product_name\n<|end|>\n<|user|>\nget rows where product_name does not contain 'tek'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['product_name'].str.contains('tek', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Last Modified By, Request ID, Response Time (ms), department, job_title\n<|end|>\n<|user|>\nfind department having 'support' and job_title with 'inc.'\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Retry Count, Source File Name, Sync Status, Tracking Code, company_name\n<|end|>\n<|user|>\nget rows where company_name does not contain 'hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['company_name'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Last Modified By, Origin System, Sync Status, company_name, product_name\n<|end|>\n<|user|>\nfind company_name having 'salez' and product_name with 'managr'\n<|end|>\n<|assistant|>\n", "completion": "df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Manual Override, Response Time (ms), Retry Count, department, email\n<|end|>\n<|user|>\nfind department having 'salez' and email with 'sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Origin System, Response Time (ms), System ID, product_name\n<|end|>\n<|user|>\nget rows where product_name does not contain 'Sales'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['product_name'].str.contains('Sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Retry Count, Reviewer Comments, Tracking Code, email\n<|end|>\n<|user|>\nget rows where email does not contain 'support'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['email'].str.contains('support', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Error Code, Manual Override, Retry Count, company_name, department\n<|end|>\n<|user|>\nlist records where department has 'dotcom' or company_name has 'dotcom'\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Internal Notes, Processing Time, Project Tag, department\n<|end|>\n<|user|>\nget rows where department does not contain 'inc.'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['department'].str.contains('inc.', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Retry Count, Sync Status, Tracking Code, city, job_title\n<|end|>\n<|user|>\nfind job_title having 'managr' and city with '.com'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Manual Override, Origin System, Reviewer Comments, department\n<|end|>\n<|user|>\nget rows where department does not contain 'tek'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['department'].str.contains('tek', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Internal Notes, Manual Override, Retry Count, department\n<|end|>\n<|user|>\nget rows where department does not contain 'hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['department'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Response Time (ms), Source File Name, Sync Status, product_name\n<|end|>\n<|user|>\nget rows where product_name does not contain 'PRo'\n<|end|>\n<|assistant|>\n", "completion": "df[~df['product_name'].str.contains('PRo', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Project Tag, Reviewer Comments, Run ID, city, product_name\n<|end|>\n<|user|>\nfind city having 'dotcom' and product_name with 'pr0'\n<|end|>\n<|assistant|>\n", "completion": "df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Processing Time, Source File Name, Timestamp Created, job_title, product_name\n<|end|>\n<|user|>\nlist records where product_name has 'Tech' or job_title has 'PRo'\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Response Time (ms), Source File Name, Tracking Code, department, job_title\n<|end|>\n<|user|>\nlist records where department has '.com' or job_title has 'hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Last Modified By, Origin System, Reviewer Comments, job_title, product_name\n<|end|>\n<|user|>\nlist records where job_title has 'sup' or product_name has '.com'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Origin System, Response Time (ms), Run ID, Workflow Step, job_title, product_name\n<|end|>\n<|user|>\nlist records where product_name has 'support' or job_title has 'Sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Release Version, Session Token, System ID, email, job_title\n<|end|>\n<|user|>\nfind email having 'salez' and job_title with 'dotcom'\n<|end|>\n<|assistant|>\n", "completion": "df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Processing Time, Retry Count, Source File Name, Timestamp Created, company_name, job_title\n<|end|>\n<|user|>\nfind job_title having 'mngr' and company_name with 'hiringg'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Origin System, Project Tag, Tracking Code, Validation Notes, job_title, product_name\n<|end|>\n<|user|>\nlist records where job_title has 'sales' or product_name has 'ink'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Run ID, Sync Status, Timestamp Created, Workflow Step, email, job_title\n<|end|>\n<|user|>\nlist records where job_title has '.COM' or email has 'pro'\n<|end|>\n<|assistant|>\n", "completion": "df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Release Version, Retry Count, Salary Range To, Sync Status\n<|end|>\n<|user|>\nlist entries where Salary Range To has 'inc' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Document Ref, Origin System, Project Tag, Response Time (ms), Timestamp Created\n<|end|>\n<|user|>\nshow rows where Civil Service Title finishes with salez\n<|end|>\n<|assistant|>\n", "completion": "df[df['Civil Service Title'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Level, Manual Override, Processing Time, Project Tag\n<|end|>\n<|user|>\nshow records where Level begins with INC\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.startswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Approval Status, Project Tag, Retry Count, Session Token, Source File Name\n<|end|>\n<|user|>\nshow records where Additional Information begins with sells\n<|end|>\n<|assistant|>\n", "completion": "df[df['Additional Information'].str.startswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Origin System, Run ID, Salary Range To, System ID\n<|end|>\n<|user|>\nSalary Range To contains value sales\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'].str.contains('sales', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Job Description, Manual Override, Reviewer Comments, Session Token, Validation Notes\n<|end|>\n<|user|>\nfind all where Job Description contains 'hire'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Job Description'].str.contains('hiring', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Request ID, Response Time (ms), Retry Count, Salary Range From, Workflow Step\n<|end|>\n<|user|>\nlist entries where Salary Range From has '.com' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'].str.contains('.com', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Civil Service Title, Environment Name, Manual Override, Project Tag\n<|end|>\n<|user|>\nfind all where Civil Service Title contains 'Tech'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Release Version, Reviewer Comments, Run ID, Work Location 1\n<|end|>\n<|user|>\nshow records where Work Location 1 begins with ink\n<|end|>\n<|assistant|>\n", "completion": "df[df['Work Location 1'].str.startswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Flagged Reason, Level, Processing Time, Source File Name\n<|end|>\n<|user|>\nLevel starts with 'support'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.startswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Error Code, Origin System, Posting Updated, Workflow Step\n<|end|>\n<|user|>\nPosting Updated ends with 'Support'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Posting Updated'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Alert Triggered, Archived Flag, Batch Number, Response Time (ms), Workflow Step\n<|end|>\n<|user|>\nAdditional Information starts with 'managr'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Additional Information'].str.startswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Residency Requirement, Response Time (ms), Source File Name, Timestamp Created\n<|end|>\n<|user|>\nshow records where Residency Requirement begins with sup\n<|end|>\n<|assistant|>\n", "completion": "df[df['Residency Requirement'].str.startswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Release Version, Residency Requirement, Retry Count, Session Token, Tracking Code, Workflow Step\n<|end|>\n<|user|>\nshow records where Residency Requirement begins with sells\n<|end|>\n<|assistant|>\n", "completion": "df[df['Residency Requirement'].str.startswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Alert Triggered, Internal Notes, Project Tag, Source File Name, Tracking Code\n<|end|>\n<|user|>\nAdditional Information ends with 'Sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Additional Information'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Backup ID, Internal Notes, Manual Override, Request ID, Validation Notes\n<|end|>\n<|user|>\nAdditional Information includes 'Pro'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Additional Information'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Hours/Shift, Last Modified By, Manual Override, Processing Time, Request ID\n<|end|>\n<|user|>\nlist entries where Hours/Shift has 'pr0' in it\n<|end|>\n<|assistant|>\n", "completion": "df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Project Tag, Run ID, Session Token, Timestamp Created, Validation Notes\n<|end|>\n<|user|>\nshow records where Level begins with Manager\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.startswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Last Modified By, Posting Date, Session Token, Validation Notes\n<|end|>\n<|user|>\nshow rows where Posting Date finishes with pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['Posting Date'].str.endswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Minimum Qual Requirements, Origin System, Project Tag, Release Version, Reviewer Comments\n<|end|>\n<|user|>\nMinimum Qual Requirements includes 'INC'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Career Level, Flagged Reason, Last Modified By, Project Tag, Session Token, Tracking Code\n<|end|>\n<|user|>\nCareer Level includes 'pr0'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Career Level'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Process Date, Project Tag, Retry Count, Run ID\n<|end|>\n<|user|>\nProcess Date starts with 'Tech'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Process Date'].str.startswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Hours/Shift, Processing Time, Project Tag, Run ID, Sync Status\n<|end|>\n<|user|>\nHours/Shift ends with 'dotcom'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Hours/Shift'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Error Code, Internal Notes, Level, Request ID\n<|end|>\n<|user|>\nshow records where Level begins with Pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.startswith('pro', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process Date, Release Version, Response Time (ms), Sync Status, System ID, Timestamp Created\n<|end|>\n<|user|>\nProcess Date ends with 'Hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Process Date'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Career Level, Manual Override, Request ID, Run ID, Workflow Step\n<|end|>\n<|user|>\nshow rows where Career Level finishes with inc.\n<|end|>\n<|assistant|>\n", "completion": "df[df['Career Level'].str.endswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Minimum Qual Requirements, Processing Time, Run ID, Timestamp Created\n<|end|>\n<|user|>\nfind all where Minimum Qual Requirements contains 'TECH'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Environment Name, Flagged Reason, Full-Time/Part-Time indicator, Sync Status\n<|end|>\n<|user|>\nFull-Time/Part-Time indicator starts with 'ink'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Job Description, Reviewer Comments, Session Token, Source File Name, Workflow Step\n<|end|>\n<|user|>\nJob Description starts with 'dotcom'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Job Description'].str.startswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Flagged Reason, Post Until, Retry Count, Timestamp Created\n<|end|>\n<|user|>\nPost Until ends with 'sales'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Post Until'].str.endswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Project Tag, Release Version, Retry Count, Timestamp Created, Title Classification\n<|end|>\n<|user|>\nTitle Classification starts with 'managr'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Title Classification'].str.startswith('manager', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Post Until, Request ID, Response Time (ms), System ID, Timestamp Created\n<|end|>\n<|user|>\nshow rows where Post Until finishes with Support\n<|end|>\n<|assistant|>\n", "completion": "df[df['Post Until'].str.endswith('support', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Hours/Shift, Last Modified By, Manual Override, Project Tag, Reviewer Comments\n<|end|>\n<|user|>\nHours/Shift ends with 'hiringg'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Hours/Shift'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Level, Project Tag, Timestamp Created, Validation Notes\n<|end|>\n<|user|>\nLevel contains value pro\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.contains('pro', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Manual Override, Processing Time, Release Version, Salary Frequency\n<|end|>\n<|user|>\nSalary Frequency ends with '.COM'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Frequency'].str.endswith('.com', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Internal Notes, Session Token, Timestamp Created, Title Classification\n<|end|>\n<|user|>\nTitle Classification includes 'inc.'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Title Classification'].str.contains('inc', case=False, na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Internal Notes, Response Time (ms), Retry Count, Work Location 1\n<|end|>\n<|user|>\nWork Location 1 ends with 'hiring'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Work Location 1'].str.endswith('hiring', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Processing Time, Reviewer Comments, Source File Name, Timestamp Created, Workflow Step\n<|end|>\n<|user|>\nLevel ends with 'Tech'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'].str.endswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Division/Work Unit, Origin System, Project Tag, Sync Status\n<|end|>\n<|user|>\nDivision/Work Unit starts with 'sells'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Division/Work Unit'].str.startswith('sales', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Posting Updated, Retry Count, Run ID\n<|end|>\n<|user|>\nPosting Updated ends with 'TECH'\n<|end|>\n<|assistant|>\n", "completion": "df[df['Posting Updated'].str.endswith('tech', na=False)]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Release Version, Request ID, Salary Range From, Session Token\n<|end|>\n<|user|>\nlist all jobs with Salary Range From minimum 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] >= 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Error Code, Flagged Reason, Level, System ID\n<|end|>\n<|user|>\nLevel != 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] != 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Project Tag, Salary Range To, Session Token, Source File Name, Tracking Code\n<|end|>\n<|user|>\nSalary Range To should be below 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] < 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Internal Notes, Salary Range From, Source File Name, Sync Status\n<|end|>\n<|user|>\nSalary Range From should be maximum 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] <= 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Document Ref, Project Tag, Salary Range From, Sync Status\n<|end|>\n<|user|>\nshow records where Salary Range From is below 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] < 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Request ID, Reviewer Comments, Salary Range To, Session Token, System ID, Validation Notes\n<|end|>\n<|user|>\nlist all jobs with Salary Range To maximum 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] <= 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Flagged Reason, Level, Timestamp Created, Workflow Step\n<|end|>\n<|user|>\nget jobs where Level is greater than 150000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] > 150000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Level, Processing Time, Release Version, Response Time (ms), Reviewer Comments\n<|end|>\n<|user|>\nshow records where Level is >= 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] >= 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Last Modified By, Request ID, Retry Count, Salary Range To\n<|end|>\n<|user|>\nSalary Range To should be maximum 150000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] <= 150000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Level, Origin System, Request ID, Response Time (ms)\n<|end|>\n<|user|>\nshow records where Level is more than 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] > 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Level, Source File Name, System ID, Tracking Code, Validation Notes\n<|end|>\n<|user|>\nget jobs where Level is != 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] != 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Project Tag, Retry Count, Run ID, Salary Range From, System ID\n<|end|>\n<|user|>\nSalary Range From should be == 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] == 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Level, Processing Time, Project Tag, Run ID\n<|end|>\n<|user|>\nshow records where Level is maximum 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] <= 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Level, Origin System, Timestamp Created\n<|end|>\n<|user|>\nget jobs where Level is more than 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] > 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Error Code, Level, System ID, Validation Notes\n<|end|>\n<|user|>\nLevel <= 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] <= 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Level, Source File Name, Timestamp Created, Workflow Step\n<|end|>\n<|user|>\nlist all jobs with Level not 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] != 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Project Tag, Release Version, Response Time (ms), Retry Count, Salary Range From\n<|end|>\n<|user|>\nget jobs where Salary Range From is under 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] < 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Processing Time, Project Tag, Run ID, Salary Range From\n<|end|>\n<|user|>\nSalary Range From should be under 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] < 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Environment Name, Level, Sync Status, Tracking Code\n<|end|>\n<|user|>\nlist all jobs with Level equal to 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] == 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Internal Notes, Manual Override, Processing Time, Salary Range To, Validation Notes\n<|end|>\n<|user|>\nSalary Range To should be not 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] != 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Level, Release Version, Tracking Code\n<|end|>\n<|user|>\nshow records where Level is more than 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] > 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Last Modified By, Release Version, Request ID, Salary Range To\n<|end|>\n<|user|>\nSalary Range To != 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] != 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Request ID, Run ID, Salary Range From, Timestamp Created\n<|end|>\n<|user|>\nSalary Range From <= 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] <= 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Reviewer Comments, Salary Range From, Source File Name, System ID\n<|end|>\n<|user|>\nget jobs where Salary Range From is maximum 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] <= 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Level, Origin System, Reviewer Comments, Timestamp Created\n<|end|>\n<|user|>\nget jobs where Level is >= 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] >= 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Level, Origin System, Retry Count, Session Token\n<|end|>\n<|user|>\nLevel minimum 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] >= 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Request ID, Retry Count, Salary Range To, Session Token, Workflow Step\n<|end|>\n<|user|>\nSalary Range To should be != 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] != 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Processing Time, Salary Range To, Source File Name, System ID\n<|end|>\n<|user|>\nSalary Range To less than 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] < 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Project Tag, Response Time (ms), Run ID, Salary Range To\n<|end|>\n<|user|>\nshow records where Salary Range To is under 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] < 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Level, Manual Override, Reviewer Comments, System ID, Tracking Code\n<|end|>\n<|user|>\nshow records where Level is at most 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] <= 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Last Modified By, Response Time (ms), Reviewer Comments, Salary Range To\n<|end|>\n<|user|>\nget jobs where Salary Range To is <= 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] <= 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Last Modified By, Origin System, Retry Count, Salary Range To, Session Token\n<|end|>\n<|user|>\nlist all jobs with Salary Range To maximum 150000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] <= 150000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Release Version, Response Time (ms), Salary Range From, Sync Status\n<|end|>\n<|user|>\nSalary Range From should be above 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] > 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Request ID, Salary Range To, System ID, Tracking Code\n<|end|>\n<|user|>\nshow records where Salary Range To is at most 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] <= 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Level, Request ID, Sync Status, Tracking Code\n<|end|>\n<|user|>\nlist all jobs with Level less than 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] < 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Reviewer Comments, Salary Range From, Timestamp Created, Validation Notes\n<|end|>\n<|user|>\nshow records where Salary Range From is equal to 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] == 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Salary Range From, Source File Name, Tracking Code, Validation Notes\n<|end|>\n<|user|>\nget jobs where Salary Range From is minimum 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] >= 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Processing Time, Project Tag, Run ID, Salary Range From, Validation Notes\n<|end|>\n<|user|>\nshow records where Salary Range From is not 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] != 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Level, Processing Time, Sync Status, Validation Notes, Workflow Step\n<|end|>\n<|user|>\nget jobs where Level is at most 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] <= 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Origin System, Response Time (ms), Salary Range From, Workflow Step\n<|end|>\n<|user|>\nlist all jobs with Salary Range From above 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] > 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Reviewer Comments, Salary Range From, Session Token, System ID\n<|end|>\n<|user|>\nSalary Range From should be != 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] != 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Level, Source File Name, Sync Status, System ID, Tracking Code\n<|end|>\n<|user|>\nlist all jobs with Level is 150000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] == 150000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Manual Override, Salary Range To, Session Token, Tracking Code\n<|end|>\n<|user|>\nshow records where Salary Range To is greater than 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] > 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Retry Count, Salary Range To, Workflow Step\n<|end|>\n<|user|>\nshow records where Salary Range To is not equal to 150000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] != 150000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Manual Override, Request ID, Reviewer Comments, Salary Range From\n<|end|>\n<|user|>\nlist all jobs with Salary Range From >= 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] >= 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Level, Response Time (ms), Source File Name\n<|end|>\n<|user|>\nlist all jobs with Level not 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] != 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Level, Manual Override, Response Time (ms), Reviewer Comments, Sync Status\n<|end|>\n<|user|>\nshow records where Level is greater than 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Level'] > 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Error Code, Retry Count, Salary Range From, Session Token\n<|end|>\n<|user|>\nSalary Range From maximum 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] <= 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Request ID, Retry Count, Salary Range To, Source File Name, Sync Status, Timestamp Created\n<|end|>\n<|user|>\nSalary Range To should be at least 75000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] >= 75000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Processing Time, Request ID, Salary Range To, Sync Status, Validation Notes\n<|end|>\n<|user|>\nSalary Range To != 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] != 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Posting Date, Project Tag, Reviewer Comments, Run ID, Session Token\n<|end|>\n<|user|>\nshow records where Posting Date is not equal to 200000\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Posting Date']) != pd.to_datetime('200000')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Release Version, Request ID, Retry Count, Sales, Workflow Step\n<|end|>\n<|user|>\nshow entries having Sales >= 25000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Sales'] >= 25000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Environment Name, Error Code, Internal Notes, discount\n<|end|>\n<|user|>\nshow entries having discount is 150000\n<|end|>\n<|assistant|>\n", "completion": "df[df['discount'] == 150000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Processing Time, Sync Status, System ID, Tracking Code, units_sold\n<|end|>\n<|user|>\nunits_sold <= 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['units_sold'] <= 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Run ID, Timestamp Created, Tracking Code, revenue\n<|end|>\n<|user|>\nrevenue should be more than 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['revenue'] > 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Session Token, Sync Status, System ID, Validation Notes, discount\n<|end|>\n<|user|>\nshow entries having discount below 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['discount'] < 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Processing Time, Reviewer Comments, Run ID, Salary Range To, Session Token\n<|end|>\n<|user|>\nSalary Range To >= 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] >= 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Internal Notes, Posting Date, Response Time (ms), System ID\n<|end|>\n<|user|>\nPosting Date should be minimum 100000\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Posting Date']) >= pd.to_datetime('100000')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Flagged Reason, Project Tag, Timestamp Created, units_sold\n<|end|>\n<|user|>\nunits_sold should be >= 25000\n<|end|>\n<|assistant|>\n", "completion": "df[df['units_sold'] >= 25000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Release Version, Response Time (ms), Salary Range To, Timestamp Created, Tracking Code\n<|end|>\n<|user|>\nSalary Range To not 150000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] != 150000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Origin System, Sync Status, Workflow Step, revenue\n<|end|>\n<|user|>\nrevenue equal to 25000\n<|end|>\n<|assistant|>\n", "completion": "df[df['revenue'] == 25000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Run ID, Source File Name, Validation Notes, revenue\n<|end|>\n<|user|>\nshow entries having revenue not 99999\n<|end|>\n<|assistant|>\n", "completion": "df[df['revenue'] != 99999]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Origin System, Sync Status, Workflow Step, revenue\n<|end|>\n<|user|>\nget records where revenue is greater than 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['revenue'] > 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Response Time (ms), Retry Count, Salary Range To, Timestamp Created\n<|end|>\n<|user|>\nSalary Range To less than 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range To'] < 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Last Modified By, Manual Override, Salary Range From, Timestamp Created, Workflow Step\n<|end|>\n<|user|>\nSalary Range From under 25000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] < 25000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Process Date, Processing Time, Retry Count, Reviewer Comments\n<|end|>\n<|user|>\nProcess Date should be <= 99999\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Process Date']) <= pd.to_datetime('99999')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Error Code, Manual Override, Origin System, Salary Range From\n<|end|>\n<|user|>\nshow entries having Salary Range From equal to 1\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] == 1]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Internal Notes, Last Modified By, Release Version, Source File Name, revenue\n<|end|>\n<|user|>\nrevenue should be equal to 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['revenue'] == 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Posting Updated, Run ID, Tracking Code\n<|end|>\n<|user|>\nentries where Posting Updated is at most 25000\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Posting Updated']) <= pd.to_datetime('25000')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Error Code, Sales, Timestamp Created, Workflow Step\n<|end|>\n<|user|>\nget records where Sales is greater than 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Sales'] > 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Reviewer Comments, Run ID, Sync Status, revenue\n<|end|>\n<|user|>\nget records where revenue is more than 100000\n<|end|>\n<|assistant|>\n", "completion": "df[df['revenue'] > 100000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Origin System, Posting Updated, Release Version, System ID, Tracking Code\n<|end|>\n<|user|>\nlist data with Posting Updated less than 10\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Flagged Reason, Last Modified By, Posting Updated, Request ID\n<|end|>\n<|user|>\nlist data with Posting Updated under 0\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('0')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Internal Notes, Manual Override, Posting Updated, Sync Status\n<|end|>\n<|user|>\nshow records where Posting Updated is below 10\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Post Until, Request ID, Source File Name, Timestamp Created\n<|end|>\n<|user|>\nPost Until should be not 200000\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Post Until']) != pd.to_datetime('200000')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Process Date, Retry Count, Sync Status, Timestamp Created, Tracking Code\n<|end|>\n<|user|>\nshow records where Process Date is >= 150000\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Process Date']) >= pd.to_datetime('150000')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Flagged Reason, Release Version, Reviewer Comments, Sales\n<|end|>\n<|user|>\nSales below 10\n<|end|>\n<|assistant|>\n", "completion": "df[df['Sales'] < 10]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Project Tag, Response Time (ms), Salary Range From, Validation Notes\n<|end|>\n<|user|>\nSalary Range From greater than 200000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] > 200000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Error Code, Request ID, Salary Range From, Session Token\n<|end|>\n<|user|>\nget records where Salary Range From is == 25000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Salary Range From'] == 25000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Project Tag, Source File Name, Timestamp Created, units_sold\n<|end|>\n<|user|>\nunits_sold should be is 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['units_sold'] == 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Process Date, Session Token, Source File Name, Workflow Step\n<|end|>\n<|user|>\nProcess Date should be greater than 30000\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Process Date']) > pd.to_datetime('30000')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Last Modified By, Manual Override, Tracking Code, Validation Notes, discount\n<|end|>\n<|user|>\nshow entries having discount at most 30000\n<|end|>\n<|assistant|>\n", "completion": "df[df['discount'] <= 30000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Flagged Reason, Processing Time, Response Time (ms), units_sold\n<|end|>\n<|user|>\nshow entries having units_sold at most 150000\n<|end|>\n<|assistant|>\n", "completion": "df[df['units_sold'] <= 150000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Process Date, Processing Time, Release Version, Request ID\n<|end|>\n<|user|>\nProcess Date should be under 9999\n<|end|>\n<|assistant|>\n", "completion": "df[pd.to_datetime(df['Process Date']) < pd.to_datetime('9999')]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Last Modified By, Origin System, Reviewer Comments, Validation Notes, discount\n<|end|>\n<|user|>\nshow entries having discount at least 25000\n<|end|>\n<|assistant|>\n", "completion": "df[df['discount'] >= 25000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Origin System, Sales, Session Token, Timestamp Created, Tracking Code\n<|end|>\n<|user|>\nSales should be is 99999\n<|end|>\n<|assistant|>\n", "completion": "df[df['Sales'] == 99999]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Document Ref, Project Tag, Sync Status, revenue\n<|end|>\n<|user|>\nget records where revenue is at most 50000\n<|end|>\n<|assistant|>\n", "completion": "df[df['revenue'] <= 50000]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Processing Time, Session Token, Tracking Code, revenue\n<|end|>\n<|user|>\nrevenue should be != 0\n<|end|>\n<|assistant|>\n", "completion": "df[df['revenue'] != 0]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Origin System, Processing Time, Sales, Timestamp Created\n<|end|>\n<|user|>\nSales should be below 9999\n<|end|>\n<|assistant|>\n", "completion": "df[df['Sales'] < 9999]"}
{"prompt": "<|system|>\nYou are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Project Tag, Sales, Session Token, Source File Name, System ID\n<|end|>\n<|user|>\nget records where Sales is is 150000\n<|end|>\n<|assistant|>\n", "completion": "df[df['Sales'] == 150000]"}
