{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, quantity<|end|><|user|>Get the number of quantity values grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, region<|end|><|user|>Compute the minimum cost per region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['cost'].agg('min')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, month<|end|><|user|>Get the average cost grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['cost'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month<|end|><|user|>Give the median month for each month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['month'].agg('median')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, store_id<|end|><|user|>Find standard deviation of profit grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['profit'].agg('std')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, expenses<|end|><|user|>Calculate the total expenses for each channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['expenses'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, department<|end|><|user|>Find the maximum cost in every department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['cost'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, cost<|end|><|user|>Compute the minimum cost per category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['cost'].agg('min')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, profit<|end|><|user|>Show the sum of profit across city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['profit'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, cost<|end|><|user|>Find the maximum cost in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['cost'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, tax<|end|><|user|>Calculate the total tax for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['tax'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, sales<|end|><|user|>List the count of sales for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['sales'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, expenses<|end|><|user|>Give the median expenses for each customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['expenses'].agg('median')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, units_sold<|end|><|user|>Calculate the total units_sold for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['units_sold'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: store_id<|end|><|user|>Get the average store_id grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['store_id'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, product<|end|><|user|>Get the average cost grouped by product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['cost'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, quantity<|end|><|user|>Find the maximum quantity in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, expenses<|end|><|user|>Find the maximum expenses in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['expenses'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, order_value<|end|><|user|>Get the number of order_value values grouped by customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['order_value'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, units_sold<|end|><|user|>Show how many units_sold entries exist per month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['units_sold'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: discount, store_id<|end|><|user|>Find standard deviation of discount grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['discount'].agg('std')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, quantity<|end|><|user|>Show how many quantity entries exist per department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['quantity'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_sold<|end|><|user|>Show the sum of units_sold across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, sales<|end|><|user|>Give the median sales for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['sales'].agg('median')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, units_sold<|end|><|user|>Show how many units_sold entries exist per category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['units_sold'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, sales<|end|><|user|>Show the sum of sales across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['sales'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_sold<|end|><|user|>Calculate the total units_sold for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, discount<|end|><|user|>Calculate the total discount for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['discount'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, units_sold<|end|><|user|>Show how many units_sold entries exist per month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['units_sold'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, units_sold<|end|><|user|>List the count of units_sold for each channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['units_sold'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, tax<|end|><|user|>Find the maximum tax in every category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['tax'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: store_id, units_sold<|end|><|user|>List the count of units_sold for each store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['units_sold'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_sold<|end|><|user|>Find standard deviation of units_sold grouped by department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('std')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, order_value<|end|><|user|>Get the average order_value grouped by city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['order_value'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: order_value, store_id<|end|><|user|>Find standard deviation of order_value grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['order_value'].agg('std')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: region<|end|><|user|>Calculate the total region for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['region'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, discount<|end|><|user|>Find standard deviation of discount grouped by department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['discount'].agg('std')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, units_sold<|end|><|user|>Show the sum of units_sold across customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['units_sold'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product, quantity<|end|><|user|>Show how many quantity entries exist per product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['quantity'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, profit<|end|><|user|>Find standard deviation of profit grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['profit'].agg('std')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_sold<|end|><|user|>List the count of units_sold for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, department<|end|><|user|>List the count of cost for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['cost'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, region<|end|><|user|>Calculate the total cost for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['cost'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product, units_sold<|end|><|user|>Get the average units_sold grouped by product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['units_sold'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: quantity, store_id<|end|><|user|>Find standard deviation of quantity grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['quantity'].agg('std')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: order_value, region<|end|><|user|>Show the sum of order_value across region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['order_value'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: order_value, region<|end|><|user|>Find the maximum order_value in every region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['order_value'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, store_id<|end|><|user|>Find standard deviation of expenses grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['expenses'].agg('std')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, order_value<|end|><|user|>Compute the minimum order_value per channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['order_value'].agg('min')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, profit<|end|><|user|>List the count of profit for each customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['profit'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: region, units_sold<|end|><|user|>Compute the minimum units_sold per region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['units_sold'].agg('min')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, region<|end|><|user|>Get the number of cost values grouped by region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['cost'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: region, sales<|end|><|user|>Give the median sales for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['sales'].agg('median')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, quantity<|end|><|user|>Get the number of quantity values grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, region<|end|><|user|>Show how many profit entries exist per region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['profit'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product<|end|><|user|>Show how many product entries exist per product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['product'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, tax<|end|><|user|>Get the average tax grouped by department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['tax'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, order_value<|end|><|user|>Show the sum of order_value across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['order_value'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, units_sold<|end|><|user|>Get the number of units_sold values grouped by category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['units_sold'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, sales<|end|><|user|>Get the number of sales values grouped by category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['sales'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, order_value<|end|><|user|>Get the average order_value grouped by category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['order_value'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, cost<|end|><|user|>Get the number of cost values grouped by city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['cost'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, units_sold<|end|><|user|>Compute the minimum units_sold per city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['units_sold'].agg('min')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employee, expenses<|end|><|user|>Show the sum of expenses across employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['expenses'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, store_id<|end|><|user|>Find the maximum expenses in every store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['expenses'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: region<|end|><|user|>Give the median region for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['region'].agg('median')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, tax<|end|><|user|>List the count of tax for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['tax'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel<|end|><|user|>Get the average channel grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['channel'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, month<|end|><|user|>Show the sum of cost across month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['cost'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, discount<|end|><|user|>Find the maximum discount in every department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['discount'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: discount, month<|end|><|user|>Show the sum of discount across month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['discount'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, quantity<|end|><|user|>Find the maximum quantity in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, tax<|end|><|user|>Compute the minimum tax per channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['tax'].agg('min')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, month<|end|><|user|>Calculate the total cost for each month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['cost'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, profit<|end|><|user|>Get the average profit grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['profit'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel<|end|><|user|>Get the average channel grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['channel'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, month<|end|><|user|>Find the maximum expenses in every month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['expenses'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, units_sold<|end|><|user|>Get the number of units_sold values grouped by city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['units_sold'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, expenses<|end|><|user|>Show the sum of expenses across channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['expenses'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, region<|end|><|user|>List the count of expenses for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['expenses'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, order_value<|end|><|user|>Get the average order_value grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['order_value'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, sales<|end|><|user|>Calculate the total sales for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['sales'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, product<|end|><|user|>Find the maximum expenses in every product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['expenses'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, employee<|end|><|user|>List the count of cost for each employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['cost'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, sales<|end|><|user|>Show how many sales entries exist per department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['sales'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, profit<|end|><|user|>Get the average profit grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['profit'].agg('mean')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, discount<|end|><|user|>Calculate the total discount for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['discount'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employee, profit<|end|><|user|>Show how many profit entries exist per employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['profit'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, sales<|end|><|user|>Find the maximum sales in every month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['sales'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, sales<|end|><|user|>Give the median sales for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['sales'].agg('median')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_sold<|end|><|user|>Show the sum of units_sold across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, employee<|end|><|user|>Give the median cost for each employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['cost'].agg('median')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, profit<|end|><|user|>Get the number of profit values grouped by customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['profit'].agg('count')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employee, profit<|end|><|user|>Find the maximum profit in every employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['profit'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, profit<|end|><|user|>Calculate the total profit for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['profit'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, units_sold<|end|><|user|>Find standard deviation of units_sold grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['units_sold'].agg('std')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employee<|end|><|user|>Find the maximum employee in every employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['employee'].agg('max')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, quantity<|end|><|user|>Calculate the total quantity for each customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['quantity'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, quantity<|end|><|user|>Show the sum of quantity across city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['quantity'].agg('sum')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, units_sold<|end|><|user|>Compute the minimum units_sold per customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['units_sold'].agg('min')\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenue<|end|><|user|>Show customers in increasing order of revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_sold<|end|><|user|>Display employees in order of decreasing units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, sales<|end|><|user|>Get the highest sales values for each employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: rating, stores<|end|><|user|>Find top 3 stores with highest rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, sales<|end|><|user|>Get the highest sales values for each departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, units_sold<|end|><|user|>Find top 3 departments with highest units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenue, stores<|end|><|user|>List the lowest revenue values grouped by stores.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profit<|end|><|user|>Show customers in increasing order of profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, units_sold<|end|><|user|>Rank departments by units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['units_sold_rank'] = df['units_sold'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, stores<|end|><|user|>Get the highest profit values for each stores.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, expenses<|end|><|user|>Rank employees by expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['expenses_rank'] = df['expenses'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profit<|end|><|user|>Show customers sorted by profit ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, stores<|end|><|user|>Show stores sorted by sales ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, stores<|end|><|user|>Rank stores by expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['expenses_rank'] = df['expenses'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, stores<|end|><|user|>Display stores in order of decreasing expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, stores<|end|><|user|>Get bottom 10 stores based on sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, units_sold<|end|><|user|>Get bottom 10 customers based on units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profit<|end|><|user|>Rank products by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profit<|end|><|user|>Sort customers by profit in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profit<|end|><|user|>List top 5 employees by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profit<|end|><|user|>Get bottom 10 products based on profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, units_sold<|end|><|user|>Find top 3 departments with highest units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, rating<|end|><|user|>Display products in order of decreasing rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: rating, stores<|end|><|user|>Get the highest rating values for each stores.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, sales<|end|><|user|>Show customers in increasing order of sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, revenue<|end|><|user|>List the lowest revenue values grouped by products.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, expenses<|end|><|user|>Find top 3 employees with highest expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, stores<|end|><|user|>Sort stores by sales in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenue, stores<|end|><|user|>Sort stores by revenue in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, sales<|end|><|user|>Find top 3 products with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, rating<|end|><|user|>Rank products by rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['rating_rank'] = df['rating'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, profit<|end|><|user|>Rank departments by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_sold<|end|><|user|>Get bottom 10 employees based on units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, expenses<|end|><|user|>Display customers in order of decreasing expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, revenue<|end|><|user|>Get bottom 10 employees based on revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profit<|end|><|user|>Sort customers by profit in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profit<|end|><|user|>List the lowest profit values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, revenue<|end|><|user|>List the lowest revenue values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, profit<|end|><|user|>Show departments in increasing order of profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profit<|end|><|user|>Find top 3 products with highest profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenue<|end|><|user|>Find top 3 customers with highest revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: rating, stores<|end|><|user|>Sort stores by rating in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, expenses<|end|><|user|>List the lowest expenses values grouped by departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, profit<|end|><|user|>Display departments in order of decreasing profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profit<|end|><|user|>Find top 3 employees with highest profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, revenue<|end|><|user|>Show products in increasing order of revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, rating<|end|><|user|>Display customers in order of decreasing rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, expenses<|end|><|user|>List the lowest expenses values grouped by departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, products<|end|><|user|>Find top 3 products with highest expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, sales<|end|><|user|>Display departments in order of decreasing sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, units_sold<|end|><|user|>List the lowest units_sold values grouped by products.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, revenue<|end|><|user|>Show departments in increasing order of revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, revenue<|end|><|user|>List the lowest revenue values grouped by departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, rating<|end|><|user|>Show customers sorted by rating ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, products<|end|><|user|>Get bottom 10 products based on expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, profit<|end|><|user|>List top 5 departments by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, rating<|end|><|user|>List top 5 customers by rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, rating<|end|><|user|>Get bottom 10 products based on rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenue, stores<|end|><|user|>Rank stores by revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['revenue_rank'] = df['revenue'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_sold<|end|><|user|>Show employees sorted by units_sold ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, units_sold<|end|><|user|>Rank customers by units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['units_sold_rank'] = df['units_sold'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, rating<|end|><|user|>Find top 3 employees with highest rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, expenses<|end|><|user|>Show departments in increasing order of expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profit<|end|><|user|>Rank products by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, revenue<|end|><|user|>Sort employees by revenue in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, rating<|end|><|user|>Display customers in order of decreasing rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, stores<|end|><|user|>Sort stores by sales in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, sales<|end|><|user|>Find top 3 customers with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, expenses<|end|><|user|>Show departments in increasing order of expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profit<|end|><|user|>Find top 3 customers with highest profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, products<|end|><|user|>Rank products by expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['expenses_rank'] = df['expenses'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, stores<|end|><|user|>Show stores sorted by sales ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, rating<|end|><|user|>List the lowest rating values grouped by customers.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, expenses<|end|><|user|>List the lowest expenses values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, stores<|end|><|user|>Sort stores by expenses in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, stores<|end|><|user|>Find top 3 stores with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, sales<|end|><|user|>Get bottom 10 products based on sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, stores<|end|><|user|>Find top 2 stores with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_sold<|end|><|user|>Sort employees by units_sold in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, stores<|end|><|user|>Get bottom 10 stores based on profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profit<|end|><|user|>Rank customers by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profit<|end|><|user|>List the lowest profit values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: stores, units_sold<|end|><|user|>Sort stores by units_sold in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, sales<|end|><|user|>Display departments in order of decreasing sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profit<|end|><|user|>Rank employees by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, rating<|end|><|user|>Show employees in increasing order of rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, units_sold<|end|><|user|>Sort departments by units_sold in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profit<|end|><|user|>Rank products by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, sales<|end|><|user|>Find top 2 employees with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, products<|end|><|user|>Show products in increasing order of expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, sales<|end|><|user|>Show customers sorted by sales ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, revenue<|end|><|user|>List top 5 departments by revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenue<|end|><|user|>Get bottom 10 customers based on revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenue<|end|><|user|>Sort customers by revenue in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, revenue<|end|><|user|>List the lowest revenue values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_sold<|end|><|user|>Rank employees by units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['units_sold_rank'] = df['units_sold'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, revenue<|end|><|user|>List top 5 departments by revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, rating<|end|><|user|>Get bottom 10 customers based on rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, products<|end|><|user|>Get bottom 10 products based on expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, sales<|end|><|user|>List top 5 employees by sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Get rows where email field has the substring 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Find all values in city that end with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>List all records where product_name includes 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Get rows where customer_name field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Find all values in category that end with 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.endswith('Manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Filter rows where product_name contains 'Service' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Filter rows where customer_name contains 'Service' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>List all records where city includes 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Filter rows where city contains 'Store' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Find category values that contain 'Pro' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>List records where customer_name begins with 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('Inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>List all records where department includes 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Get rows where category field has the substring 'sales'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Get rows where department field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Get rows where product_name field has the substring 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Find customer_name values that contain 'Manager' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>List all records where city includes 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Filter rows where email contains 'North' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('North', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>List records where city begins with 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('Manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>List records where city begins with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Get rows where city field has the substring 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Find customer_name values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>List all records where city includes 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>List records where department begins with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>List all records where customer_name includes 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Find department values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>List records where category begins with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Get rows where customer_name starts with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>List all records where city includes 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Find product_name values that contain 'North' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('North', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Show entries where city ends with 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('Pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Find all category that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Show entries where department ends with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Get rows where product_name starts with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Find email values that contain 'Service' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Get rows where city field has the substring 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Find all city that contain the word 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Get rows where product_name starts with 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Get rows where product_name field has the substring 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Find all customer_name that contain the word 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Find all values in city that end with 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('Inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>List all records where product_name includes 'North'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('North', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Find all entries with category matching 'Store' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'] == 'Store']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Find all values in customer_name that end with 'North'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.endswith('North', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Find all entries with email matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Find category values that contain 'Manager' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Find category values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Find all category that contain the word 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>List all records where department includes 'sales'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Find department values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Show entries where customer_name ends with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.endswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>List records where product_name begins with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Find all email that contain the word 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Find all values in email that end with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Find all customer_name that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Find department values that contain 'Service' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Get rows where department starts with 'sales'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Find department values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>List all records where email includes 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>List records where customer_name begins with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Find customer_name values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Find all customer_name that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Find all values in department that end with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Find email values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Get rows where department field has the substring 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Find all entries with city matching 'North' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'] == 'North']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>List records where email begins with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Get rows where category starts with 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.startswith('Pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Find all entries with department matching 'com' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'] == 'com']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Find all values in city that end with 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('Pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Get rows where customer_name starts with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Find all values in product_name that end with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Find all values in product_name that end with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Get rows where category field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Find customer_name values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Find all entries with department matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Get rows where email starts with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Find all entries with city matching 'com' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'] == 'com']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Get rows where customer_name starts with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Find all entries with department matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Find department values that contain 'Manager' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>List records where product_name begins with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city<|end|><|user|>Get rows where city starts with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Filter rows where product_name contains 'Manager' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>List records where product_name begins with 'North'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('North', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Get rows where email field has the substring 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>List all records where category includes 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Find all values in email that end with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>Find all customer_name that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_name<|end|><|user|>List records where customer_name begins with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Get rows where department field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>Get rows where product_name starts with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>List all records where department includes 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category<|end|><|user|>Find category values that contain 'Pro' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>List records where email begins with 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('Inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_name<|end|><|user|>List all records where product_name includes 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Get rows where department starts with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>Get rows where department field has the substring 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department<|end|><|user|>List records where department begins with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email<|end|><|user|>Find all entries with email matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
