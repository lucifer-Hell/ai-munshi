{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Origin System, Project Tag, Request ID, channel, quantity<|end|><|user|>Get the number of quantity values grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Release Version, Sync Status, Timestamp Created, cost, region<|end|><|user|>Compute the minimum cost per region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['cost'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Environment Name, Response Time (ms), Session Token, cost, month<|end|><|user|>Get the average cost grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['cost'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Processing Time, Request ID, Tracking Code, month<|end|><|user|>Give the median month for each month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['month'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Request ID, Sync Status, System ID, profit, store_id<|end|><|user|>Find standard deviation of profit grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['profit'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Processing Time, Project Tag, Run ID, channel, expenses<|end|><|user|>Calculate the total expenses for each channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['expenses'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Origin System, Response Time (ms), Source File Name, Sync Status, cost, department<|end|><|user|>Find the maximum cost in every department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['cost'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Request ID, Retry Count, Source File Name, category, cost<|end|><|user|>Compute the minimum cost per category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['cost'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Processing Time, Run ID, Timestamp Created, Workflow Step, city, profit<|end|><|user|>Show the sum of profit across city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['profit'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Internal Notes, Retry Count, Workflow Step, channel, cost<|end|><|user|>Find the maximum cost in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['cost'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Flagged Reason, Internal Notes, Reviewer Comments, city, tax<|end|><|user|>Calculate the total tax for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['tax'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Origin System, Source File Name, Tracking Code, department, sales<|end|><|user|>List the count of sales for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['sales'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Flagged Reason, Internal Notes, Validation Notes, customer_type, expenses<|end|><|user|>Give the median expenses for each customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['expenses'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Batch Number, Project Tag, category, units_sold<|end|><|user|>Calculate the total units_sold for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Error Code, Response Time (ms), Reviewer Comments, Session Token, store_id<|end|><|user|>Get the average store_id grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['store_id'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Release Version, Run ID, Sync Status, Tracking Code, cost, product<|end|><|user|>Get the average cost grouped by product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['cost'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Retry Count, Sync Status, channel, quantity<|end|><|user|>Find the maximum quantity in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Flagged Reason, Internal Notes, Manual Override, Origin System, channel, expenses<|end|><|user|>Find the maximum expenses in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['expenses'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Last Modified By, Project Tag, Reviewer Comments, customer_type, order_value<|end|><|user|>Get the number of order_value values grouped by customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['order_value'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Project Tag, Release Version, Run ID, Validation Notes, month, units_sold<|end|><|user|>Show how many units_sold entries exist per month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Last Modified By, Project Tag, discount, store_id<|end|><|user|>Find standard deviation of discount grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['discount'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Last Modified By, Manual Override, Sync Status, department, quantity<|end|><|user|>Show how many quantity entries exist per department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['quantity'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Origin System, Project Tag, Run ID, Validation Notes, department, units_sold<|end|><|user|>Show the sum of units_sold across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Release Version, Retry Count, Sync Status, Workflow Step, category, sales<|end|><|user|>Give the median sales for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['sales'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Retry Count, Source File Name, Sync Status, Tracking Code, category, units_sold<|end|><|user|>Show how many units_sold entries exist per category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Flagged Reason, Origin System, Workflow Step, department, sales<|end|><|user|>Show the sum of sales across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['sales'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Response Time (ms), Run ID, Session Token, Validation Notes, Workflow Step, department, units_sold<|end|><|user|>Calculate the total units_sold for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Flagged Reason, Project Tag, Session Token, department, discount<|end|><|user|>Calculate the total discount for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['discount'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Origin System, Project Tag, Timestamp Created, Validation Notes, month, units_sold<|end|><|user|>Show how many units_sold entries exist per month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Origin System, Sync Status, Timestamp Created, channel, units_sold<|end|><|user|>List the count of units_sold for each channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Processing Time, Response Time (ms), Session Token, category, tax<|end|><|user|>Find the maximum tax in every category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['tax'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Reviewer Comments, Sync Status, System ID, Timestamp Created, store_id, units_sold<|end|><|user|>List the count of units_sold for each store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Internal Notes, Retry Count, Tracking Code, department, units_sold<|end|><|user|>Find standard deviation of units_sold grouped by department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Project Tag, Release Version, Source File Name, Timestamp Created, city, order_value<|end|><|user|>Get the average order_value grouped by city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['order_value'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Flagged Reason, Manual Override, Processing Time, order_value, store_id<|end|><|user|>Find standard deviation of order_value grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['order_value'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Origin System, Request ID, System ID, region<|end|><|user|>Calculate the total region for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['region'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Internal Notes, Release Version, Session Token, department, discount<|end|><|user|>Find standard deviation of discount grouped by department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['discount'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Origin System, Project Tag, Retry Count, Workflow Step, customer_type, units_sold<|end|><|user|>Show the sum of units_sold across customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Last Modified By, Manual Override, Processing Time, Request ID, product, quantity<|end|><|user|>Show how many quantity entries exist per product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['quantity'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Origin System, Retry Count, Session Token, System ID, month, profit<|end|><|user|>Find standard deviation of profit grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['profit'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Last Modified By, System ID, Validation Notes, department, units_sold<|end|><|user|>List the count of units_sold for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Project Tag, System ID, cost, department<|end|><|user|>List the count of cost for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['cost'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Last Modified By, Retry Count, Reviewer Comments, Timestamp Created, cost, region<|end|><|user|>Calculate the total cost for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['cost'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Request ID, Retry Count, System ID, Validation Notes, product, units_sold<|end|><|user|>Get the average units_sold grouped by product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['units_sold'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Internal Notes, Request ID, Workflow Step, quantity, store_id<|end|><|user|>Find standard deviation of quantity grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['quantity'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Reviewer Comments, Session Token, Source File Name, Validation Notes, order_value, region<|end|><|user|>Show the sum of order_value across region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['order_value'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Response Time (ms), Session Token, Sync Status, Tracking Code, order_value, region<|end|><|user|>Find the maximum order_value in every region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['order_value'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Document Ref, Environment Name, Retry Count, expenses, store_id<|end|><|user|>Find standard deviation of expenses grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['expenses'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Release Version, Retry Count, Timestamp Created, channel, order_value<|end|><|user|>Compute the minimum order_value per channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['order_value'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Last Modified By, Origin System, System ID, customer_type, profit<|end|><|user|>List the count of profit for each customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['profit'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Error Code, Processing Time, Validation Notes, region, units_sold<|end|><|user|>Compute the minimum units_sold per region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['units_sold'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Error Code, Retry Count, Run ID, cost, region<|end|><|user|>Get the number of cost values grouped by region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['cost'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Manual Override, Project Tag, Release Version, Reviewer Comments, region, sales<|end|><|user|>Give the median sales for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['sales'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Session Token, Sync Status, System ID, channel, quantity<|end|><|user|>Get the number of quantity values grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Request ID, Response Time (ms), Sync Status, Workflow Step, profit, region<|end|><|user|>Show how many profit entries exist per region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['profit'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Request ID, Response Time (ms), Sync Status, product<|end|><|user|>Show how many product entries exist per product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['product'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Run ID, Sync Status, Tracking Code, department, tax<|end|><|user|>Get the average tax grouped by department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['tax'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Session Token, Tracking Code, Workflow Step, department, order_value<|end|><|user|>Show the sum of order_value across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['order_value'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Origin System, Release Version, Sync Status, System ID, category, units_sold<|end|><|user|>Get the number of units_sold values grouped by category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Error Code, Timestamp Created, Validation Notes, category, sales<|end|><|user|>Get the number of sales values grouped by category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['sales'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Response Time (ms), Session Token, Source File Name, Sync Status, category, order_value<|end|><|user|>Get the average order_value grouped by category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['order_value'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Internal Notes, Processing Time, Source File Name, city, cost<|end|><|user|>Get the number of cost values grouped by city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['cost'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Processing Time, Release Version, Reviewer Comments, city, units_sold<|end|><|user|>Compute the minimum units_sold per city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['units_sold'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Project Tag, Release Version, Tracking Code, employee, expenses<|end|><|user|>Show the sum of expenses across employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['expenses'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Internal Notes, Project Tag, Tracking Code, expenses, store_id<|end|><|user|>Find the maximum expenses in every store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['expenses'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Source File Name, Sync Status, Workflow Step, region<|end|><|user|>Give the median region for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['region'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Manual Override, Processing Time, Timestamp Created, category, tax<|end|><|user|>List the count of tax for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['tax'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Manual Override, Origin System, Sync Status, channel<|end|><|user|>Get the average channel grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['channel'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Manual Override, Source File Name, Validation Notes, cost, month<|end|><|user|>Show the sum of cost across month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['cost'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Internal Notes, Project Tag, Tracking Code, department, discount<|end|><|user|>Find the maximum discount in every department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['discount'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Batch Number, Request ID, Validation Notes, discount, month<|end|><|user|>Show the sum of discount across month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['discount'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Processing Time, Retry Count, Sync Status, channel, quantity<|end|><|user|>Find the maximum quantity in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Error Code, Flagged Reason, Session Token, channel, tax<|end|><|user|>Compute the minimum tax per channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['tax'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Origin System, Request ID, Tracking Code, cost, month<|end|><|user|>Calculate the total cost for each month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['cost'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Processing Time, Source File Name, Validation Notes, month, profit<|end|><|user|>Get the average profit grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['profit'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Release Version, Run ID, Source File Name, channel<|end|><|user|>Get the average channel grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['channel'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Error Code, Run ID, Timestamp Created, expenses, month<|end|><|user|>Find the maximum expenses in every month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['expenses'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Error Code, Response Time (ms), Tracking Code, city, units_sold<|end|><|user|>Get the number of units_sold values grouped by city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Response Time (ms), Tracking Code, Workflow Step, channel, expenses<|end|><|user|>Show the sum of expenses across channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['expenses'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, System ID, Tracking Code, Validation Notes, expenses, region<|end|><|user|>List the count of expenses for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['expenses'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Backup ID, Last Modified By, System ID, month, order_value<|end|><|user|>Get the average order_value grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['order_value'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Flagged Reason, Release Version, Sync Status, city, sales<|end|><|user|>Calculate the total sales for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['sales'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Internal Notes, Response Time (ms), Session Token, Sync Status, expenses, product<|end|><|user|>Find the maximum expenses in every product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['expenses'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Processing Time, Release Version, Tracking Code, cost, employee<|end|><|user|>List the count of cost for each employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['cost'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Response Time (ms), System ID, Validation Notes, Workflow Step, department, sales<|end|><|user|>Show how many sales entries exist per department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['sales'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Release Version, Run ID, Sync Status, Workflow Step, channel, profit<|end|><|user|>Get the average profit grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['profit'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Origin System, Project Tag, Release Version, Timestamp Created, category, discount<|end|><|user|>Calculate the total discount for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['discount'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Retry Count, Validation Notes, Workflow Step, employee, profit<|end|><|user|>Show how many profit entries exist per employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['profit'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Manual Override, Request ID, Validation Notes, month, sales<|end|><|user|>Find the maximum sales in every month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['sales'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Error Code, Internal Notes, Response Time (ms), city, sales<|end|><|user|>Give the median sales for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['sales'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Reviewer Comments, System ID, Timestamp Created, Validation Notes, department, units_sold<|end|><|user|>Show the sum of units_sold across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Reviewer Comments, Session Token, Sync Status, cost, employee<|end|><|user|>Give the median cost for each employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['cost'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Last Modified By, Manual Override, Run ID, customer_type, profit<|end|><|user|>Get the number of profit values grouped by customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['profit'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Project Tag, Source File Name, System ID, employee, profit<|end|><|user|>Find the maximum profit in every employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['profit'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Batch Number, Release Version, Request ID, city, profit<|end|><|user|>Calculate the total profit for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['profit'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Session Token, Timestamp Created, Validation Notes, month, units_sold<|end|><|user|>Find standard deviation of units_sold grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['units_sold'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Internal Notes, Origin System, Session Token, employee<|end|><|user|>Find the maximum employee in every employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['employee'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Error Code, Origin System, Timestamp Created, customer_type, quantity<|end|><|user|>Calculate the total quantity for each customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['quantity'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Project Tag, Release Version, Run ID, Workflow Step, city, quantity<|end|><|user|>Show the sum of quantity across city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['quantity'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Origin System, Session Token, System ID, customer_type, units_sold<|end|><|user|>Compute the minimum units_sold per customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['units_sold'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Job ID, Level, Project Tag, Tracking Code, Validation Notes<|end|><|user|>group job id and apply min on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Job ID, Level, Origin System, Processing Time, Request ID, Tracking Code<|end|><|user|>group JOB ID and apply count on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Level, Origin System, Project Tag, Retry Count, Timestamp Created, Workflow Step<|end|><|user|>group job identifier and apply sum on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Environment Name, Last Modified By, Manual Override, Run ID<|end|><|user|>agcy wise std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Batch Number, Internal Notes, Processing Time, Request ID<|end|><|user|>group AGENCY and apply mean on # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Run ID, Session Token, Timestamp Created, Tracking Code<|end|><|user|>group the data by AGENCY and get sum of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Business Title, Level, Response Time (ms), Reviewer Comments, Timestamp Created<|end|><|user|>min Level per biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Business Title, Level, Processing Time, Reviewer Comments, Timestamp Created, Tracking Code<|end|><|user|>group the data by biz title and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Session Token, Source File Name, Tracking Code, Validation Notes<|end|><|user|>aggregate # Of Positions by civil title using max<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Error Code, Release Version, Reviewer Comments, Session Token, Sync Status<|end|><|user|>group civil title and apply median on # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Job ID, Release Version, Retry Count, Reviewer Comments, Title Classification<|end|><|user|>count Job ID per title class<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Environment Name, Level, Processing Time, Session Token, Title Code No<|end|><|user|>group title code no and apply median on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Level, Sync Status, Timestamp Created, Title Code No, Validation Notes<|end|><|user|>group the data by tcode and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Level, Processing Time, Request ID, Session Token, Source File Name, Title Code No<|end|><|user|>count Level based on tile code<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Environment Name, Last Modified By, Source File Name, Validation Notes, Workflow Step<|end|><|user|>sum # Of Positions by agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Job ID, Level, Processing Time, Release Version, Source File Name, Validation Notes<|end|><|user|>median Level by Job Id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Environment Name, Last Modified By, Level, Origin System, Source File Name, Sync Status<|end|><|user|>count Level per official title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Flagged Reason, Internal Notes, Run ID, Source File Name<|end|><|user|>organize by service title and get sum of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Error Code, Level, Sync Status, Title Code No, Tracking Code<|end|><|user|>categorized by tile code and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Archived Flag, Manual Override, Reviewer Comments, Validation Notes<|end|><|user|>split by agcy and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Level, Request ID, Source File Name, Sync Status, Title Code No<|end|><|user|>min Level wise title code<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Error Code, Flagged Reason, Origin System, Release Version, Workflow Step<|end|><|user|>group by organisation and get max of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Business Title, Level, Origin System, Retry Count, Reviewer Comments<|end|><|user|>sum Level grpby title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Job ID, Project Tag, Release Version, System ID, Title Classification<|end|><|user|>max Job ID per title classfn<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Business Title, Internal Notes, Level, Request ID, Session Token, Workflow Step<|end|><|user|>sum Level grp biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Internal Notes, Last Modified By, Level, Origin System, Response Time (ms), Tracking Code<|end|><|user|>organize by title and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Level, Processing Time, Reviewer Comments, Source File Name, Title Code No<|end|><|user|>bucket by titlecode number and get median of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Internal Notes, Level, Processing Time, System ID, Workflow Step<|end|><|user|>partition by business title and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Job ID, Level, Origin System, Response Time (ms), Session Token<|end|><|user|>count Level by JOB ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Processing Time, Request ID, Run ID, System ID, Title Code No, Tracking Code<|end|><|user|>std Level grpby tcode<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Batch Number, Civil Service Title, Environment Name, Release Version, Source File Name, Validation Notes<|end|><|user|>max # Of Positions based on service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Job ID, Processing Time, Release Version, Reviewer Comments, Title Classification<|end|><|user|>partition by classification and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Job ID, Release Version, Title Classification, Validation Notes, Workflow Step<|end|><|user|>groub by title classfn and get std of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Internal Notes, Job ID, Posting Type, Release Version, Workflow Step<|end|><|user|>max Job ID grpby PostingType<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Job ID, Level, Processing Time, Release Version, Session Token, System ID<|end|><|user|>group by job id and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Flagged Reason, Job ID, Posting Type, Run ID, Workflow Step<|end|><|user|>max Job ID grp posting type<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Job ID, Processing Time, Release Version, Timestamp Created, Title Classification<|end|><|user|>groub by classification and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Job ID, Last Modified By, Posting Type, Release Version, Session Token<|end|><|user|>organize by posting and get median of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Batch Number, Flagged Reason, Level, Response Time (ms), Title Code No<|end|><|user|>split by tcode and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Job ID, Level, Processing Time, Request ID, Source File Name<|end|><|user|>mean Level wise job identifier<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Level, Manual Override, Project Tag, Response Time (ms), Workflow Step<|end|><|user|>grup by biz title and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Document Ref, Error Code, Level, Manual Override, Release Version, System ID<|end|><|user|>split by biz title and get median of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Level, Release Version, Session Token, Source File Name, Title Code No<|end|><|user|>categorized by title_code and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Job ID, Level, Project Tag, Release Version, System ID<|end|><|user|>count Level on the basis of job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Audit Trail, Job ID, Retry Count, Title Classification, Workflow Step<|end|><|user|>partition by classification and get min of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Error Code, Release Version, Source File Name, Sync Status<|end|><|user|>categorized by agency and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Document Ref, Request ID, Sync Status, Timestamp Created, Tracking Code<|end|><|user|>cluster by agcy and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Audit Trail, Backup ID, Manual Override, Retry Count<|end|><|user|>grup by agency and get mean of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Error Code, Level, Processing Time, Project Tag, Response Time (ms), Session Token<|end|><|user|>categorized by title and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Document Ref, Flagged Reason, Run ID, Sync Status, Timestamp Created<|end|><|user|>categorized by AGENCY and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Project Tag, Request ID, Retry Count, Run ID, Session Token, Title Classification<|end|><|user|>partition by title class and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Job ID, Level, Processing Time, Retry Count, Session Token<|end|><|user|>std Level based on job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Last Modified By, Run ID, Source File Name, Sync Status, System ID<|end|><|user|>partition by AGENCY and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Job ID, Level, Manual Override, Sync Status, Tracking Code, Validation Notes<|end|><|user|>std Level by job identifier<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Business Title, Internal Notes, Level, Manual Override, Source File Name, Timestamp Created<|end|><|user|>max Level grp title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Audit Trail, Batch Number, Manual Override, Release Version, System ID<|end|><|user|>groub by agcy and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Level, Manual Override, Retry Count, Session Token, Workflow Step<|end|><|user|>partition by title of job and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Job ID, Processing Time, Session Token, System ID, Title Classification<|end|><|user|>groop by title classfn and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Job ID, Manual Override, Posting Type, Session Token, Validation Notes<|end|><|user|>groub by post type and get median of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Environment Name, Job ID, Last Modified By, Level, Manual Override<|end|><|user|>organize by job id and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Job ID, Level, Origin System, Project Tag, Retry Count, Sync Status<|end|><|user|>std Level based on job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Document Ref, Origin System, Project Tag, Retry Count, System ID<|end|><|user|>max # Of Positions based on agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Job ID, Level, Manual Override, Origin System, Run ID, Sync Status<|end|><|user|>split by Job Id and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Civil Service Title, Origin System, Session Token, Sync Status, Workflow Step<|end|><|user|>count # Of Positions grpby service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Flagged Reason, Job ID, Posting Type, Sync Status, Timestamp Created<|end|><|user|>partition by PostingType and get sum of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Job ID, Level, Processing Time, Run ID, Timestamp Created<|end|><|user|>group by job identifier and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Job ID, Manual Override, Posting Type, Processing Time, Tracking Code, Workflow Step<|end|><|user|>split by posting and get std of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Flagged Reason, Level, Processing Time, Session Token, Title Code No<|end|><|user|>partition by tile code and get sum of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Backup ID, Request ID, Response Time (ms), Retry Count, Run ID<|end|><|user|>i want to see it group organisation<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Posting Type, Response Time (ms), Retry Count, Session Token<|end|><|user|>can you grp type of post?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Business Title, Flagged Reason, Request ID, Retry Count, Reviewer Comments<|end|><|user|>i want to see it by title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Alert Triggered, Backup ID, Batch Number, Processing Time, Session Token<|end|><|user|>grpby organisation<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Business Title, Environment Name, Session Token, Source File Name<|end|><|user|>i want to see it based on title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Document Ref, Origin System, Processing Time, Request ID, Sync Status<|end|><|user|>show data by AGENCY<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Posting Type, Release Version, Source File Name, Workflow Step<|end|><|user|>show data categorize by PostingType<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Business Title, Last Modified By, Manual Override, Timestamp Created, Validation Notes<|end|><|user|>grp biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Audit Trail, Batch Number, Flagged Reason, Request ID, Validation Notes<|end|><|user|>can you organize by AGENCY?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Civil Service Title, Project Tag, Release Version, Request ID, Response Time (ms)<|end|><|user|>categorize by cst<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Backup ID, Last Modified By, Manual Override, Processing Time, Timestamp Created<|end|><|user|>cluster by Agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Error Code, Flagged Reason, Origin System, Tracking Code, Workflow Step<|end|><|user|>i want to see it grp cst<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Flagged Reason, Manual Override, Retry Count, Session Token, Workflow Step<|end|><|user|>i want to see it grpby biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Civil Service Title, Origin System, Processing Time, Retry Count<|end|><|user|>based on service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Civil Service Title, Document Ref, Environment Name, Request ID, Tracking Code<|end|><|user|>can you cluster by govt title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Retry Count, Reviewer Comments, Sync Status, Title Code No<|end|><|user|>show data organize by title code no<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Project Tag, Request ID, Retry Count, Sync Status, Tracking Code<|end|><|user|>can you grouped by j o b i d?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Alert Triggered, Audit Trail, Error Code, Request ID, Timestamp Created<|end|><|user|>grouped by AGENCY<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Document Ref, Internal Notes, Release Version, Sync Status, Timestamp Created<|end|><|user|>can you split by agcy?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Error Code, Manual Override, Origin System, Response Time (ms), Run ID<|end|><|user|>show data by govt title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Last Modified By, Level, Retry Count, Reviewer Comments, Title Code No<|end|><|user|>Could you group the data by title code and show the mean of Level?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Job ID, Last Modified By, Retry Count, Run ID, Title Classification<|end|><|user|>I'd like to know the count of Job ID by title classification.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Civil Service Title, Internal Notes, Request ID, Response Time (ms), Validation Notes<|end|><|user|>How many # Of Positions values are there per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Level, Release Version, Response Time (ms), Title Code No, Validation Notes<|end|><|user|>Which title code no has the highest Level std?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Civil Service Title, Error Code, Flagged Reason, Response Time (ms), Run ID<|end|><|user|>Can you show me the max # Of Positions grouped by service title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Internal Notes, Project Tag, Run ID, Sync Status<|end|><|user|>What\u2019s the min of # Of Positions in each AGENCY group?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Backup ID, Civil Service Title, Release Version, Retry Count, Run ID<|end|><|user|>List count # Of Positions per civil service.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Internal Notes, Level, Response Time (ms), Source File Name, Title Code No, Tracking Code<|end|><|user|>Can you show me the mean Level grouped by tile code?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Batch Number, Processing Time, Release Version, Reviewer Comments<|end|><|user|>List sum # Of Positions per Agency.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Backup ID, Project Tag, Request ID, System ID, Workflow Step<|end|><|user|>Could you group the data by Agency and show the count of # Of Positions?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Alert Triggered, Civil Service Title, Document Ref, Internal Notes, Processing Time, Reviewer Comments<|end|><|user|>Which service title has the highest # Of Positions std?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Business Title, Level, Manual Override, Project Tag, Run ID, Session Token<|end|><|user|>I'd like to know the min of Level by business title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Job ID, Last Modified By, Processing Time, System ID, Timestamp Created, Title Classification<|end|><|user|>Which title classfn has the highest Job ID count?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Level, Origin System, Project Tag, Source File Name, Validation Notes<|end|><|user|>Could you group the data by biz title and show the count of Level?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Job ID, Level, Manual Override, Processing Time, Retry Count<|end|><|user|>Which j o b i d has the highest Level min?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Business Title, Environment Name, Level, Origin System, Response Time (ms), Workflow Step<|end|><|user|>List std Level per official title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Alert Triggered, Approval Status, Backup ID, Civil Service Title, Sync Status, Validation Notes<|end|><|user|>Give me the std of # Of Positions for every cst.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Manual Override, Origin System, Retry Count, Session Token, Sync Status, Title Classification<|end|><|user|>How is Job ID distributed across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Flagged Reason, Level, Manual Override, Release Version, Response Time (ms)<|end|><|user|>Which business title has the highest Level sum?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Job ID, Last Modified By, Request ID, Title Classification, Workflow Step<|end|><|user|>Could you group the data by title class and show the sum of Job ID?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Job ID, Origin System, Reviewer Comments, Source File Name, Title Classification<|end|><|user|>How is Job ID distributed across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Job ID, Level, Origin System, Run ID, Session Token, Workflow Step<|end|><|user|>What\u2019s the count of Level in each j o b i d group?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Job ID, Origin System, Request ID, Session Token, System ID, Title Classification<|end|><|user|>How many Job ID values are there per title classification?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Civil Service Title, Environment Name, Error Code, Processing Time, Sync Status<|end|><|user|>How many # Of Positions values are there per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Batch Number, Civil Service Title, Document Ref, Retry Count, Run ID, Sync Status<|end|><|user|>Can you show me the min # Of Positions grouped by civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Job ID, Level, Manual Override, Project Tag, Run ID, Source File Name<|end|><|user|>group job id and apply min on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Flagged Reason, Job ID, Level, Request ID, Sync Status<|end|><|user|>group JOB ID and apply count on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Job ID, Level, Release Version, Response Time (ms), Run ID, Sync Status<|end|><|user|>group job identifier and apply sum on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Document Ref, Processing Time, Reviewer Comments, System ID<|end|><|user|>agcy wise std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Environment Name, Reviewer Comments, Run ID, Workflow Step<|end|><|user|>group AGENCY and apply mean on # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Internal Notes, Manual Override, Origin System, Sync Status<|end|><|user|>group the data by AGENCY and get sum of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Business Title, Environment Name, Error Code, Internal Notes, Level, Workflow Step<|end|><|user|>min Level per biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Environment Name, Error Code, Last Modified By, Level, Retry Count, Run ID<|end|><|user|>group the data by biz title and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Document Ref, Environment Name, Origin System, Response Time (ms), Retry Count<|end|><|user|>aggregate # Of Positions by civil title using max<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Alert Triggered, Archived Flag, Audit Trail, Civil Service Title, Internal Notes, System ID<|end|><|user|>group civil title and apply median on # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Job ID, Last Modified By, Reviewer Comments, Sync Status, Title Classification<|end|><|user|>count Job ID per title class<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Level, Request ID, Run ID, Timestamp Created, Title Code No<|end|><|user|>group title code no and apply median on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Level, Origin System, Run ID, Title Code No, Tracking Code<|end|><|user|>group the data by tcode and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Level, Project Tag, Retry Count, Timestamp Created, Title Code No<|end|><|user|>count Level based on tile code<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Backup ID, Internal Notes, Request ID, Response Time (ms)<|end|><|user|>sum # Of Positions by agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Job ID, Last Modified By, Level, Manual Override, Tracking Code, Workflow Step<|end|><|user|>median Level by Job Id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Business Title, Document Ref, Internal Notes, Level, Origin System<|end|><|user|>count Level per official title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Civil Service Title, Document Ref, Flagged Reason, Project Tag, Response Time (ms)<|end|><|user|>organize by service title and get sum of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Release Version, Response Time (ms), Source File Name, Timestamp Created, Title Code No, Tracking Code<|end|><|user|>categorized by tile code and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Archived Flag, Batch Number, Internal Notes, Sync Status<|end|><|user|>split by agcy and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Level, Processing Time, Retry Count, Source File Name, Sync Status, Title Code No<|end|><|user|>min Level wise title code<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Flagged Reason, Manual Override, Retry Count, System ID, Validation Notes<|end|><|user|>group by organisation and get max of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Business Title, Level, Manual Override, Processing Time, Response Time (ms)<|end|><|user|>sum Level grpby title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Job ID, Response Time (ms), Title Classification, Tracking Code<|end|><|user|>max Job ID per title classfn<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Error Code, Internal Notes, Level, Origin System, Project Tag, Retry Count<|end|><|user|>sum Level grp biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Business Title, Last Modified By, Level, Release Version, Sync Status<|end|><|user|>organize by title and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Level, Manual Override, Processing Time, Request ID, Title Code No<|end|><|user|>bucket by titlecode number and get median of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Business Title, Document Ref, Level, Run ID, Tracking Code<|end|><|user|>partition by business title and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Job ID, Level, Manual Override, Run ID, Sync Status<|end|><|user|>count Level by JOB ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Level, Origin System, Release Version, Sync Status, Title Code No, Validation Notes<|end|><|user|>std Level grpby tcode<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Project Tag, Release Version, Response Time (ms), Source File Name, Validation Notes<|end|><|user|>max # Of Positions based on service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Internal Notes, Job ID, Processing Time, Sync Status, Title Classification<|end|><|user|>partition by classification and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Job ID, Origin System, Project Tag, Timestamp Created, Title Classification, Validation Notes<|end|><|user|>groub by title classfn and get std of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Job ID, Last Modified By, Posting Type, Source File Name, Timestamp Created, Tracking Code<|end|><|user|>max Job ID grpby PostingType<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Environment Name, Job ID, Level, Response Time (ms)<|end|><|user|>group by job id and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Job ID, Manual Override, Posting Type, Run ID, Validation Notes<|end|><|user|>max Job ID grp posting type<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Job ID, Origin System, Run ID, System ID, Title Classification<|end|><|user|>groub by classification and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Document Ref, Job ID, Manual Override, Posting Type<|end|><|user|>organize by posting and get median of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Level, Processing Time, Session Token, Title Code No, Tracking Code, Workflow Step<|end|><|user|>split by tcode and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Job ID, Level, Origin System, Request ID, Sync Status<|end|><|user|>mean Level wise job identifier<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Business Title, Level, Release Version, Request ID, Response Time (ms)<|end|><|user|>grup by biz title and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Business Title, Level, Origin System, Release Version, Response Time (ms), Retry Count<|end|><|user|>split by biz title and get median of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Level, Retry Count, System ID, Title Code No, Tracking Code<|end|><|user|>categorized by title_code and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Last Modified By, Level, Manual Override, Origin System, Project Tag, Validation Notes<|end|><|user|>count Level on the basis of job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Job ID, Processing Time, Project Tag, Response Time (ms), Title Classification<|end|><|user|>partition by classification and get min of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Document Ref, Processing Time, Reviewer Comments, Workflow Step<|end|><|user|>categorized by agency and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Backup ID, Internal Notes, Last Modified By, Release Version, Workflow Step<|end|><|user|>cluster by agcy and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Document Ref, Processing Time, Run ID, Workflow Step<|end|><|user|>grup by agency and get mean of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Business Title, Flagged Reason, Level, Release Version, Retry Count<|end|><|user|>categorized by title and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Manual Override, Origin System, Tracking Code, Workflow Step<|end|><|user|>categorized by AGENCY and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Flagged Reason, Internal Notes, Job ID, Retry Count, Title Classification, Workflow Step<|end|><|user|>partition by title class and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Job ID, Level, Release Version, Request ID, System ID<|end|><|user|>std Level based on job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Error Code, Manual Override, Processing Time, Tracking Code<|end|><|user|>partition by AGENCY and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Job ID, Level, Retry Count, Reviewer Comments, System ID<|end|><|user|>std Level by job identifier<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Error Code, Level, Manual Override, Project Tag, Retry Count, Tracking Code<|end|><|user|>max Level grp title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Batch Number, Origin System, Timestamp Created, Validation Notes<|end|><|user|>groub by agcy and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Document Ref, Internal Notes, Level, Manual Override, Run ID, Session Token<|end|><|user|>partition by title of job and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Job ID, Project Tag, Request ID, Source File Name, Sync Status, Title Classification<|end|><|user|>groop by title classfn and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Job ID, Last Modified By, Posting Type, Request ID, Run ID<|end|><|user|>groub by post type and get median of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Batch Number, Job ID, Level, Processing Time, Sync Status<|end|><|user|>organize by job id and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Job ID, Level, Manual Override, Project Tag, Validation Notes<|end|><|user|>std Level based on job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Document Ref, Run ID, Timestamp Created, Validation Notes<|end|><|user|>max # Of Positions based on agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Job ID, Level, Origin System, Processing Time, Run ID, System ID<|end|><|user|>split by Job Id and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Batch Number, Civil Service Title, Document Ref, Manual Override, Sync Status, Timestamp Created<|end|><|user|>count # Of Positions grpby service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Flagged Reason, Job ID, Posting Type, System ID, Validation Notes<|end|><|user|>partition by PostingType and get sum of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Environment Name, Job ID, Level, Session Token, Timestamp Created<|end|><|user|>group by job identifier and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Job ID, Origin System, Posting Type, Processing Time, Retry Count, Source File Name<|end|><|user|>split by posting and get std of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Origin System, Source File Name, System ID, Title Code No, Validation Notes, Workflow Step<|end|><|user|>partition by tile code and get sum of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Alert Triggered, Archived Flag, Environment Name, Request ID, Response Time (ms)<|end|><|user|>i want to see it group organisation<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Posting Type, Release Version, Response Time (ms), Timestamp Created<|end|><|user|>can you grp type of post?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Business Title, Document Ref, Manual Override, Reviewer Comments, Workflow Step<|end|><|user|>i want to see it by title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Batch Number, Flagged Reason, Manual Override, Retry Count, Validation Notes<|end|><|user|>grpby organisation<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Business Title, Error Code, Run ID, Sync Status, Workflow Step<|end|><|user|>i want to see it based on title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Backup ID, Flagged Reason, Response Time (ms), Retry Count, Sync Status<|end|><|user|>show data by AGENCY<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Posting Type, Processing Time, Tracking Code, Workflow Step<|end|><|user|>show data categorize by PostingType<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, Flagged Reason, Release Version, Run ID, Source File Name, Validation Notes<|end|><|user|>grp biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Alert Triggered, Document Ref, Project Tag, Source File Name, Timestamp Created<|end|><|user|>can you organize by AGENCY?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Response Time (ms), System ID, Timestamp Created, Tracking Code, Workflow Step<|end|><|user|>categorize by cst<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Backup ID, Internal Notes, Manual Override, System ID, Validation Notes<|end|><|user|>cluster by Agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Environment Name, Manual Override, Processing Time, Request ID, Timestamp Created<|end|><|user|>i want to see it grp cst<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Business Title, Document Ref, Project Tag, Timestamp Created<|end|><|user|>i want to see it grpby biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Civil Service Title, Origin System, Run ID, Source File Name, Workflow Step<|end|><|user|>based on service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Civil Service Title, Flagged Reason, Project Tag, Workflow Step<|end|><|user|>can you cluster by govt title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Flagged Reason, Release Version, Title Code No, Workflow Step<|end|><|user|>show data organize by title code no<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Job ID, Project Tag, Retry Count, Run ID, Session Token<|end|><|user|>can you grouped by j o b i d?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Approval Status, Audit Trail, Backup ID, Batch Number, Tracking Code<|end|><|user|>grouped by AGENCY<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Agency, Archived Flag, Project Tag, Release Version, Sync Status, Validation Notes<|end|><|user|>can you split by agcy?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Civil Service Title, Environment Name, Internal Notes, Processing Time, Sync Status<|end|><|user|>show data by govt title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Level, Project Tag, Retry Count, Run ID, Title Code No<|end|><|user|>Could you group the data by title code and show the mean of Level?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Job ID, Last Modified By, Manual Override, Run ID, Session Token, Title Classification<|end|><|user|>I'd like to know the count of Job ID by title classification.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Civil Service Title, Request ID, Source File Name, Tracking Code, Workflow Step<|end|><|user|>How many # Of Positions values are there per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Processing Time, Reviewer Comments, Sync Status, System ID, Timestamp Created, Title Code No<|end|><|user|>Which title code no has the highest Level std?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Last Modified By, Processing Time, Release Version, Response Time (ms), Source File Name<|end|><|user|>Can you show me the max # Of Positions grouped by service title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Audit Trail, Backup ID, Flagged Reason, Last Modified By<|end|><|user|>What\u2019s the min of # Of Positions in each AGENCY group?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Audit Trail, Civil Service Title, Document Ref, Release Version, Sync Status, Validation Notes<|end|><|user|>List count # Of Positions per civil service.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Manual Override, Project Tag, Response Time (ms), Sync Status, Timestamp Created, Title Code No<|end|><|user|>Can you show me the mean Level grouped by tile code?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Manual Override, Origin System, Release Version, Request ID, Session Token<|end|><|user|>List sum # Of Positions per Agency.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Manual Override, Release Version, Session Token, Source File Name<|end|><|user|>Could you group the data by Agency and show the count of # Of Positions?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Batch Number, Civil Service Title, Last Modified By, Manual Override, Reviewer Comments<|end|><|user|>Which service title has the highest # Of Positions std?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Business Title, Level, Processing Time, Project Tag, Response Time (ms), Run ID<|end|><|user|>I'd like to know the min of Level by business title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Error Code, Job ID, Manual Override, Origin System, Title Classification<|end|><|user|>Which title classfn has the highest Job ID count?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Business Title, Document Ref, Flagged Reason, Internal Notes, Level, Sync Status<|end|><|user|>Could you group the data by biz title and show the count of Level?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Job ID, Level, Response Time (ms), Reviewer Comments, Run ID<|end|><|user|>Which j o b i d has the highest Level min?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Business Title, Flagged Reason, Level, Release Version, Request ID<|end|><|user|>List std Level per official title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Origin System, Release Version, Request ID, Response Time (ms)<|end|><|user|>Give me the std of # Of Positions for every cst.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Job ID, Retry Count, Title Classification, Tracking Code, Validation Notes<|end|><|user|>How is Job ID distributed across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Business Title, Document Ref, Environment Name, Level, Session Token<|end|><|user|>Which business title has the highest Level sum?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Job ID, Retry Count, Reviewer Comments, Source File Name, Sync Status, Title Classification<|end|><|user|>Could you group the data by title class and show the sum of Job ID?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Job ID, Origin System, Project Tag, Sync Status, Title Classification<|end|><|user|>How is Job ID distributed across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Job ID, Level, Release Version, Retry Count, Timestamp Created<|end|><|user|>What\u2019s the count of Level in each j o b i d group?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Job ID, Project Tag, Session Token, Title Classification, Tracking Code<|end|><|user|>How many Job ID values are there per title classification?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Manual Override, Response Time (ms), Reviewer Comments, Source File Name, Tracking Code<|end|><|user|>How many # Of Positions values are there per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Archived Flag, Civil Service Title, Environment Name, Timestamp Created, Validation Notes<|end|><|user|>Can you show me the min # Of Positions grouped by civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Job ID, Last Modified By, Level, Processing Time, Workflow Step<|end|><|user|>How does the Level vary across job id?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Job ID, Reviewer Comments, Session Token, Source File Name, Timestamp Created, Title Classification<|end|><|user|>Show the spread of Job ID by classification.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Alert Triggered, Civil Service Title, Last Modified By, Origin System, System ID, Validation Notes<|end|><|user|>What\u2019s the variation in # Of Positions per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Level, Origin System, Source File Name, Title Code No, Validation Notes<|end|><|user|>Tell me the spread of Level across different title code no.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Archived Flag, Backup ID, Civil Service Title, Environment Name, Source File Name, Workflow Step<|end|><|user|>What is the variability of # Of Positions grouped by civil service?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Internal Notes, Level, Manual Override, Retry Count, Timestamp Created, Title Code No<|end|><|user|>What is the variability of Level grouped by title code?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Environment Name, Flagged Reason, Release Version, Sync Status<|end|><|user|>What is the variability of # Of Positions grouped by service title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Approval Status, Backup ID, Batch Number, Civil Service Title, Reviewer Comments, Source File Name<|end|><|user|>Tell me the spread of # Of Positions across different govt title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Job ID, Origin System, Posting Type, Request ID, Source File Name<|end|><|user|>Check how Job ID changes across type of post.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Environment Name, Internal Notes, Manual Override, Release Version, Reviewer Comments<|end|><|user|>What's the range of # Of Positions for each AGENCY?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Job ID, Level, Origin System, Release Version, Response Time (ms)<|end|><|user|>Give the scattered values of Level by jobid.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Job ID, Posting Type, Project Tag, Release Version, Reviewer Comments, Sync Status<|end|><|user|>How is Job ID scattered over type of post?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Document Ref, Level, Request ID, Session Token, Title Code No<|end|><|user|>How does the Level vary across title_code?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Business Title, Level, Project Tag, Sync Status, Validation Notes, Workflow Step<|end|><|user|>Give the scattered values of Level by title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Job ID, Manual Override, Project Tag, Title Classification, Validation Notes<|end|><|user|>How does the Job ID vary across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Level, Processing Time, Project Tag, Run ID, Title Code No<|end|><|user|>What's the range of Level for each tcode?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Document Ref, Internal Notes, Timestamp Created, Tracking Code<|end|><|user|>What\u2019s the variation in # Of Positions per agcy?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Job ID, Session Token, Sync Status, Timestamp Created, Title Classification<|end|><|user|>Check how Job ID changes across title classfn.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service Title, Environment Name, Flagged Reason, Manual Override, Release Version, Reviewer Comments<|end|><|user|>What\u2019s the variation in # Of Positions per civil service?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Environment Name, Processing Time, Response Time (ms), Run ID<|end|><|user|>Can you show the distribution of # Of Positions across agcy?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Processing Time, Project Tag, Session Token, Timestamp Created, customers, revenue<|end|><|user|>Show customers in increasing order of revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Document Ref, Internal Notes, Processing Time, employees, units_sold<|end|><|user|>Display employees in order of decreasing units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Origin System, Reviewer Comments, Run ID, Tracking Code, employees, sales<|end|><|user|>Get the highest sales values for each employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Manual Override, Reviewer Comments, Sync Status, rating, stores<|end|><|user|>Find top 3 stores with highest rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Project Tag, Release Version, Reviewer Comments, Session Token, departments, sales<|end|><|user|>Get the highest sales values for each departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Origin System, Reviewer Comments, Tracking Code, departments, units_sold<|end|><|user|>Find top 3 departments with highest units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Backup ID, Internal Notes, Manual Override, revenue, stores<|end|><|user|>List the lowest revenue values grouped by stores.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Project Tag, Release Version, Request ID, customers, profit<|end|><|user|>Show customers in increasing order of profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Source File Name, Sync Status, Timestamp Created, Tracking Code, Workflow Step, departments, units_sold<|end|><|user|>Rank departments by units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['units_sold_rank'] = df['units_sold'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Error Code, Response Time (ms), Source File Name, profit, stores<|end|><|user|>Get the highest profit values for each stores.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Error Code, Response Time (ms), Retry Count, employees, expenses<|end|><|user|>Rank employees by expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['expenses_rank'] = df['expenses'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Retry Count, Sync Status, Timestamp Created, Workflow Step, customers, profit<|end|><|user|>Show customers sorted by profit ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Origin System, Request ID, Session Token, Source File Name, sales, stores<|end|><|user|>Show stores sorted by sales ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Origin System, Source File Name, Timestamp Created, expenses, stores<|end|><|user|>Rank stores by expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['expenses_rank'] = df['expenses'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Last Modified By, Release Version, Request ID, expenses, stores<|end|><|user|>Display stores in order of decreasing expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Request ID, Reviewer Comments, Source File Name, Sync Status, Timestamp Created, sales, stores<|end|><|user|>Get bottom 10 stores based on sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Origin System, Request ID, Response Time (ms), Workflow Step, customers, units_sold<|end|><|user|>Get bottom 10 customers based on units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Processing Time, System ID, Timestamp Created, Tracking Code, products, profit<|end|><|user|>Rank products by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Environment Name, Internal Notes, Manual Override, customers, profit<|end|><|user|>Sort customers by profit in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Response Time (ms), Retry Count, Reviewer Comments, System ID, employees, profit<|end|><|user|>List top 5 employees by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Manual Override, Sync Status, System ID, Tracking Code, products, profit<|end|><|user|>Get bottom 10 products based on profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Release Version, Source File Name, Validation Notes, departments, units_sold<|end|><|user|>Find top 3 departments with highest units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Project Tag, Request ID, System ID, products, rating<|end|><|user|>Display products in order of decreasing rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Flagged Reason, Processing Time, Tracking Code, rating, stores<|end|><|user|>Get the highest rating values for each stores.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Internal Notes, Release Version, Run ID, Validation Notes, customers, sales<|end|><|user|>Show customers in increasing order of sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Manual Override, Session Token, Workflow Step, products, revenue<|end|><|user|>List the lowest revenue values grouped by products.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Origin System, Project Tag, Timestamp Created, employees, expenses<|end|><|user|>Find top 3 employees with highest expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Response Time (ms), Run ID, Workflow Step, sales, stores<|end|><|user|>Sort stores by sales in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Manual Override, Processing Time, System ID, revenue, stores<|end|><|user|>Sort stores by revenue in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Project Tag, Run ID, Source File Name, products, sales<|end|><|user|>Find top 3 products with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Project Tag, Retry Count, Session Token, products, rating<|end|><|user|>Rank products by rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['rating_rank'] = df['rating'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Error Code, Manual Override, Processing Time, Session Token, departments, profit<|end|><|user|>Rank departments by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Manual Override, Processing Time, Sync Status, Workflow Step, employees, units_sold<|end|><|user|>Get bottom 10 employees based on units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Internal Notes, Processing Time, Workflow Step, customers, expenses<|end|><|user|>Display customers in order of decreasing expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Processing Time, Release Version, Reviewer Comments, Workflow Step, employees, revenue<|end|><|user|>Get bottom 10 employees based on revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Release Version, Timestamp Created, Validation Notes, customers, profit<|end|><|user|>Sort customers by profit in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Environment Name, Internal Notes, Processing Time, employees, profit<|end|><|user|>List the lowest profit values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Reviewer Comments, Source File Name, Timestamp Created, employees, revenue<|end|><|user|>List the lowest revenue values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Release Version, Response Time (ms), Tracking Code, Workflow Step, departments, profit<|end|><|user|>Show departments in increasing order of profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Processing Time, Release Version, Reviewer Comments, products, profit<|end|><|user|>Find top 3 products with highest profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Processing Time, Retry Count, Validation Notes, customers, revenue<|end|><|user|>Find top 3 customers with highest revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Internal Notes, Reviewer Comments, Tracking Code, rating, stores<|end|><|user|>Sort stores by rating in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Release Version, Response Time (ms), System ID, Timestamp Created, departments, expenses<|end|><|user|>List the lowest expenses values grouped by departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Internal Notes, Reviewer Comments, Sync Status, departments, profit<|end|><|user|>Display departments in order of decreasing profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Internal Notes, Retry Count, Reviewer Comments, employees, profit<|end|><|user|>Find top 3 employees with highest profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Processing Time, Response Time (ms), Source File Name, Sync Status, products, revenue<|end|><|user|>Show products in increasing order of revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Backup ID, Batch Number, Retry Count, customers, rating<|end|><|user|>Display customers in order of decreasing rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Project Tag, Release Version, Request ID, departments, expenses<|end|><|user|>List the lowest expenses values grouped by departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Release Version, Run ID, Validation Notes, expenses, products<|end|><|user|>Find top 3 products with highest expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Origin System, Request ID, Retry Count, Run ID, departments, sales<|end|><|user|>Display departments in order of decreasing sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Request ID, Reviewer Comments, Validation Notes, Workflow Step, products, units_sold<|end|><|user|>List the lowest units_sold values grouped by products.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Release Version, Response Time (ms), Timestamp Created, departments, revenue<|end|><|user|>Show departments in increasing order of revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Flagged Reason, Project Tag, Timestamp Created, departments, revenue<|end|><|user|>List the lowest revenue values grouped by departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Error Code, Request ID, System ID, customers, rating<|end|><|user|>Show customers sorted by rating ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Manual Override, Processing Time, Workflow Step, expenses, products<|end|><|user|>Get bottom 10 products based on expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Retry Count, Reviewer Comments, Workflow Step, departments, profit<|end|><|user|>List top 5 departments by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Response Time (ms), Session Token, Tracking Code, customers, rating<|end|><|user|>List top 5 customers by rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Retry Count, Timestamp Created, Tracking Code, products, rating<|end|><|user|>Get bottom 10 products based on rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Origin System, Processing Time, Release Version, revenue, stores<|end|><|user|>Rank stores by revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['revenue_rank'] = df['revenue'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Manual Override, Origin System, Processing Time, employees, units_sold<|end|><|user|>Show employees sorted by units_sold ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Retry Count, Reviewer Comments, System ID, customers, units_sold<|end|><|user|>Rank customers by units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['units_sold_rank'] = df['units_sold'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Processing Time, Release Version, Response Time (ms), employees, rating<|end|><|user|>Find top 3 employees with highest rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Release Version, System ID, Tracking Code, departments, expenses<|end|><|user|>Show departments in increasing order of expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Request ID, Sync Status, Tracking Code, products, profit<|end|><|user|>Rank products by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Origin System, Retry Count, Timestamp Created, employees, revenue<|end|><|user|>Sort employees by revenue in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Internal Notes, Request ID, Workflow Step, customers, rating<|end|><|user|>Display customers in order of decreasing rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Last Modified By, Processing Time, Timestamp Created, sales, stores<|end|><|user|>Sort stores by sales in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Run ID, Sync Status, System ID, customers, sales<|end|><|user|>Find top 3 customers with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Release Version, Reviewer Comments, Source File Name, departments, expenses<|end|><|user|>Show departments in increasing order of expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Processing Time, Request ID, Tracking Code, customers, profit<|end|><|user|>Find top 3 customers with highest profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Manual Override, Validation Notes, Workflow Step, expenses, products<|end|><|user|>Rank products by expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['expenses_rank'] = df['expenses'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Processing Time, Project Tag, Response Time (ms), Run ID, sales, stores<|end|><|user|>Show stores sorted by sales ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Internal Notes, Processing Time, Request ID, customers, rating<|end|><|user|>List the lowest rating values grouped by customers.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Manual Override, Source File Name, Workflow Step, employees, expenses<|end|><|user|>List the lowest expenses values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Reviewer Comments, Run ID, Validation Notes, expenses, stores<|end|><|user|>Sort stores by expenses in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Processing Time, Response Time (ms), Sync Status, sales, stores<|end|><|user|>Find top 3 stores with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Flagged Reason, System ID, products, sales<|end|><|user|>Get bottom 10 products based on sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Retry Count, Sync Status, Workflow Step, sales, stores<|end|><|user|>Find top 2 stores with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Internal Notes, Project Tag, System ID, employees, units_sold<|end|><|user|>Sort employees by units_sold in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Retry Count, Reviewer Comments, Session Token, profit, stores<|end|><|user|>Get bottom 10 stores based on profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Project Tag, Sync Status, Timestamp Created, customers, profit<|end|><|user|>Rank customers by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Last Modified By, Origin System, Timestamp Created, employees, profit<|end|><|user|>List the lowest profit values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Project Tag, Retry Count, Timestamp Created, stores, units_sold<|end|><|user|>Sort stores by units_sold in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Manual Override, Project Tag, Response Time (ms), Retry Count, departments, sales<|end|><|user|>Display departments in order of decreasing sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Release Version, Response Time (ms), Retry Count, Validation Notes, employees, profit<|end|><|user|>Rank employees by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Project Tag, Response Time (ms), Session Token, Workflow Step, employees, rating<|end|><|user|>Show employees in increasing order of rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Manual Override, Project Tag, Timestamp Created, Workflow Step, departments, units_sold<|end|><|user|>Sort departments by units_sold in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Document Ref, Manual Override, Project Tag, products, profit<|end|><|user|>Rank products by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Response Time (ms), Reviewer Comments, Source File Name, Tracking Code, employees, sales<|end|><|user|>Find top 2 employees with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Manual Override, System ID, Tracking Code, expenses, products<|end|><|user|>Show products in increasing order of expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Archived Flag, Reviewer Comments, Tracking Code, customers, sales<|end|><|user|>Show customers sorted by sales ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Backup ID, Project Tag, System ID, departments, revenue<|end|><|user|>List top 5 departments by revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Manual Override, Response Time (ms), Source File Name, customers, revenue<|end|><|user|>Get bottom 10 customers based on revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Session Token, Tracking Code, Validation Notes, customers, revenue<|end|><|user|>Sort customers by revenue in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Project Tag, Response Time (ms), Source File Name, Workflow Step, employees, revenue<|end|><|user|>List the lowest revenue values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, System ID, Timestamp Created, Tracking Code, employees, units_sold<|end|><|user|>Rank employees by units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['units_sold_rank'] = df['units_sold'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Manual Override, Session Token, Source File Name, departments, revenue<|end|><|user|>List top 5 departments by revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Run ID, System ID, Workflow Step, customers, rating<|end|><|user|>Get bottom 10 customers based on rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Manual Override, Run ID, Sync Status, Tracking Code, expenses, products<|end|><|user|>Get bottom 10 products based on expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Manual Override, Reviewer Comments, System ID, employees, sales<|end|><|user|>List top 5 employees by sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Processing Time, Reviewer Comments, Validation Notes, customers, revenue<|end|><|user|>10 customers with most revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Release Version, Retry Count, Tracking Code, Workflow Step, profit, stores<|end|><|user|>stores sorted top by profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Internal Notes, Project Tag, Source File Name, Workflow Step, products, ratings<|end|><|user|>show top 20 products by ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Flagged Reason, Origin System, Release Version, profit, stores<|end|><|user|>list 10 stores having low to high profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Environment Name, Release Version, Validation Notes, categories, orders<|end|><|user|>categories sorted least by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Response Time (ms), Timestamp Created, Workflow Step, customers, revenue<|end|><|user|>get top 20 customers increasing revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Release Version, Reviewer Comments, Timestamp Created, Validation Notes, categories, orders<|end|><|user|>list 5 categories having decreasing orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Project Tag, Release Version, Run ID, Timestamp Created, customers, revenue<|end|><|user|>show top 20 customers by revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Audit Trail, Batch Number, Run ID, profit, stores<|end|><|user|>get top 10 stores bottom profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Project Tag, Source File Name, Workflow Step, products, ratings<|end|><|user|>organize products by ratings (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Release Version, Run ID, Timestamp Created, employees, sales<|end|><|user|>list 20 employees having increasing sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Release Version, System ID, Validation Notes, categories, orders<|end|><|user|>sort categories by orders in bottom order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Release Version, Request ID, Reviewer Comments, System ID, profit, stores<|end|><|user|>arrange all stores according to most profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Last Modified By, Reviewer Comments, Workflow Step, products, ratings<|end|><|user|>get top 3 products greatest ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Retry Count, Sync Status, Timestamp Created, customers, revenue<|end|><|user|>get top 20 customers highest revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Source File Name, Timestamp Created, customers, revenue<|end|><|user|>customers sorted most by revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Internal Notes, Retry Count, System ID, categories, orders<|end|><|user|>categories sorted bottom by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Release Version, Session Token, System ID, Tracking Code, employees, sales<|end|><|user|>employees sorted most by sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Retry Count, Session Token, Timestamp Created, Workflow Step, employees, units_sold<|end|><|user|>employees sorted low to high by units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Flagged Reason, Last Modified By, Timestamp Created, products, ratings<|end|><|user|>show top 20 products by ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Retry Count, Run ID, Session Token, Source File Name, employees, sales<|end|><|user|>3 employees with greatest sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Manual Override, Processing Time, Tracking Code, customers, revenue<|end|><|user|>customers sorted bottom by revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Release Version, Reviewer Comments, Sync Status, employees, sales<|end|><|user|>5 employees with greatest sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Retry Count, Source File Name, employees, sales<|end|><|user|>show top 5 employees by sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Manual Override, Source File Name, Sync Status, products, ratings<|end|><|user|>organize products by ratings (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Error Code, Session Token, Source File Name, categories, orders<|end|><|user|>categories sorted ascending by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Release Version, Response Time (ms), Retry Count, Reviewer Comments, categories, orders<|end|><|user|>categories sorted top by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Processing Time, Retry Count, System ID, employees, sales<|end|><|user|>show top 10 employees by sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Error Code, Last Modified By, Source File Name, customers, revenue<|end|><|user|>customers sorted descending by revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Origin System, Project Tag, Timestamp Created, Tracking Code, customers, revenue<|end|><|user|>arrange all customers according to low to high revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Document Ref, Reviewer Comments, Validation Notes, categories, orders<|end|><|user|>get top 10 categories bottom orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Internal Notes, Run ID, System ID, profit, stores<|end|><|user|>order stores based on profit (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Manual Override, Origin System, Retry Count, products, ratings<|end|><|user|>order products based on ratings (greatest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Processing Time, Session Token, System ID, Timestamp Created, employees, units_sold<|end|><|user|>3 employees with least units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Manual Override, Sync Status, Validation Notes, employees, units_sold<|end|><|user|>get top 5 employees decreasing units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Request ID, Reviewer Comments, Session Token, Validation Notes, profit, stores<|end|><|user|>organize stores by profit (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Reviewer Comments, Sync Status, System ID, Tracking Code, profit, stores<|end|><|user|>sort stores by profit in least order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Request ID, Reviewer Comments, Sync Status, profit, stores<|end|><|user|>arrange all stores according to high to low profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Run ID, Validation Notes, Workflow Step, employees, units_sold<|end|><|user|>organize employees by units_sold (greatest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Project Tag, Source File Name, Timestamp Created, Tracking Code, Workflow Step, categories, orders<|end|><|user|>sort categories by orders in most order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Document Ref, Run ID, Validation Notes, employees, sales<|end|><|user|>get top 5 employees top sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Retry Count, Run ID, Timestamp Created, products, ratings<|end|><|user|>order products based on ratings (most)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Manual Override, Request ID, Session Token, products, ratings<|end|><|user|>organize products by ratings (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Origin System, Request ID, Timestamp Created, categories, orders<|end|><|user|>order categories based on orders (descending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Environment Name, Processing Time, System ID, employees, sales<|end|><|user|>list 5 employees having least sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Retry Count, Sync Status, Tracking Code, employees, units_sold<|end|><|user|>arrange all employees according to decreasing units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Processing Time, Project Tag, Source File Name, Sync Status, employees, sales<|end|><|user|>get top 20 employees highest sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Internal Notes, Manual Override, Session Token, profit, stores<|end|><|user|>display 3 stores sorted by profit (ascending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Document Ref, Project Tag, Request ID, customers, revenue<|end|><|user|>arrange all customers according to low to high revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Response Time (ms), Run ID, Sync Status, System ID, Timestamp Created, employees, sales<|end|><|user|>employees sorted least by sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Processing Time, Request ID, Reviewer Comments, customers, revenue<|end|><|user|>10 customrs with most Revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Processing Time, Release Version, Response Time (ms), Sync Status, profit, stores<|end|><|user|>STORES sorted top by Profitt<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Release Version, Reviewer Comments, System ID, products, ratings<|end|><|user|>show top 20 PRODUCTS by RATINGS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Request ID, Source File Name, System ID, profit, stores<|end|><|user|>list 10 Storez having low to high PROFIT<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Flagged Reason, Project Tag, Tracking Code, categories, orders<|end|><|user|>categores sorted least by ORDERS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Origin System, Request ID, Reviewer Comments, Source File Name, customers, revenue<|end|><|user|>get top 20 customrs increasing REVENUE<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Release Version, Reviewer Comments, Sync Status, categories, orders<|end|><|user|>list 5 categores having decreasing odders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Project Tag, Response Time (ms), Retry Count, customers, revenue<|end|><|user|>show top 20 customrs by REVENUE<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Retry Count, Reviewer Comments, Timestamp Created, Tracking Code, Workflow Step, profit, stores<|end|><|user|>get top 10 Storez bottom proffit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Last Modified By, Project Tag, Workflow Step, products, ratings<|end|><|user|>organize productz by raatings (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Manual Override, Release Version, Retry Count, Run ID, employees, sales<|end|><|user|>list 20 empoyees having increasing sails<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Project Tag, Source File Name, Timestamp Created, categories, orders<|end|><|user|>sort CategorieS by Orderz in bottom order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Retry Count, Run ID, Tracking Code, profit, stores<|end|><|user|>arrange all stoers according to most PROFIT<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Session Token, Source File Name, Tracking Code, products, ratings<|end|><|user|>get top 3 PRODUCTS greatest RATINGS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, System ID, Tracking Code, Validation Notes, Workflow Step, customers, revenue<|end|><|user|>get top 20 custmers highest Revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Document Ref, Flagged Reason, Origin System, customers, revenue<|end|><|user|>CustomerS sorted most by reveneu<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Project Tag, Retry Count, Tracking Code, categories, orders<|end|><|user|>CategorieS sorted bottom by ORDERS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Project Tag, Retry Count, Reviewer Comments, Tracking Code, employees, sales<|end|><|user|>empoyees sorted most by Sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Origin System, Reviewer Comments, Source File Name, Workflow Step, employees, units_sold<|end|><|user|>EMPLoyees sorted low to high by unit_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Manual Override, Processing Time, Session Token, products, ratings<|end|><|user|>show top 20 PRODUCTS by ratingz<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Last Modified By, Session Token, Workflow Step, employees, sales<|end|><|user|>3 empoyees with greatest sails<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Reviewer Comments, Run ID, Source File Name, Validation Notes, customers, revenue<|end|><|user|>customrs sorted bottom by Revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Origin System, Source File Name, System ID, employees, sales<|end|><|user|>5 empoyees with greatest SALES<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Audit Trail, Last Modified By, Processing Time, employees, sales<|end|><|user|>show top 5 EMPLoyees by SALES<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Internal Notes, Workflow Step, products, ratings<|end|><|user|>organize PRODUCTS by RATINGS (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Manual Override, Release Version, Workflow Step, categories, orders<|end|><|user|>categores sorted ascending by odders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Manual Override, Processing Time, Reviewer Comments, Run ID, categories, orders<|end|><|user|>categoriess sorted top by ORDERS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Manual Override, Tracking Code, Validation Notes, employees, sales<|end|><|user|>show top 10 empoyees by Sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Origin System, Processing Time, Project Tag, Reviewer Comments, customers, revenue<|end|><|user|>CustomerS sorted descending by REVENUE<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Release Version, Source File Name, Tracking Code, customers, revenue<|end|><|user|>arrange all custmers according to low to high reveneu<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Reviewer Comments, Source File Name, System ID, categories, orders<|end|><|user|>show top eight categories by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True).head(8)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Release Version, Request ID, Timestamp Created, profit, stores<|end|><|user|>list two stores having most profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Manual Override, Release Version, Source File Name, Tracking Code, employees, units_sold<|end|><|user|>show top two employees by units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Retry Count, Sync Status, Timestamp Created, employees, units_sold<|end|><|user|>three employees with bottom units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Response Time (ms), Reviewer Comments, Tracking Code, employees, units_sold<|end|><|user|>list three employees having greatest units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Release Version, Retry Count, Reviewer Comments, Timestamp Created, employees, units_sold<|end|><|user|>display five employees sorted by units_sold (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Response Time (ms), Reviewer Comments, System ID, Timestamp Created, employees, units_sold<|end|><|user|>display fifty employees sorted by units_sold (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(50)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Origin System, Project Tag, Sync Status, Workflow Step, employees, units_sold<|end|><|user|>eight employees with smallest units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(8)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Internal Notes, Last Modified By, Request ID, employees, sales<|end|><|user|>list four employees having least sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Internal Notes, System ID, Validation Notes, categories, orders<|end|><|user|>display nine categories sorted by orders (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True).head(9)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Manual Override, Origin System, Retry Count, Run ID, products, ratings<|end|><|user|>display twenty products sorted by ratings (decreasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Document Ref, Run ID, Validation Notes, employees, sales<|end|><|user|>display six employees sorted by sales (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Error Code, Internal Notes, Timestamp Created, employees, units_sold<|end|><|user|>display thirty employees sorted by units_sold (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(30)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Manual Override, Run ID, Session Token, products, ratings<|end|><|user|>five products with low to high ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Release Version, Reviewer Comments, Source File Name, Workflow Step, categories, orders<|end|><|user|>get top seven categories most orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Run ID, Session Token, employees, units_sold<|end|><|user|>show top twenty employees by units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Last Modified By, Run ID, Validation Notes, employees, units_sold<|end|><|user|>display fifty employees sorted by units_sold (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(50)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Project Tag, Reviewer Comments, Run ID, Source File Name, employees, sales<|end|><|user|>list seven employees having ascending sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Source File Name, Sync Status, System ID, products, ratings<|end|><|user|>get top four products least ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Request ID, Source File Name, Sync Status, Timestamp Created, profit, stores<|end|><|user|>show top six stores by profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Manual Override, Posting Updated, Response Time (ms), Reviewer Comments, Source File Name, jobs<|end|><|user|>display six entries sorted by Posting Updated (highest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Updated', ascending=False).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Session Token, Timestamp Created, Title Classification, jobs<|end|><|user|>sort jobs by Title Classification in low to high order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Title Classification', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Environment Name, Flagged Reason, Run ID, Title Classification, jobs<|end|><|user|>list three jobs with highest Title Classification<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Title Classification', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Division/Work Unit, Document Ref, Processing Time, Retry Count, System ID, jobs<|end|><|user|>arrange job entries according to highest Division/Work Unit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Division/Work Unit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Full-Time/Part-Time indicator, Project Tag, Response Time (ms), Timestamp Created, Workflow Step, jobs<|end|><|user|>arrange job entries according to decreasing Full-Time/Part-Time indicator<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Full-Time/Part-Time indicator', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Release Version, Residency Requirement, Reviewer Comments, System ID, jobs<|end|><|user|>display nine entries sorted by Residency Requirement (highest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Residency Requirement', ascending=False).head(9)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Posting Date, Retry Count, Session Token, Timestamp Created, jobs<|end|><|user|>display five entries sorted by Posting Date (low to high)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Date', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Post Until, Project Tag, Response Time (ms), Retry Count, Timestamp Created, jobs<|end|><|user|>organize postings by Post Until descending<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Post Until', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Post Until, Processing Time, System ID, Tracking Code, Validation Notes, jobs<|end|><|user|>sort jobs by Post Until in top order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Post Until', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Internal Notes, Salary Range To, System ID, Timestamp Created, jobs<|end|><|user|>organize postings by Salary Range To increasing<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range To', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Division/Work Unit, Last Modified By, Run ID, Sync Status, Validation Notes, Workflow Step, jobs<|end|><|user|>display two entries sorted by Division/Work Unit (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Division/Work Unit', ascending=True).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Posting Date, Reviewer Comments, Session Token, System ID, jobs<|end|><|user|>display eight entries sorted by Posting Date (smallest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Date', ascending=True).head(8)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Error Code, Origin System, Project Tag, Salary Range From, jobs<|end|><|user|>list seven jobs with bottom Salary Range From<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range From', ascending=True).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Origin System, Posting Updated, Project Tag, Timestamp Created, jobs<|end|><|user|>display seven entries sorted by Posting Updated (descending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Updated', ascending=False).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Last Modified By, Preferred Skills, Project Tag, System ID, jobs<|end|><|user|>thirty job postings with top Preferred Skills<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Preferred Skills', ascending=False).head(30)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Release Version, Response Time (ms), Salary Range From, Timestamp Created, jobs<|end|><|user|>four job postings with increasing Salary Range From<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range From', ascending=True).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Environment Name, Recruitment Contact, Session Token, Workflow Step, jobs<|end|><|user|>organize postings by Recruitment Contact least<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Recruitment Contact', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Response Time (ms), Tracking Code, Validation Notes, Work Location 1, jobs<|end|><|user|>list four jobs with high to low Work Location 1<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Work Location 1', ascending=False).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Request ID, Retry Count, Salary Range From, Tracking Code, jobs<|end|><|user|>sort jobs by Salary Range From in highest order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range From', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Minimum Qual Requirements, Origin System, Project Tag, Response Time (ms), Retry Count, jobs<|end|><|user|>list two jobs with most Minimum Qual Requirements<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Minimum Qual Requirements', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Job Category, Processing Time, Project Tag, Request ID, Response Time (ms), jobs<|end|><|user|>nine job postings with increasing Job Category<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Job Category', ascending=True).head(9)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Document Ref, Project Tag, Session Token, To Apply, jobs<|end|><|user|>sort jobs by To Apply in bottom order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='To Apply', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Project Tag, Recruitment Contact, Source File Name, Sync Status, jobs<|end|><|user|>forty job postings with ascending Recruitment Contact<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Recruitment Contact', ascending=True).head(40)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Manual Override, Release Version, Source File Name, Title Classification, jobs<|end|><|user|>display seven entries sorted by Title Classification (greatest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Title Classification', ascending=False).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Manual Override, Run ID, Title Code No, Tracking Code, jobs<|end|><|user|>organize postings by Title Code No most<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Title Code No', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Document Ref, Error Code, Manual Override, Processing Time, Workflow Step, jobs<|end|><|user|>show top two jobs by Civil Service Title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Civil Service Title', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Posting Date, Run ID, Timestamp Created, Workflow Step, jobs<|end|><|user|>organize postings by Posting Date descending<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Date', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Flagged Reason, Full-Time/Part-Time indicator, Reviewer Comments, Workflow Step, jobs<|end|><|user|>list ten jobs with top Full-Time/Part-Time indicator<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Full-Time/Part-Time indicator', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Residency Requirement, Retry Count, Reviewer Comments, System ID, Timestamp Created, jobs<|end|><|user|>display four entries sorted by Residency Requirement (descending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Residency Requirement', ascending=False).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Origin System, Preferred Skills, Sync Status, Workflow Step, jobs<|end|><|user|>show top six jobs by Preferred Skills<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Preferred Skills', ascending=True).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Sync Status, Timestamp Created, Tracking Code, Work Location 1, jobs<|end|><|user|>display six entries sorted by Work Location 1 (most)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Work Location 1', ascending=False).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Backup ID, Flagged Reason, Processing Time, Salary Frequency, jobs<|end|><|user|>order jobs based on Salary Frequency (ascending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Frequency', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Full-Time/Part-Time indicator, Last Modified By, Session Token, Sync Status, jobs<|end|><|user|>show top three jobs by Full-Time/Part-Time indicator<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Full-Time/Part-Time indicator', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Response Time (ms), Validation Notes, Work Location 1, Workflow Step, jobs<|end|><|user|>twenty job postings with ascending Work Location 1<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Work Location 1', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Manual Override, Retry Count, Salary Frequency, System ID, jobs<|end|><|user|>sort jobs by Salary Frequency in increasing order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Frequency', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Document Ref, Request ID, Salary Frequency, Session Token, jobs<|end|><|user|>show top forty jobs by Salary Frequency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Frequency', ascending=False).head(40)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Manual Override, Salary Range To, Sync Status, System ID, jobs<|end|><|user|>order jobs based on Salary Range To (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range To', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Job Category, Response Time (ms), Reviewer Comments, Tracking Code, jobs<|end|><|user|>arrange job entries according to descending Job Category<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Job Category', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Project Tag, Release Version, Salary Range To, Session Token, jobs<|end|><|user|>sort jobs by Salary Range To in least order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range To', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Batch Number, Document Ref, Job Description, Request ID, jobs<|end|><|user|>show top twenty jobs by Job Description<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Job Description', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Origin System, Processing Time, Session Token, Timestamp Created, email<|end|><|user|>Get rows where email field has the substring 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Retry Count, Reviewer Comments, Tracking Code, city<|end|><|user|>Find all values in city that end with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Flagged Reason, Response Time (ms), Tracking Code, product_name<|end|><|user|>List all records where product_name includes 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Flagged Reason, Reviewer Comments, customer_name<|end|><|user|>Get rows where customer_name field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Manual Override, Origin System, Retry Count, System ID, category<|end|><|user|>Find all values in category that end with 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.endswith('Manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Internal Notes, Release Version, Timestamp Created, product_name<|end|><|user|>Filter rows where product_name contains 'Service' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Internal Notes, Reviewer Comments, Source File Name, Workflow Step, customer_name<|end|><|user|>Filter rows where customer_name contains 'Service' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Retry Count, Reviewer Comments, Timestamp Created, city<|end|><|user|>List all records where city includes 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, System ID, Timestamp Created, Tracking Code, city<|end|><|user|>Filter rows where city contains 'Store' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Run ID, Source File Name, System ID, Workflow Step, category<|end|><|user|>Find category values that contain 'Pro' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Manual Override, Session Token, System ID, Timestamp Created, customer_name<|end|><|user|>List records where customer_name begins with 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('Inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Timestamp Created, Validation Notes, Workflow Step, department<|end|><|user|>List all records where department includes 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Environment Name, Flagged Reason, category<|end|><|user|>Get rows where category field has the substring 'sales'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Response Time (ms), System ID, Workflow Step, department<|end|><|user|>Get rows where department field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Document Ref, Response Time (ms), Run ID, product_name<|end|><|user|>Get rows where product_name field has the substring 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Request ID, Reviewer Comments, Workflow Step, customer_name<|end|><|user|>Find customer_name values that contain 'Manager' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Processing Time, Response Time (ms), Session Token, Source File Name, city<|end|><|user|>List all records where city includes 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Project Tag, Request ID, Run ID, email<|end|><|user|>Filter rows where email contains 'North' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('North', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Origin System, Project Tag, Source File Name, city<|end|><|user|>List records where city begins with 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('Manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Response Time (ms), Retry Count, Sync Status, Tracking Code, city<|end|><|user|>List records where city begins with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Project Tag, Response Time (ms), System ID, city<|end|><|user|>Get rows where city field has the substring 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Environment Name, Flagged Reason, Retry Count, customer_name<|end|><|user|>Find customer_name values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Release Version, Sync Status, Timestamp Created, Tracking Code, city<|end|><|user|>List all records where city includes 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Request ID, Response Time (ms), Run ID, department<|end|><|user|>List records where department begins with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Processing Time, Run ID, Timestamp Created, Workflow Step, customer_name<|end|><|user|>List all records where customer_name includes 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Error Code, Processing Time, Retry Count, System ID, department<|end|><|user|>Find department values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Environment Name, Tracking Code, Validation Notes, category<|end|><|user|>List records where category begins with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Run ID, System ID, Timestamp Created, customer_name<|end|><|user|>Get rows where customer_name starts with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Release Version, System ID, Workflow Step, city<|end|><|user|>List all records where city includes 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Last Modified By, Manual Override, Validation Notes, Workflow Step, product_name<|end|><|user|>Find product_name values that contain 'North' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('North', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Release Version, Retry Count, Reviewer Comments, Workflow Step, city<|end|><|user|>Show entries where city ends with 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('Pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Project Tag, Release Version, Source File Name, category<|end|><|user|>Find all category that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Error Code, Origin System, Run ID, department<|end|><|user|>Show entries where department ends with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Origin System, Retry Count, Sync Status, product_name<|end|><|user|>Get rows where product_name starts with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Error Code, Run ID, Workflow Step, email<|end|><|user|>Find email values that contain 'Service' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Reviewer Comments, Source File Name, Validation Notes, city<|end|><|user|>Get rows where city field has the substring 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Internal Notes, Origin System, Response Time (ms), city<|end|><|user|>Find all city that contain the word 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Flagged Reason, Release Version, Session Token, product_name<|end|><|user|>Get rows where product_name starts with 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Retry Count, Reviewer Comments, Source File Name, Timestamp Created, product_name<|end|><|user|>Get rows where product_name field has the substring 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Reviewer Comments, Run ID, Tracking Code, customer_name<|end|><|user|>Find all customer_name that contain the word 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Origin System, Project Tag, Validation Notes, city<|end|><|user|>Find all values in city that end with 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('Inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Document Ref, Error Code, Origin System, product_name<|end|><|user|>List all records where product_name includes 'North'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('North', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Origin System, Run ID, Timestamp Created, Validation Notes, category<|end|><|user|>Find all entries with category matching 'Store' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'] == 'Store']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Internal Notes, Response Time (ms), Sync Status, customer_name<|end|><|user|>Find all values in customer_name that end with 'North'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.endswith('North', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Release Version, Session Token, Sync Status, System ID, Tracking Code, email<|end|><|user|>Find all entries with email matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Processing Time, Project Tag, Sync Status, Tracking Code, category<|end|><|user|>Find category values that contain 'Manager' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Internal Notes, Release Version, Run ID, Workflow Step, category<|end|><|user|>Find category values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Request ID, Retry Count, Timestamp Created, Validation Notes, category<|end|><|user|>Find all category that contain the word 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Processing Time, Project Tag, Session Token, Validation Notes, department<|end|><|user|>List all records where department includes 'sales'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Error Code, Project Tag, Retry Count, Session Token, department<|end|><|user|>Find department values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Project Tag, Tracking Code, Validation Notes, Workflow Step, customer_name<|end|><|user|>Show entries where customer_name ends with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.endswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Project Tag, Response Time (ms), Retry Count, Sync Status, product_name<|end|><|user|>List records where product_name begins with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Environment Name, Tracking Code, Validation Notes, email<|end|><|user|>Find all email that contain the word 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Last Modified By, Processing Time, Session Token, Validation Notes, email<|end|><|user|>Find all values in email that end with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Last Modified By, Tracking Code, Validation Notes, customer_name<|end|><|user|>Find all customer_name that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Last Modified By, Source File Name, Validation Notes, department<|end|><|user|>Find department values that contain 'Service' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Session Token, Tracking Code, Validation Notes, department<|end|><|user|>Get rows where department starts with 'sales'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Internal Notes, Request ID, Response Time (ms), department<|end|><|user|>Find department values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Project Tag, Validation Notes, Workflow Step, email<|end|><|user|>List all records where email includes 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Session Token, System ID, Timestamp Created, customer_name<|end|><|user|>List records where customer_name begins with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Error Code, Manual Override, Origin System, System ID, customer_name<|end|><|user|>Find customer_name values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Last Modified By, Source File Name, Workflow Step, customer_name<|end|><|user|>Find all customer_name that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Manual Override, Origin System, Project Tag, Run ID, department<|end|><|user|>Find all values in department that end with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Request ID, Source File Name, Workflow Step, email<|end|><|user|>Find email values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Last Modified By, Release Version, Response Time (ms), Retry Count, department<|end|><|user|>Get rows where department field has the substring 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Flagged Reason, Project Tag, Session Token, city<|end|><|user|>Find all entries with city matching 'North' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'] == 'North']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Processing Time, System ID, Workflow Step, email<|end|><|user|>List records where email begins with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Internal Notes, Last Modified By, Release Version, Timestamp Created, category<|end|><|user|>Get rows where category starts with 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.startswith('Pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Request ID, Sync Status, Validation Notes, Workflow Step, department<|end|><|user|>Find all entries with department matching 'com' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'] == 'com']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Manual Override, Origin System, Retry Count, Sync Status, city<|end|><|user|>Find all values in city that end with 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('Pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Origin System, Response Time (ms), Workflow Step, customer_name<|end|><|user|>Get rows where customer_name starts with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Origin System, Project Tag, Request ID, Response Time (ms), Reviewer Comments, product_name<|end|><|user|>Find all values in product_name that end with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Run ID, Sync Status, Tracking Code, product_name<|end|><|user|>Find all values in product_name that end with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Last Modified By, Manual Override, Release Version, category<|end|><|user|>Get rows where category field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Retry Count, Run ID, Session Token, System ID, Validation Notes, customer_name<|end|><|user|>Find customer_name values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Project Tag, Run ID, Validation Notes, department<|end|><|user|>Find all entries with department matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Reviewer Comments, Sync Status, Timestamp Created, email<|end|><|user|>Get rows where email starts with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Environment Name, Manual Override, Timestamp Created, city<|end|><|user|>Find all entries with city matching 'com' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'] == 'com']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Processing Time, Reviewer Comments, Run ID, Validation Notes, customer_name<|end|><|user|>Get rows where customer_name starts with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Release Version, Retry Count, Source File Name, department<|end|><|user|>Find all entries with department matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Release Version, Retry Count, Sync Status, department<|end|><|user|>Find department values that contain 'Manager' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Backup ID, Retry Count, Source File Name, product_name<|end|><|user|>List records where product_name begins with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Reviewer Comments, Run ID, System ID, city<|end|><|user|>Get rows where city starts with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Internal Notes, Response Time (ms), Tracking Code, Validation Notes, product_name<|end|><|user|>Filter rows where product_name contains 'Manager' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Response Time (ms), Session Token, System ID, product_name<|end|><|user|>List records where product_name begins with 'North'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('North', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Last Modified By, Timestamp Created, Workflow Step, email<|end|><|user|>Get rows where email field has the substring 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Manual Override, Release Version, System ID, category<|end|><|user|>List all records where category includes 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Response Time (ms), Run ID, Session Token, email<|end|><|user|>Find all values in email that end with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Source File Name, System ID, Timestamp Created, Tracking Code, customer_name<|end|><|user|>Find all customer_name that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Processing Time, Response Time (ms), System ID, Tracking Code, customer_name<|end|><|user|>List records where customer_name begins with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Manual Override, Release Version, Source File Name, department<|end|><|user|>Get rows where department field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Flagged Reason, Origin System, Request ID, product_name<|end|><|user|>Get rows where product_name starts with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Error Code, Request ID, Response Time (ms), department<|end|><|user|>List all records where department includes 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Processing Time, Reviewer Comments, Run ID, Tracking Code, category<|end|><|user|>Find category values that contain 'Pro' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Session Token, Tracking Code, Validation Notes, email<|end|><|user|>List records where email begins with 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('Inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Processing Time, Tracking Code, Validation Notes, product_name<|end|><|user|>List all records where product_name includes 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Project Tag, Retry Count, Timestamp Created, department<|end|><|user|>Get rows where department starts with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Processing Time, Project Tag, Reviewer Comments, Session Token, department<|end|><|user|>Get rows where department field has the substring 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Flagged Reason, Manual Override, Validation Notes, department<|end|><|user|>List records where department begins with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Project Tag, Release Version, Timestamp Created, email<|end|><|user|>Find all entries with email matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Internal Notes, Last Modified By, Reviewer Comments, company_name<|end|><|user|>find company_name ending in Sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Sync Status, System ID, Timestamp Created, email<|end|><|user|>find email ending in salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Manual Override, Request ID, Retry Count, department<|end|><|user|>department has 'managr' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Flagged Reason, Processing Time, Release Version, product_name<|end|><|user|>product_name has word salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Manual Override, Reviewer Comments, Sync Status, Timestamp Created, city<|end|><|user|>city has 'Manager' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Origin System, Session Token, Validation Notes, product_name<|end|><|user|>get records with product_name beginning as Tech<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Retry Count, Source File Name, Tracking Code, product_name<|end|><|user|>get values with product_name trailing with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Processing Time, Retry Count, Session Token, Validation Notes, email<|end|><|user|>find rows where email includes 'Manager'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Request ID, Session Token, Sync Status, email<|end|><|user|>email has word mngr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Internal Notes, Manual Override, Release Version, Tracking Code, job_title<|end|><|user|>get records with job_title beginning as mngr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Run ID, Sync Status, Tracking Code, city<|end|><|user|>show rows where city starts with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Manual Override, Sync Status, Tracking Code, product_name<|end|><|user|>product_name field holds value support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('support', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Error Code, Retry Count, Timestamp Created, Tracking Code, city<|end|><|user|>city has word hiringg<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Sync Status, System ID, Validation Notes, email<|end|><|user|>find email ending in dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Response Time (ms), Retry Count, Workflow Step, product_name<|end|><|user|>get values with product_name trailing with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Release Version, Sync Status, Workflow Step, job_title<|end|><|user|>get values with job_title trailing with inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Release Version, Session Token, Sync Status, System ID, Timestamp Created, email<|end|><|user|>find rows where email includes 'manager'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Origin System, Processing Time, Tracking Code, job_title<|end|><|user|>get records with job_title beginning as pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Response Time (ms), Session Token, Validation Notes, product_name<|end|><|user|>find product_name ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Processing Time, Project Tag, Release Version, department<|end|><|user|>find department ending in support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Project Tag, Release Version, Reviewer Comments, Tracking Code, department<|end|><|user|>list where department ends with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Run ID, Source File Name, System ID, Workflow Step, city<|end|><|user|>show rows where city starts with sup<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Last Modified By, Processing Time, Timestamp Created, job_title<|end|><|user|>job_title has word managr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Document Ref, Retry Count, Sync Status, city<|end|><|user|>list where city ends with hiringg<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Run ID, Sync Status, Timestamp Created, department<|end|><|user|>department field begins with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Manual Override, Source File Name, Tracking Code, Validation Notes, city<|end|><|user|>find city ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Processing Time, System ID, Timestamp Created, job_title<|end|><|user|>job_title field begins with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Origin System, Project Tag, Sync Status, Workflow Step, department<|end|><|user|>find department ending in managr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Manual Override, Reviewer Comments, Validation Notes, email<|end|><|user|>get values with email trailing with manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Batch Number, Environment Name, Error Code, company_name<|end|><|user|>list where company_name ends with .COM<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Origin System, Release Version, Tracking Code, city<|end|><|user|>find rows where city includes 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Backup ID, Error Code, Tracking Code, city<|end|><|user|>find city ending in support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Release Version, Response Time (ms), Retry Count, Source File Name, department<|end|><|user|>list where department ends with Hiring<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Document Ref, Error Code, Validation Notes, department<|end|><|user|>show all department with tech in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Request ID, Validation Notes, Workflow Step, product_name<|end|><|user|>find rows where product_name includes 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Internal Notes, Retry Count, Validation Notes, job_title<|end|><|user|>job_title has 'mngr' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Run ID, Sync Status, Validation Notes, product_name<|end|><|user|>product_name has word INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Run ID, Sync Status, Validation Notes, email<|end|><|user|>show rows where email starts with sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Flagged Reason, Retry Count, Workflow Step, product_name<|end|><|user|>get records with product_name beginning as TECH<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Manual Override, Project Tag, Reviewer Comments, department<|end|><|user|>find department ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Origin System, Reviewer Comments, Session Token, System ID, email<|end|><|user|>get records with email beginning as Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Internal Notes, Manual Override, Source File Name, job_title<|end|><|user|>job_title has 'hire' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Retry Count, Validation Notes, Workflow Step, company_name<|end|><|user|>company_name field holds value Sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Response Time (ms), Reviewer Comments, Tracking Code, Workflow Step, department<|end|><|user|>show rows where department starts with pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Request ID, Sync Status, Timestamp Created, department<|end|><|user|>department has word inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Origin System, Response Time (ms), Validation Notes, email<|end|><|user|>show rows where email starts with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Processing Time, Timestamp Created, Workflow Step, product_name<|end|><|user|>get values with product_name trailing with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Flagged Reason, Response Time (ms), Sync Status, product_name<|end|><|user|>find product_name ending in Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Origin System, Project Tag, Release Version, Workflow Step, product_name<|end|><|user|>product_name field begins with TECH<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Environment Name, Project Tag, Retry Count, department<|end|><|user|>get entries if department contains .com<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Last Modified By, Manual Override, Source File Name, product_name<|end|><|user|>get rows where product_name does not contain 'suport'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('suport', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Last Modified By, Reviewer Comments, Timestamp Created, company_name<|end|><|user|>get rows where company_name does not contain '.COM'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['company_name'].str.contains('.COM', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Last Modified By, Session Token, Validation Notes, email<|end|><|user|>find email having 'tech' and company_name with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Project Tag, System ID, Tracking Code, product_name<|end|><|user|>get rows where product_name does not contain 'tek'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('tek', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Release Version, Retry Count, Tracking Code, department<|end|><|user|>find department having 'support' and job_title with 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Processing Time, Project Tag, Request ID, Timestamp Created, company_name<|end|><|user|>get rows where company_name does not contain 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['company_name'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Request ID, Run ID, Sync Status, Timestamp Created, company_name<|end|><|user|>find company_name having 'salez' and product_name with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Manual Override, Reviewer Comments, System ID, Tracking Code, department<|end|><|user|>find department having 'salez' and email with 'sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Project Tag, Release Version, Validation Notes, product_name<|end|><|user|>get rows where product_name does not contain 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('Sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Processing Time, Release Version, Request ID, email<|end|><|user|>get rows where email does not contain 'support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['email'].str.contains('support', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Origin System, Request ID, System ID, department<|end|><|user|>list records where department has 'dotcom' or company_name has 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Request ID, Run ID, System ID, department<|end|><|user|>get rows where department does not contain 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('inc.', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Processing Time, Release Version, Source File Name, Validation Notes, job_title<|end|><|user|>find job_title having 'managr' and city with '.com'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Sync Status, System ID, Timestamp Created, Validation Notes, department<|end|><|user|>get rows where department does not contain 'tek'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('tek', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Error Code, Origin System, System ID, department<|end|><|user|>get rows where department does not contain 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Origin System, Reviewer Comments, Source File Name, product_name<|end|><|user|>get rows where product_name does not contain 'PRo'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('PRo', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Manual Override, Response Time (ms), Reviewer Comments, Sync Status, city<|end|><|user|>find city having 'dotcom' and product_name with 'pr0'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Release Version, Run ID, Sync Status, product_name<|end|><|user|>list records where product_name has 'Tech' or job_title has 'PRo'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Project Tag, Retry Count, Tracking Code, department<|end|><|user|>list records where department has '.com' or job_title has 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Document Ref, Flagged Reason, Tracking Code, job_title<|end|><|user|>list records where job_title has 'sup' or product_name has '.com'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Last Modified By, Project Tag, Request ID, Run ID, product_name<|end|><|user|>list records where product_name has 'support' or job_title has 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Processing Time, Project Tag, Source File Name, email<|end|><|user|>find email having 'salez' and job_title with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Response Time (ms), Session Token, Workflow Step, job_title<|end|><|user|>find job_title having 'mngr' and company_name with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Sync Status, System ID, Tracking Code, Validation Notes, job_title<|end|><|user|>list records where job_title has 'sales' or product_name has 'ink'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Response Time (ms), Run ID, Session Token, job_title<|end|><|user|>list records where job_title has '.COM' or email has 'pro'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Release Version, Salary Range To, Tracking Code, Validation Notes<|end|><|user|>list entries where Salary Range To has 'inc' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Civil Service Title, Origin System, Response Time (ms), Session Token, Validation Notes<|end|><|user|>show rows where Civil Service Title finishes with salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Civil Service Title'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Last Modified By, Level, Release Version, Tracking Code, Validation Notes<|end|><|user|>show records where Level begins with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Error Code, Request ID, Response Time (ms), Timestamp Created, Workflow Step<|end|><|user|>show records where Additional Information begins with sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Retry Count, Run ID, Salary Range To, Validation Notes<|end|><|user|>Salary Range To contains value sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Job Description, Last Modified By, Response Time (ms), Sync Status<|end|><|user|>find all where Job Description contains 'hire'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Job Description'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Flagged Reason, Release Version, Response Time (ms), Salary Range From<|end|><|user|>list entries where Salary Range From has '.com' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Civil Service Title, Flagged Reason, Retry Count, Session Token, Workflow Step<|end|><|user|>find all where Civil Service Title contains 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Run ID, Source File Name, Timestamp Created, Work Location 1<|end|><|user|>show records where Work Location 1 begins with ink<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Work Location 1'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Level, Reviewer Comments, System ID, Tracking Code<|end|><|user|>Level starts with 'support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Posting Updated, Processing Time, Sync Status, Workflow Step<|end|><|user|>Posting Updated ends with 'Support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Updated'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Audit Trail, Flagged Reason, Request ID, Retry Count, Workflow Step<|end|><|user|>Additional Information starts with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Manual Override, Origin System, Project Tag, Residency Requirement, Source File Name<|end|><|user|>show records where Residency Requirement begins with sup<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Residency Requirement'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Processing Time, Residency Requirement, Reviewer Comments, Sync Status<|end|><|user|>show records where Residency Requirement begins with sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Residency Requirement'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Approval Status, Flagged Reason, Last Modified By, Release Version, Response Time (ms)<|end|><|user|>Additional Information ends with 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Archived Flag, Audit Trail, Retry Count, Source File Name, Sync Status<|end|><|user|>Additional Information includes 'Pro'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Hours/Shift, Origin System, Run ID, Timestamp Created<|end|><|user|>list entries where Hours/Shift has 'pr0' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Level, Project Tag, Run ID, Source File Name, Timestamp Created<|end|><|user|>show records where Level begins with Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Internal Notes, Posting Date, Reviewer Comments, Workflow Step<|end|><|user|>show rows where Posting Date finishes with pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Date'].str.endswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Manual Override, Minimum Qual Requirements, Request ID, Retry Count, Reviewer Comments<|end|><|user|>Minimum Qual Requirements includes 'INC'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Career Level, Internal Notes, Last Modified By, Origin System, Timestamp Created<|end|><|user|>Career Level includes 'pr0'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Career Level'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Manual Override, Process Date, Processing Time, System ID<|end|><|user|>Process Date starts with 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Process Date'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Hours/Shift, Request ID, Reviewer Comments<|end|><|user|>Hours/Shift ends with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Flagged Reason, Level, Source File Name, Workflow Step<|end|><|user|>show records where Level begins with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Process Date, Processing Time, Request ID, Retry Count<|end|><|user|>Process Date ends with 'Hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Process Date'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Career Level, Environment Name, Session Token, Sync Status<|end|><|user|>show rows where Career Level finishes with inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Career Level'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Minimum Qual Requirements, Release Version, Response Time (ms), System ID<|end|><|user|>find all where Minimum Qual Requirements contains 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Document Ref, Full-Time/Part-Time indicator, Last Modified By, Origin System, Timestamp Created<|end|><|user|>Full-Time/Part-Time indicator starts with 'ink'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Job Description, Last Modified By, Origin System, Processing Time, Timestamp Created<|end|><|user|>Job Description starts with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Job Description'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Document Ref, Post Until, Processing Time, Source File Name<|end|><|user|>Post Until ends with 'sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Post Until'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Origin System, Project Tag, Reviewer Comments, Sync Status, Title Classification<|end|><|user|>Title Classification starts with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Title Classification'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Error Code, Internal Notes, Manual Override, Post Until<|end|><|user|>show rows where Post Until finishes with Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Post Until'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Flagged Reason, Hours/Shift, Request ID, Timestamp Created, Workflow Step<|end|><|user|>Hours/Shift ends with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Backup ID, Flagged Reason, Level, Source File Name<|end|><|user|>Level contains value pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Manual Override, Processing Time, Salary Frequency, Workflow Step<|end|><|user|>Salary Frequency ends with '.COM'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Frequency'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Project Tag, Timestamp Created, Title Classification, Workflow Step<|end|><|user|>Title Classification includes 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Title Classification'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Document Ref, Error Code, Run ID, Work Location 1, Workflow Step<|end|><|user|>Work Location 1 ends with 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Work Location 1'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Flagged Reason, Last Modified By, Level, Workflow Step<|end|><|user|>Level ends with 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Division/Work Unit, Document Ref, Project Tag, Response Time (ms), Run ID, Source File Name<|end|><|user|>Division/Work Unit starts with 'sells'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Division/Work Unit'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Origin System, Posting Updated, Sync Status, Workflow Step<|end|><|user|>Posting Updated ends with 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Updated'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Internal Notes, Reviewer Comments, Source File Name, Validation Notes, company_name<|end|><|user|>find company_name ending in Sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Last Modified By, Release Version, Response Time (ms), email<|end|><|user|>find email ending in salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Manual Override, Request ID, Retry Count, department<|end|><|user|>department has 'managr' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Manual Override, Run ID, Source File Name, product_name<|end|><|user|>product_name has word salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Backup ID, Run ID, Source File Name, city<|end|><|user|>city has 'Manager' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Processing Time, Release Version, Source File Name, Timestamp Created, product_name<|end|><|user|>get records with product_name beginning as Tech<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Origin System, Project Tag, Release Version, Sync Status, product_name<|end|><|user|>get values with product_name trailing with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Processing Time, Run ID, Source File Name, Timestamp Created, email<|end|><|user|>find rows where email includes 'Manager'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Document Ref, Manual Override, Response Time (ms), email<|end|><|user|>email has word mngr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Flagged Reason, System ID, Validation Notes, job_title<|end|><|user|>get records with job_title beginning as mngr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Processing Time, Run ID, Source File Name, Tracking Code, city<|end|><|user|>show rows where city starts with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Reviewer Comments, Run ID, Session Token, Source File Name, product_name<|end|><|user|>product_name field holds value support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('support', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Internal Notes, Project Tag, Validation Notes, city<|end|><|user|>city has word hiringg<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Release Version, Retry Count, Reviewer Comments, Sync Status, email<|end|><|user|>find email ending in dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Project Tag, Release Version, Response Time (ms), Tracking Code, product_name<|end|><|user|>get values with product_name trailing with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Project Tag, Retry Count, Source File Name, Workflow Step, job_title<|end|><|user|>get values with job_title trailing with inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Origin System, Processing Time, Request ID, Sync Status, email<|end|><|user|>find rows where email includes 'manager'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Response Time (ms), Run ID, System ID, job_title<|end|><|user|>get records with job_title beginning as pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Manual Override, Response Time (ms), Reviewer Comments, Sync Status, product_name<|end|><|user|>find product_name ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Release Version, Response Time (ms), Retry Count, Run ID, department<|end|><|user|>find department ending in support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Request ID, Reviewer Comments, System ID, Timestamp Created, department<|end|><|user|>list where department ends with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Internal Notes, Processing Time, Validation Notes, city<|end|><|user|>show rows where city starts with sup<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Internal Notes, Reviewer Comments, Timestamp Created, job_title<|end|><|user|>job_title has word managr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Error Code, Manual Override, Source File Name, Workflow Step, city<|end|><|user|>list where city ends with hiringg<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Internal Notes, Manual Override, Reviewer Comments, System ID, department<|end|><|user|>department field begins with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Manual Override, Run ID, Workflow Step, city<|end|><|user|>find city ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Run ID, Source File Name, Tracking Code, job_title<|end|><|user|>job_title field begins with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Project Tag, Request ID, Workflow Step, department<|end|><|user|>find department ending in managr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Release Version, Source File Name, Validation Notes, email<|end|><|user|>get values with email trailing with manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Last Modified By, Sync Status, System ID, Workflow Step, company_name<|end|><|user|>list where company_name ends with .COM<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Manual Override, Processing Time, Source File Name, Sync Status, city<|end|><|user|>find rows where city includes 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Processing Time, Project Tag, Release Version, city<|end|><|user|>find city ending in support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Flagged Reason, Request ID, Session Token, department<|end|><|user|>list where department ends with Hiring<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Flagged Reason, Manual Override, Processing Time, Response Time (ms), department<|end|><|user|>show all department with tech in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Origin System, Request ID, Retry Count, Run ID, product_name<|end|><|user|>find rows where product_name includes 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Internal Notes, Response Time (ms), Run ID, Source File Name, job_title<|end|><|user|>job_title has 'mngr' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Last Modified By, Reviewer Comments, Source File Name, product_name<|end|><|user|>product_name has word INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Internal Notes, Manual Override, Origin System, Workflow Step, email<|end|><|user|>show rows where email starts with sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Project Tag, Release Version, System ID, product_name<|end|><|user|>get records with product_name beginning as TECH<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Internal Notes, Response Time (ms), Workflow Step, department<|end|><|user|>find department ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Last Modified By, Manual Override, Reviewer Comments, email<|end|><|user|>get records with email beginning as Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Release Version, Run ID, Source File Name, job_title<|end|><|user|>job_title has 'hire' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Release Version, Response Time (ms), Validation Notes, company_name<|end|><|user|>company_name field holds value Sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Internal Notes, Sync Status, Timestamp Created, Workflow Step, department<|end|><|user|>show rows where department starts with pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Last Modified By, Reviewer Comments, Run ID, Timestamp Created, department<|end|><|user|>department has word inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Flagged Reason, Processing Time, System ID, Timestamp Created, email<|end|><|user|>show rows where email starts with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Last Modified By, Processing Time, Response Time (ms), product_name<|end|><|user|>get values with product_name trailing with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Last Modified By, Project Tag, Run ID, Validation Notes, product_name<|end|><|user|>find product_name ending in Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Document Ref, Last Modified By, Timestamp Created, product_name<|end|><|user|>product_name field begins with TECH<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Audit Trail, Last Modified By, Manual Override, Workflow Step, department<|end|><|user|>get entries if department contains .com<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Request ID, Reviewer Comments, Tracking Code, product_name<|end|><|user|>get rows where product_name does not contain 'suport'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('suport', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Error Code, Flagged Reason, Timestamp Created, company_name<|end|><|user|>get rows where company_name does not contain '.COM'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['company_name'].str.contains('.COM', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Processing Time, Project Tag, Release Version, System ID, company_name, email<|end|><|user|>find email having 'tech' and company_name with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Manual Override, Processing Time, Run ID, product_name<|end|><|user|>get rows where product_name does not contain 'tek'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('tek', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Last Modified By, Request ID, Response Time (ms), department, job_title<|end|><|user|>find department having 'support' and job_title with 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Retry Count, Source File Name, Sync Status, Tracking Code, company_name<|end|><|user|>get rows where company_name does not contain 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['company_name'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Batch Number, Last Modified By, Origin System, Sync Status, company_name, product_name<|end|><|user|>find company_name having 'salez' and product_name with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Environment Name, Manual Override, Response Time (ms), Retry Count, department, email<|end|><|user|>find department having 'salez' and email with 'sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Origin System, Response Time (ms), System ID, product_name<|end|><|user|>get rows where product_name does not contain 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('Sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Batch Number, Retry Count, Reviewer Comments, Tracking Code, email<|end|><|user|>get rows where email does not contain 'support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['email'].str.contains('support', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Error Code, Manual Override, Retry Count, company_name, department<|end|><|user|>list records where department has 'dotcom' or company_name has 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Internal Notes, Processing Time, Project Tag, department<|end|><|user|>get rows where department does not contain 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('inc.', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Retry Count, Sync Status, Tracking Code, city, job_title<|end|><|user|>find job_title having 'managr' and city with '.com'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Manual Override, Origin System, Reviewer Comments, department<|end|><|user|>get rows where department does not contain 'tek'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('tek', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Internal Notes, Manual Override, Retry Count, department<|end|><|user|>get rows where department does not contain 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Response Time (ms), Source File Name, Sync Status, product_name<|end|><|user|>get rows where product_name does not contain 'PRo'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('PRo', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Project Tag, Reviewer Comments, Run ID, city, product_name<|end|><|user|>find city having 'dotcom' and product_name with 'pr0'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Last Modified By, Processing Time, Source File Name, Timestamp Created, job_title, product_name<|end|><|user|>list records where product_name has 'Tech' or job_title has 'PRo'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Response Time (ms), Source File Name, Tracking Code, department, job_title<|end|><|user|>list records where department has '.com' or job_title has 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Batch Number, Last Modified By, Origin System, Reviewer Comments, job_title, product_name<|end|><|user|>list records where job_title has 'sup' or product_name has '.com'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Origin System, Response Time (ms), Run ID, Workflow Step, job_title, product_name<|end|><|user|>list records where product_name has 'support' or job_title has 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Release Version, Session Token, System ID, email, job_title<|end|><|user|>find email having 'salez' and job_title with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Processing Time, Retry Count, Source File Name, Timestamp Created, company_name, job_title<|end|><|user|>find job_title having 'mngr' and company_name with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Origin System, Project Tag, Tracking Code, Validation Notes, job_title, product_name<|end|><|user|>list records where job_title has 'sales' or product_name has 'ink'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Run ID, Sync Status, Timestamp Created, Workflow Step, email, job_title<|end|><|user|>list records where job_title has '.COM' or email has 'pro'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Release Version, Retry Count, Salary Range To, Sync Status<|end|><|user|>list entries where Salary Range To has 'inc' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, Document Ref, Origin System, Project Tag, Response Time (ms), Timestamp Created<|end|><|user|>show rows where Civil Service Title finishes with salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Civil Service Title'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Level, Manual Override, Processing Time, Project Tag<|end|><|user|>show records where Level begins with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Approval Status, Project Tag, Retry Count, Session Token, Source File Name<|end|><|user|>show records where Additional Information begins with sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Origin System, Run ID, Salary Range To, System ID<|end|><|user|>Salary Range To contains value sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Job Description, Manual Override, Reviewer Comments, Session Token, Validation Notes<|end|><|user|>find all where Job Description contains 'hire'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Job Description'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Request ID, Response Time (ms), Retry Count, Salary Range From, Workflow Step<|end|><|user|>list entries where Salary Range From has '.com' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Civil Service Title, Environment Name, Manual Override, Project Tag<|end|><|user|>find all where Civil Service Title contains 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Release Version, Reviewer Comments, Run ID, Work Location 1<|end|><|user|>show records where Work Location 1 begins with ink<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Work Location 1'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Flagged Reason, Level, Processing Time, Source File Name<|end|><|user|>Level starts with 'support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Document Ref, Error Code, Origin System, Posting Updated, Workflow Step<|end|><|user|>Posting Updated ends with 'Support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Updated'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Alert Triggered, Archived Flag, Batch Number, Response Time (ms), Workflow Step<|end|><|user|>Additional Information starts with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Residency Requirement, Response Time (ms), Source File Name, Timestamp Created<|end|><|user|>show records where Residency Requirement begins with sup<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Residency Requirement'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Release Version, Residency Requirement, Retry Count, Session Token, Tracking Code, Workflow Step<|end|><|user|>show records where Residency Requirement begins with sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Residency Requirement'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Alert Triggered, Internal Notes, Project Tag, Source File Name, Tracking Code<|end|><|user|>Additional Information ends with 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional Information, Backup ID, Internal Notes, Manual Override, Request ID, Validation Notes<|end|><|user|>Additional Information includes 'Pro'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Hours/Shift, Last Modified By, Manual Override, Processing Time, Request ID<|end|><|user|>list entries where Hours/Shift has 'pr0' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Project Tag, Run ID, Session Token, Timestamp Created, Validation Notes<|end|><|user|>show records where Level begins with Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Last Modified By, Posting Date, Session Token, Validation Notes<|end|><|user|>show rows where Posting Date finishes with pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Date'].str.endswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Minimum Qual Requirements, Origin System, Project Tag, Release Version, Reviewer Comments<|end|><|user|>Minimum Qual Requirements includes 'INC'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Career Level, Flagged Reason, Last Modified By, Project Tag, Session Token, Tracking Code<|end|><|user|>Career Level includes 'pr0'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Career Level'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Environment Name, Process Date, Project Tag, Retry Count, Run ID<|end|><|user|>Process Date starts with 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Process Date'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Hours/Shift, Processing Time, Project Tag, Run ID, Sync Status<|end|><|user|>Hours/Shift ends with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Error Code, Internal Notes, Level, Request ID<|end|><|user|>show records where Level begins with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process Date, Release Version, Response Time (ms), Sync Status, System ID, Timestamp Created<|end|><|user|>Process Date ends with 'Hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Process Date'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Career Level, Manual Override, Request ID, Run ID, Workflow Step<|end|><|user|>show rows where Career Level finishes with inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Career Level'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Internal Notes, Minimum Qual Requirements, Processing Time, Run ID, Timestamp Created<|end|><|user|>find all where Minimum Qual Requirements contains 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Environment Name, Flagged Reason, Full-Time/Part-Time indicator, Sync Status<|end|><|user|>Full-Time/Part-Time indicator starts with 'ink'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Job Description, Reviewer Comments, Session Token, Source File Name, Workflow Step<|end|><|user|>Job Description starts with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Job Description'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Flagged Reason, Post Until, Retry Count, Timestamp Created<|end|><|user|>Post Until ends with 'sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Post Until'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Project Tag, Release Version, Retry Count, Timestamp Created, Title Classification<|end|><|user|>Title Classification starts with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Title Classification'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Post Until, Request ID, Response Time (ms), System ID, Timestamp Created<|end|><|user|>show rows where Post Until finishes with Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Post Until'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Hours/Shift, Last Modified By, Manual Override, Project Tag, Reviewer Comments<|end|><|user|>Hours/Shift ends with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Error Code, Level, Project Tag, Timestamp Created, Validation Notes<|end|><|user|>Level contains value pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Backup ID, Manual Override, Processing Time, Release Version, Salary Frequency<|end|><|user|>Salary Frequency ends with '.COM'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Frequency'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Internal Notes, Session Token, Timestamp Created, Title Classification<|end|><|user|>Title Classification includes 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Title Classification'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Flagged Reason, Internal Notes, Response Time (ms), Retry Count, Work Location 1<|end|><|user|>Work Location 1 ends with 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Work Location 1'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Processing Time, Reviewer Comments, Source File Name, Timestamp Created, Workflow Step<|end|><|user|>Level ends with 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Batch Number, Division/Work Unit, Origin System, Project Tag, Sync Status<|end|><|user|>Division/Work Unit starts with 'sells'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Division/Work Unit'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Posting Updated, Retry Count, Run ID<|end|><|user|>Posting Updated ends with 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Updated'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Release Version, Request ID, Salary Range From, Session Token<|end|><|user|>list all jobs with Salary Range From minimum 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] >= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Environment Name, Error Code, Flagged Reason, Level, System ID<|end|><|user|>Level != 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] != 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Project Tag, Salary Range To, Session Token, Source File Name, Tracking Code<|end|><|user|>Salary Range To should be below 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] < 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Internal Notes, Salary Range From, Source File Name, Sync Status<|end|><|user|>Salary Range From should be maximum 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] <= 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Document Ref, Project Tag, Salary Range From, Sync Status<|end|><|user|>show records where Salary Range From is below 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] < 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Request ID, Reviewer Comments, Salary Range To, Session Token, System ID, Validation Notes<|end|><|user|>list all jobs with Salary Range To maximum 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Flagged Reason, Level, Timestamp Created, Workflow Step<|end|><|user|>get jobs where Level is greater than 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Level, Processing Time, Release Version, Response Time (ms), Reviewer Comments<|end|><|user|>show records where Level is >= 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] >= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Document Ref, Last Modified By, Request ID, Retry Count, Salary Range To<|end|><|user|>Salary Range To should be maximum 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Level, Origin System, Request ID, Response Time (ms)<|end|><|user|>show records where Level is more than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Level, Source File Name, System ID, Tracking Code, Validation Notes<|end|><|user|>get jobs where Level is != 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] != 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Project Tag, Retry Count, Run ID, Salary Range From, System ID<|end|><|user|>Salary Range From should be == 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] == 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Level, Processing Time, Project Tag, Run ID<|end|><|user|>show records where Level is maximum 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] <= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Level, Origin System, Timestamp Created<|end|><|user|>get jobs where Level is more than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Error Code, Level, System ID, Validation Notes<|end|><|user|>Level <= 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] <= 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Flagged Reason, Level, Source File Name, Timestamp Created, Workflow Step<|end|><|user|>list all jobs with Level not 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] != 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Project Tag, Release Version, Response Time (ms), Retry Count, Salary Range From<|end|><|user|>get jobs where Salary Range From is under 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] < 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Processing Time, Project Tag, Run ID, Salary Range From<|end|><|user|>Salary Range From should be under 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] < 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Backup ID, Environment Name, Level, Sync Status, Tracking Code<|end|><|user|>list all jobs with Level equal to 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] == 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Audit Trail, Internal Notes, Manual Override, Processing Time, Salary Range To, Validation Notes<|end|><|user|>Salary Range To should be not 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Level, Release Version, Tracking Code<|end|><|user|>show records where Level is more than 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Last Modified By, Release Version, Request ID, Salary Range To<|end|><|user|>Salary Range To != 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Last Modified By, Request ID, Run ID, Salary Range From, Timestamp Created<|end|><|user|>Salary Range From <= 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] <= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Reviewer Comments, Salary Range From, Source File Name, System ID<|end|><|user|>get jobs where Salary Range From is maximum 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] <= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Last Modified By, Level, Origin System, Reviewer Comments, Timestamp Created<|end|><|user|>get jobs where Level is >= 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] >= 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Level, Origin System, Retry Count, Session Token<|end|><|user|>Level minimum 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] >= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Request ID, Retry Count, Salary Range To, Session Token, Workflow Step<|end|><|user|>Salary Range To should be != 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Processing Time, Salary Range To, Source File Name, System ID<|end|><|user|>Salary Range To less than 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] < 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Project Tag, Response Time (ms), Run ID, Salary Range To<|end|><|user|>show records where Salary Range To is under 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] < 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Level, Manual Override, Reviewer Comments, System ID, Tracking Code<|end|><|user|>show records where Level is at most 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] <= 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Last Modified By, Response Time (ms), Reviewer Comments, Salary Range To<|end|><|user|>get jobs where Salary Range To is <= 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Last Modified By, Origin System, Retry Count, Salary Range To, Session Token<|end|><|user|>list all jobs with Salary Range To maximum 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Internal Notes, Release Version, Response Time (ms), Salary Range From, Sync Status<|end|><|user|>Salary Range From should be above 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] > 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Environment Name, Request ID, Salary Range To, System ID, Tracking Code<|end|><|user|>show records where Salary Range To is at most 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Document Ref, Level, Request ID, Sync Status, Tracking Code<|end|><|user|>list all jobs with Level less than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] < 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Last Modified By, Reviewer Comments, Salary Range From, Timestamp Created, Validation Notes<|end|><|user|>show records where Salary Range From is equal to 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] == 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Batch Number, Salary Range From, Source File Name, Tracking Code, Validation Notes<|end|><|user|>get jobs where Salary Range From is minimum 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] >= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Processing Time, Project Tag, Run ID, Salary Range From, Validation Notes<|end|><|user|>show records where Salary Range From is not 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] != 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Level, Processing Time, Sync Status, Validation Notes, Workflow Step<|end|><|user|>get jobs where Level is at most 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] <= 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Origin System, Response Time (ms), Salary Range From, Workflow Step<|end|><|user|>list all jobs with Salary Range From above 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] > 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Release Version, Reviewer Comments, Salary Range From, Session Token, System ID<|end|><|user|>Salary Range From should be != 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] != 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Last Modified By, Level, Source File Name, Sync Status, System ID, Tracking Code<|end|><|user|>list all jobs with Level is 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] == 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Manual Override, Salary Range To, Session Token, Tracking Code<|end|><|user|>show records where Salary Range To is greater than 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] > 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Retry Count, Salary Range To, Workflow Step<|end|><|user|>show records where Salary Range To is not equal to 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Error Code, Manual Override, Request ID, Reviewer Comments, Salary Range From<|end|><|user|>list all jobs with Salary Range From >= 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] >= 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Environment Name, Level, Response Time (ms), Source File Name<|end|><|user|>list all jobs with Level not 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] != 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Level, Manual Override, Response Time (ms), Reviewer Comments, Sync Status<|end|><|user|>show records where Level is greater than 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Error Code, Retry Count, Salary Range From, Session Token<|end|><|user|>Salary Range From maximum 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] <= 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Request ID, Retry Count, Salary Range To, Source File Name, Sync Status, Timestamp Created<|end|><|user|>Salary Range To should be at least 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] >= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Processing Time, Request ID, Salary Range To, Sync Status, Validation Notes<|end|><|user|>Salary Range To != 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Posting Date, Project Tag, Reviewer Comments, Run ID, Session Token<|end|><|user|>show records where Posting Date is not equal to 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Date']) != pd.to_datetime('200000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Flagged Reason, Release Version, Request ID, Retry Count, Sales, Workflow Step<|end|><|user|>show entries having Sales >= 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] >= 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Environment Name, Error Code, Internal Notes, discount<|end|><|user|>show entries having discount is 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['discount'] == 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Processing Time, Sync Status, System ID, Tracking Code, units_sold<|end|><|user|>units_sold <= 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['units_sold'] <= 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Run ID, Timestamp Created, Tracking Code, revenue<|end|><|user|>revenue should be more than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] > 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Backup ID, Session Token, Sync Status, System ID, Validation Notes, discount<|end|><|user|>show entries having discount below 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['discount'] < 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Processing Time, Reviewer Comments, Run ID, Salary Range To, Session Token<|end|><|user|>Salary Range To >= 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] >= 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Environment Name, Internal Notes, Posting Date, Response Time (ms), System ID<|end|><|user|>Posting Date should be minimum 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Date']) >= pd.to_datetime('100000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Flagged Reason, Project Tag, Timestamp Created, units_sold<|end|><|user|>units_sold should be >= 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['units_sold'] >= 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Processing Time, Release Version, Response Time (ms), Salary Range To, Timestamp Created, Tracking Code<|end|><|user|>Salary Range To not 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Origin System, Sync Status, Workflow Step, revenue<|end|><|user|>revenue equal to 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] == 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Flagged Reason, Run ID, Source File Name, Validation Notes, revenue<|end|><|user|>show entries having revenue not 99999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] != 99999]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Environment Name, Manual Override, Origin System, Sync Status, Workflow Step, revenue<|end|><|user|>get records where revenue is greater than 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] > 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Error Code, Response Time (ms), Retry Count, Salary Range To, Timestamp Created<|end|><|user|>Salary Range To less than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] < 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Last Modified By, Manual Override, Salary Range From, Timestamp Created, Workflow Step<|end|><|user|>Salary Range From under 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] < 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Internal Notes, Process Date, Processing Time, Retry Count, Reviewer Comments<|end|><|user|>Process Date should be <= 99999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Process Date']) <= pd.to_datetime('99999')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Backup ID, Error Code, Manual Override, Origin System, Salary Range From<|end|><|user|>show entries having Salary Range From equal to 1<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] == 1]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Internal Notes, Last Modified By, Release Version, Source File Name, revenue<|end|><|user|>revenue should be equal to 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] == 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Posting Updated, Run ID, Tracking Code<|end|><|user|>entries where Posting Updated is at most 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Updated']) <= pd.to_datetime('25000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Error Code, Sales, Timestamp Created, Workflow Step<|end|><|user|>get records where Sales is greater than 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] > 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Reviewer Comments, Run ID, Sync Status, revenue<|end|><|user|>get records where revenue is more than 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] > 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Origin System, Posting Updated, Release Version, System ID, Tracking Code<|end|><|user|>list data with Posting Updated less than 10<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Flagged Reason, Last Modified By, Posting Updated, Request ID<|end|><|user|>list data with Posting Updated under 0<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('0')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Environment Name, Internal Notes, Manual Override, Posting Updated, Sync Status<|end|><|user|>show records where Posting Updated is below 10<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Manual Override, Post Until, Request ID, Source File Name, Timestamp Created<|end|><|user|>Post Until should be not 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Post Until']) != pd.to_datetime('200000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Process Date, Retry Count, Sync Status, Timestamp Created, Tracking Code<|end|><|user|>show records where Process Date is >= 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Process Date']) >= pd.to_datetime('150000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Error Code, Flagged Reason, Release Version, Reviewer Comments, Sales<|end|><|user|>Sales below 10<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] < 10]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Origin System, Project Tag, Response Time (ms), Salary Range From, Validation Notes<|end|><|user|>Salary Range From greater than 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] > 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Approval Status, Error Code, Request ID, Salary Range From, Session Token<|end|><|user|>get records where Salary Range From is == 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] == 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Manual Override, Project Tag, Source File Name, Timestamp Created, units_sold<|end|><|user|>units_sold should be is 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['units_sold'] == 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Backup ID, Process Date, Session Token, Source File Name, Workflow Step<|end|><|user|>Process Date should be greater than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Process Date']) > pd.to_datetime('30000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Internal Notes, Last Modified By, Manual Override, Tracking Code, Validation Notes, discount<|end|><|user|>show entries having discount at most 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['discount'] <= 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Alert Triggered, Environment Name, Flagged Reason, Processing Time, Response Time (ms), units_sold<|end|><|user|>show entries having units_sold at most 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['units_sold'] <= 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Document Ref, Flagged Reason, Process Date, Processing Time, Release Version, Request ID<|end|><|user|>Process Date should be under 9999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Process Date']) < pd.to_datetime('9999')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Last Modified By, Origin System, Reviewer Comments, Validation Notes, discount<|end|><|user|>show entries having discount at least 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['discount'] >= 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Manual Override, Origin System, Sales, Session Token, Timestamp Created, Tracking Code<|end|><|user|>Sales should be is 99999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] == 99999]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Archived Flag, Audit Trail, Document Ref, Project Tag, Sync Status, revenue<|end|><|user|>get records where revenue is at most 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] <= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Batch Number, Document Ref, Processing Time, Session Token, Tracking Code, revenue<|end|><|user|>revenue should be != 0<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] != 0]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Approval Status, Flagged Reason, Origin System, Processing Time, Sales, Timestamp Created<|end|><|user|>Sales should be below 9999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] < 9999]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Error Code, Project Tag, Sales, Session Token, Source File Name, System ID<|end|><|user|>get records where Sales is is 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] == 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
