{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, quantitySession Token, Approval Status, Manual Override, Reviewer Comments, Processing Time<|end|><|user|>Get the number of quantity values grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, regionProcessing Time, Manual Override, Batch Number, Retry Count, Approval Status<|end|><|user|>Compute the minimum cost per region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['cost'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, monthAlert Triggered, System ID, Backup ID, Batch Number, Processing Time<|end|><|user|>Get the average cost grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['cost'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: monthInternal Notes, Document Ref, Reviewer Comments, Project Tag, Alert Triggered<|end|><|user|>Give the median month for each month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['month'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, store_idAlert Triggered, Timestamp Created, Audit Trail, Approval Status, Project Tag<|end|><|user|>Find standard deviation of profit grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['profit'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, expensesEnvironment Name, Response Time (ms), Document Ref, System ID, Batch Number<|end|><|user|>Calculate the total expenses for each channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['expenses'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, departmentError Code, Source File Name, Validation Notes, Processing Time, Timestamp Created<|end|><|user|>Find the maximum cost in every department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['cost'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, costAlert Triggered, Session Token, Reviewer Comments, Run ID, Backup ID<|end|><|user|>Compute the minimum cost per category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['cost'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, profitLast Modified By, Workflow Step, Document Ref, Tracking Code, Project Tag<|end|><|user|>Show the sum of profit across city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['profit'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, costSession Token, Flagged Reason, Request ID, Source File Name, Project Tag<|end|><|user|>Find the maximum cost in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['cost'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, taxProject Tag, Source File Name, Reviewer Comments, Backup ID, Workflow Step<|end|><|user|>Calculate the total tax for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['tax'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, salesAlert Triggered, Approval Status, Backup ID, Response Time (ms), Run ID<|end|><|user|>List the count of sales for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['sales'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, expensesLast Modified By, Project Tag, Tracking Code, Workflow Step, Environment Name<|end|><|user|>Give the median expenses for each customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['expenses'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, units_soldRelease Version, Error Code, Manual Override, Archived Flag, Source File Name<|end|><|user|>Calculate the total units_sold for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: store_idSystem ID, Approval Status, Run ID, Flagged Reason, Audit Trail<|end|><|user|>Get the average store_id grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['store_id'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, productTracking Code, Workflow Step, Manual Override, Retry Count, Reviewer Comments<|end|><|user|>Get the average cost grouped by product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['cost'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, quantityEnvironment Name, Manual Override, Retry Count, Audit Trail, Run ID<|end|><|user|>Find the maximum quantity in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, expensesBackup ID, Archived Flag, Approval Status, Last Modified By, Timestamp Created<|end|><|user|>Find the maximum expenses in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['expenses'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, order_valueRetry Count, Processing Time, Last Modified By, Session Token, Backup ID<|end|><|user|>Get the number of order_value values grouped by customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['order_value'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, units_soldAudit Trail, Document Ref, Environment Name, Sync Status, Reviewer Comments<|end|><|user|>Show how many units_sold entries exist per month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: discount, store_idSystem ID, Release Version, Audit Trail, Validation Notes, Sync Status<|end|><|user|>Find standard deviation of discount grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['discount'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, quantityManual Override, Approval Status, Request ID, Last Modified By, Reviewer Comments<|end|><|user|>Show how many quantity entries exist per department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['quantity'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_soldProcessing Time, Flagged Reason, Manual Override, Reviewer Comments, Backup ID<|end|><|user|>Show the sum of units_sold across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, salesRequest ID, Project Tag, Reviewer Comments, Validation Notes, Approval Status<|end|><|user|>Give the median sales for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['sales'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, units_soldSync Status, Document Ref, Backup ID, Retry Count, Audit Trail<|end|><|user|>Show how many units_sold entries exist per category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, salesResponse Time (ms), Last Modified By, Sync Status, Processing Time, Timestamp Created<|end|><|user|>Show the sum of sales across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['sales'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_soldError Code, Flagged Reason, Archived Flag, Run ID, Internal Notes<|end|><|user|>Calculate the total units_sold for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, discountRetry Count, Processing Time, Reviewer Comments, Workflow Step, Document Ref<|end|><|user|>Calculate the total discount for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['discount'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, units_soldError Code, Environment Name, Origin System, Response Time (ms), Internal Notes<|end|><|user|>Show how many units_sold entries exist per month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, units_soldBatch Number, Origin System, Archived Flag, Environment Name, Flagged Reason<|end|><|user|>List the count of units_sold for each channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, taxSession Token, Manual Override, Sync Status, Retry Count, Request ID<|end|><|user|>Find the maximum tax in every category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['tax'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: store_id, units_soldManual Override, Sync Status, Release Version, Last Modified By, Session Token<|end|><|user|>List the count of units_sold for each store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_soldSync Status, Archived Flag, Timestamp Created, Retry Count, Document Ref<|end|><|user|>Find standard deviation of units_sold grouped by department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, order_valueResponse Time (ms), Batch Number, Internal Notes, System ID, Validation Notes<|end|><|user|>Get the average order_value grouped by city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['order_value'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: order_value, store_idBatch Number, Error Code, Response Time (ms), Request ID, Session Token<|end|><|user|>Find standard deviation of order_value grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['order_value'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: regionInternal Notes, Batch Number, Backup ID, Timestamp Created, System ID<|end|><|user|>Calculate the total region for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['region'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, discountWorkflow Step, Alert Triggered, Release Version, Error Code, Source File Name<|end|><|user|>Find standard deviation of discount grouped by department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['discount'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, units_soldValidation Notes, Environment Name, Retry Count, Source File Name, System ID<|end|><|user|>Show the sum of units_sold across customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product, quantitySync Status, Workflow Step, Origin System, Error Code, Document Ref<|end|><|user|>Show how many quantity entries exist per product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['quantity'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, profitSource File Name, Retry Count, Archived Flag, Request ID, Release Version<|end|><|user|>Find standard deviation of profit grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['profit'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_soldRequest ID, Sync Status, Validation Notes, Run ID, Audit Trail<|end|><|user|>List the count of units_sold for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, departmentError Code, Request ID, Internal Notes, System ID, Release Version<|end|><|user|>List the count of cost for each department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['cost'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, regionAlert Triggered, Sync Status, Reviewer Comments, Batch Number, Approval Status<|end|><|user|>Calculate the total cost for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['cost'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product, units_soldAudit Trail, Environment Name, Workflow Step, Processing Time, Last Modified By<|end|><|user|>Get the average units_sold grouped by product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['units_sold'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: quantity, store_idSource File Name, Tracking Code, Alert Triggered, Archived Flag, Release Version<|end|><|user|>Find standard deviation of quantity grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['quantity'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: order_value, regionAlert Triggered, Sync Status, Source File Name, Tracking Code, System ID<|end|><|user|>Show the sum of order_value across region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['order_value'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: order_value, regionManual Override, Reviewer Comments, Last Modified By, Internal Notes, Validation Notes<|end|><|user|>Find the maximum order_value in every region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['order_value'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, store_idInternal Notes, Archived Flag, Approval Status, Manual Override, Validation Notes<|end|><|user|>Find standard deviation of expenses grouped by store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['expenses'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, order_valueAudit Trail, Environment Name, Alert Triggered, Tracking Code, Archived Flag<|end|><|user|>Compute the minimum order_value per channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['order_value'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, profitError Code, Release Version, Document Ref, Batch Number, Tracking Code<|end|><|user|>List the count of profit for each customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['profit'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: region, units_soldError Code, Origin System, Session Token, Audit Trail, Release Version<|end|><|user|>Compute the minimum units_sold per region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['units_sold'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, regionProject Tag, Batch Number, Approval Status, Reviewer Comments, Archived Flag<|end|><|user|>Get the number of cost values grouped by region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['cost'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: region, salesReviewer Comments, Origin System, Backup ID, Document Ref, Last Modified By<|end|><|user|>Give the median sales for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['sales'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, quantityReviewer Comments, Audit Trail, Session Token, Release Version, Internal Notes<|end|><|user|>Get the number of quantity values grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, regionArchived Flag, Processing Time, Flagged Reason, Timestamp Created, Session Token<|end|><|user|>Show how many profit entries exist per region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['profit'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: productSystem ID, Project Tag, Manual Override, Last Modified By, Error Code<|end|><|user|>Show how many product entries exist per product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['product'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, taxRetry Count, Request ID, Alert Triggered, Sync Status, Run ID<|end|><|user|>Get the average tax grouped by department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['tax'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, order_valueWorkflow Step, Session Token, Error Code, Tracking Code, Release Version<|end|><|user|>Show the sum of order_value across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['order_value'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, units_soldInternal Notes, Archived Flag, Last Modified By, Audit Trail, Batch Number<|end|><|user|>Get the number of units_sold values grouped by category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, salesRequest ID, Document Ref, Archived Flag, Error Code, Source File Name<|end|><|user|>Get the number of sales values grouped by category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['sales'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, order_valueReviewer Comments, Last Modified By, Release Version, Validation Notes, Error Code<|end|><|user|>Get the average order_value grouped by category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['order_value'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, costTimestamp Created, Manual Override, Approval Status, Last Modified By, Reviewer Comments<|end|><|user|>Get the number of cost values grouped by city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['cost'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, units_soldBackup ID, Request ID, Audit Trail, Run ID, Retry Count<|end|><|user|>Compute the minimum units_sold per city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['units_sold'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employee, expensesEnvironment Name, Batch Number, Document Ref, Session Token, Tracking Code<|end|><|user|>Show the sum of expenses across employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['expenses'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, store_idArchived Flag, Source File Name, Audit Trail, Alert Triggered, Request ID<|end|><|user|>Find the maximum expenses in every store_id.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('store_id')['expenses'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: regionArchived Flag, Project Tag, Sync Status, Flagged Reason, Reviewer Comments<|end|><|user|>Give the median region for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['region'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, taxBackup ID, Validation Notes, Run ID, Environment Name, Source File Name<|end|><|user|>List the count of tax for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['tax'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channelBatch Number, Request ID, Error Code, Validation Notes, Archived Flag<|end|><|user|>Get the average channel grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['channel'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, monthError Code, Session Token, Processing Time, Reviewer Comments, Project Tag<|end|><|user|>Show the sum of cost across month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['cost'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, discountSystem ID, Origin System, Environment Name, Backup ID, Processing Time<|end|><|user|>Find the maximum discount in every department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['discount'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: discount, monthTracking Code, Error Code, Validation Notes, Alert Triggered, Document Ref<|end|><|user|>Show the sum of discount across month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['discount'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, quantityResponse Time (ms), Last Modified By, Approval Status, Retry Count, Sync Status<|end|><|user|>Find the maximum quantity in every channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['quantity'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, taxInternal Notes, Manual Override, Alert Triggered, Sync Status, Audit Trail<|end|><|user|>Compute the minimum tax per channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['tax'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, monthApproval Status, Session Token, Last Modified By, Timestamp Created, Origin System<|end|><|user|>Calculate the total cost for each month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['cost'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, profitError Code, Alert Triggered, Flagged Reason, System ID, Timestamp Created<|end|><|user|>Get the average profit grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['profit'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channelLast Modified By, Error Code, Timestamp Created, Workflow Step, Tracking Code<|end|><|user|>Get the average channel grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['channel'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, monthSession Token, Flagged Reason, Document Ref, Alert Triggered, Source File Name<|end|><|user|>Find the maximum expenses in every month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['expenses'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, units_soldRun ID, Workflow Step, Origin System, Approval Status, Processing Time<|end|><|user|>Get the number of units_sold values grouped by city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['units_sold'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, expensesOrigin System, Run ID, Release Version, Response Time (ms), Project Tag<|end|><|user|>Show the sum of expenses across channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['expenses'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, regionTracking Code, Release Version, Sync Status, Processing Time, Internal Notes<|end|><|user|>List the count of expenses for each region.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('region')['expenses'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, order_valueSession Token, Sync Status, Reviewer Comments, System ID, Project Tag<|end|><|user|>Get the average order_value grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['order_value'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, salesBackup ID, Document Ref, Origin System, Error Code, System ID<|end|><|user|>Calculate the total sales for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['sales'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, productOrigin System, Last Modified By, Document Ref, Run ID, Environment Name<|end|><|user|>Find the maximum expenses in every product.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('product')['expenses'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, employeeReviewer Comments, Workflow Step, Validation Notes, Response Time (ms), Session Token<|end|><|user|>List the count of cost for each employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['cost'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, salesRelease Version, Approval Status, Internal Notes, Alert Triggered, Processing Time<|end|><|user|>Show how many sales entries exist per department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['sales'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: channel, profitRun ID, Project Tag, Reviewer Comments, Timestamp Created, Response Time (ms)<|end|><|user|>Get the average profit grouped by channel.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('channel')['profit'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: category, discountFlagged Reason, Response Time (ms), Workflow Step, Internal Notes, Run ID<|end|><|user|>Calculate the total discount for each category.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('category')['discount'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employee, profitProcessing Time, Session Token, Environment Name, Response Time (ms), Last Modified By<|end|><|user|>Show how many profit entries exist per employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['profit'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, salesLast Modified By, Project Tag, Environment Name, Origin System, Audit Trail<|end|><|user|>Find the maximum sales in every month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['sales'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, salesSource File Name, Project Tag, Audit Trail, Reviewer Comments, Sync Status<|end|><|user|>Give the median sales for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['sales'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, units_soldWorkflow Step, Archived Flag, Release Version, Processing Time, Backup ID<|end|><|user|>Show the sum of units_sold across department.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('department')['units_sold'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cost, employeeSession Token, System ID, Approval Status, Origin System, Alert Triggered<|end|><|user|>Give the median cost for each employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['cost'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, profitRun ID, System ID, Validation Notes, Backup ID, Origin System<|end|><|user|>Get the number of profit values grouped by customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['profit'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employee, profitEnvironment Name, Document Ref, Batch Number, Reviewer Comments, Sync Status<|end|><|user|>Find the maximum profit in every employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['profit'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, profitEnvironment Name, Internal Notes, Timestamp Created, Last Modified By, Sync Status<|end|><|user|>Calculate the total profit for each city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['profit'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: month, units_soldRelease Version, Alert Triggered, Flagged Reason, System ID, Batch Number<|end|><|user|>Find standard deviation of units_sold grouped by month.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('month')['units_sold'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employeeTracking Code, Workflow Step, Archived Flag, Batch Number, Reviewer Comments<|end|><|user|>Find the maximum employee in every employee.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('employee')['employee'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, quantityValidation Notes, Response Time (ms), Source File Name, Error Code, Run ID<|end|><|user|>Calculate the total quantity for each customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['quantity'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, quantityError Code, Tracking Code, Alert Triggered, System ID, Last Modified By<|end|><|user|>Show the sum of quantity across city.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('city')['quantity'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_type, units_soldSession Token, Timestamp Created, Retry Count, Alert Triggered, Last Modified By<|end|><|user|>Compute the minimum units_sold per customer_type.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('customer_type')['units_sold'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelWorkflow Step, Request ID, Tracking Code, Reviewer Comments, Source File Name<|end|><|user|>group job id and apply min on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelReviewer Comments, Origin System, Archived Flag, Approval Status, Timestamp Created<|end|><|user|>group JOB ID and apply count on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelManual Override, Timestamp Created, Processing Time, Flagged Reason, Source File Name<|end|><|user|>group job identifier and apply sum on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyProject Tag, System ID, Reviewer Comments, Release Version, Source File Name<|end|><|user|>agcy wise std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyReviewer Comments, Error Code, Approval Status, Release Version, Internal Notes<|end|><|user|>group AGENCY and apply mean on # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyTimestamp Created, Processing Time, Error Code, Alert Triggered, System ID<|end|><|user|>group the data by AGENCY and get sum of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelWorkflow Step, Reviewer Comments, Timestamp Created, Internal Notes, Response Time (ms)<|end|><|user|>min Level per biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelAudit Trail, Backup ID, Internal Notes, Workflow Step, Error Code<|end|><|user|>group the data by biz title and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleRelease Version, Workflow Step, Tracking Code, Manual Override, Error Code<|end|><|user|>aggregate # Of Positions by civil title using max<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleValidation Notes, Batch Number, Request ID, Response Time (ms), Retry Count<|end|><|user|>group civil title and apply median on # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationRelease Version, Response Time (ms), Source File Name, Sync Status, Timestamp Created<|end|><|user|>count Job ID per title class<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoLast Modified By, Session Token, Flagged Reason, Request ID, Archived Flag<|end|><|user|>group title code no and apply median on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoReviewer Comments, Batch Number, Last Modified By, Origin System, Request ID<|end|><|user|>group the data by tcode and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoValidation Notes, Retry Count, Request ID, Response Time (ms), Batch Number<|end|><|user|>count Level based on tile code<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyTracking Code, Archived Flag, Release Version, Origin System, Document Ref<|end|><|user|>sum # Of Positions by agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelSync Status, Response Time (ms), Tracking Code, Processing Time, Archived Flag<|end|><|user|>median Level by Job Id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelValidation Notes, Response Time (ms), Approval Status, Alert Triggered, Session Token<|end|><|user|>count Level per official title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleProject Tag, Sync Status, Validation Notes, Timestamp Created, Batch Number<|end|><|user|>organize by service title and get sum of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoWorkflow Step, Retry Count, Timestamp Created, Project Tag, Error Code<|end|><|user|>categorized by tile code and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyProject Tag, Reviewer Comments, Origin System, Tracking Code, Flagged Reason<|end|><|user|>split by agcy and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoRun ID, Alert Triggered, Batch Number, Error Code, Response Time (ms)<|end|><|user|>min Level wise title code<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyError Code, Sync Status, Reviewer Comments, Timestamp Created, Alert Triggered<|end|><|user|>group by organisation and get max of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelBackup ID, Validation Notes, Manual Override, Response Time (ms), Last Modified By<|end|><|user|>sum Level grpby title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationSession Token, Flagged Reason, Alert Triggered, Environment Name, Processing Time<|end|><|user|>max Job ID per title classfn<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelWorkflow Step, Project Tag, Error Code, Batch Number, Manual Override<|end|><|user|>sum Level grp biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelInternal Notes, Timestamp Created, Sync Status, Batch Number, Document Ref<|end|><|user|>organize by title and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoAlert Triggered, Flagged Reason, Audit Trail, Error Code, Release Version<|end|><|user|>bucket by titlecode number and get median of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelFlagged Reason, Document Ref, Last Modified By, Batch Number, Session Token<|end|><|user|>partition by business title and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelApproval Status, Session Token, Audit Trail, Sync Status, Error Code<|end|><|user|>count Level by JOB ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoSync Status, System ID, Response Time (ms), Project Tag, Document Ref<|end|><|user|>std Level grpby tcode<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleAlert Triggered, Error Code, System ID, Document Ref, Response Time (ms)<|end|><|user|>max # Of Positions based on service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationSource File Name, Project Tag, Run ID, Timestamp Created, Document Ref<|end|><|user|>partition by classification and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationTimestamp Created, Retry Count, Flagged Reason, Internal Notes, Release Version<|end|><|user|>groub by title classfn and get std of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeFlagged Reason, Error Code, Request ID, Batch Number, Sync Status<|end|><|user|>max Job ID grpby PostingType<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelAudit Trail, Sync Status, Manual Override, Processing Time, Response Time (ms)<|end|><|user|>group by job id and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeEnvironment Name, Origin System, Source File Name, Internal Notes, Tracking Code<|end|><|user|>max Job ID grp posting type<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationApproval Status, Processing Time, Request ID, Origin System, Alert Triggered<|end|><|user|>groub by classification and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeDocument Ref, Reviewer Comments, Sync Status, Batch Number, Flagged Reason<|end|><|user|>organize by posting and get median of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoInternal Notes, Error Code, Source File Name, Request ID, Last Modified By<|end|><|user|>split by tcode and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelWorkflow Step, Origin System, Last Modified By, Manual Override, Batch Number<|end|><|user|>mean Level wise job identifier<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelRun ID, Origin System, Tracking Code, Response Time (ms), Batch Number<|end|><|user|>grup by biz title and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelRequest ID, Processing Time, Retry Count, Reviewer Comments, Session Token<|end|><|user|>split by biz title and get median of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoSource File Name, Flagged Reason, Batch Number, Response Time (ms), Environment Name<|end|><|user|>categorized by title_code and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelRun ID, Origin System, Archived Flag, Response Time (ms), Processing Time<|end|><|user|>count Level on the basis of job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationSource File Name, Processing Time, System ID, Flagged Reason, Origin System<|end|><|user|>partition by classification and get min of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyArchived Flag, Last Modified By, Audit Trail, Run ID, Approval Status<|end|><|user|>categorized by agency and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyProcessing Time, System ID, Validation Notes, Approval Status, Origin System<|end|><|user|>cluster by agcy and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyTimestamp Created, Backup ID, Source File Name, Origin System, Error Code<|end|><|user|>grup by agency and get mean of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelOrigin System, Workflow Step, Session Token, Timestamp Created, System ID<|end|><|user|>categorized by title and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyResponse Time (ms), Backup ID, Processing Time, Batch Number, Project Tag<|end|><|user|>categorized by AGENCY and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationError Code, Sync Status, Approval Status, Environment Name, Audit Trail<|end|><|user|>partition by title class and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelBackup ID, Validation Notes, Archived Flag, Origin System, Error Code<|end|><|user|>std Level based on job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyTimestamp Created, Reviewer Comments, Manual Override, Sync Status, Validation Notes<|end|><|user|>partition by AGENCY and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelLast Modified By, Batch Number, Audit Trail, Processing Time, Release Version<|end|><|user|>std Level by job identifier<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelAlert Triggered, Source File Name, Audit Trail, Tracking Code, Flagged Reason<|end|><|user|>max Level grp title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyDocument Ref, Internal Notes, System ID, Workflow Step, Archived Flag<|end|><|user|>groub by agcy and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelRun ID, Processing Time, Origin System, Workflow Step, Manual Override<|end|><|user|>partition by title of job and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationResponse Time (ms), Release Version, Run ID, Internal Notes, Archived Flag<|end|><|user|>groop by title classfn and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeSync Status, Manual Override, System ID, Flagged Reason, Backup ID<|end|><|user|>groub by post type and get median of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelArchived Flag, Timestamp Created, Project Tag, Source File Name, Session Token<|end|><|user|>organize by job id and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelReviewer Comments, Request ID, Session Token, Project Tag, Internal Notes<|end|><|user|>std Level based on job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyRequest ID, Response Time (ms), System ID, Reviewer Comments, Alert Triggered<|end|><|user|>max # Of Positions based on agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelInternal Notes, Request ID, Alert Triggered, Run ID, Flagged Reason<|end|><|user|>split by Job Id and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleTracking Code, Audit Trail, System ID, Processing Time, Alert Triggered<|end|><|user|>count # Of Positions grpby service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeWorkflow Step, Retry Count, Document Ref, Response Time (ms), Last Modified By<|end|><|user|>partition by PostingType and get sum of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelAlert Triggered, Document Ref, Environment Name, Release Version, Manual Override<|end|><|user|>group by job identifier and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeAlert Triggered, Response Time (ms), Retry Count, Tracking Code, Manual Override<|end|><|user|>split by posting and get std of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoSource File Name, Manual Override, Release Version, Audit Trail, Archived Flag<|end|><|user|>partition by tile code and get sum of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyProject Tag, Session Token, Alert Triggered, Request ID, Internal Notes<|end|><|user|>i want to see it group organisation<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting TypeAudit Trail, Batch Number, Environment Name, Session Token, Release Version<|end|><|user|>can you grp type of post?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business TitleRequest ID, Sync Status, Workflow Step, Reviewer Comments, Manual Override<|end|><|user|>i want to see it by title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyDocument Ref, Reviewer Comments, Sync Status, Flagged Reason, Project Tag<|end|><|user|>grpby organisation<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business TitleSession Token, Source File Name, Response Time (ms), Processing Time, Reviewer Comments<|end|><|user|>i want to see it based on title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencySession Token, Processing Time, Manual Override, Error Code, Sync Status<|end|><|user|>show data by AGENCY<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting TypeApproval Status, Request ID, Validation Notes, Manual Override, Error Code<|end|><|user|>show data categorize by PostingType<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business TitleOrigin System, Archived Flag, Retry Count, Reviewer Comments, Approval Status<|end|><|user|>grp biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyManual Override, Approval Status, Request ID, Workflow Step, Batch Number<|end|><|user|>can you organize by AGENCY?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleReviewer Comments, Session Token, Run ID, Tracking Code, Flagged Reason<|end|><|user|>categorize by cst<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyProcessing Time, Archived Flag, Run ID, Last Modified By, Alert Triggered<|end|><|user|>cluster by Agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleBatch Number, Backup ID, Release Version, Response Time (ms), Last Modified By<|end|><|user|>i want to see it grp cst<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business TitleManual Override, Batch Number, Internal Notes, Response Time (ms), Environment Name<|end|><|user|>i want to see it grpby biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleApproval Status, Reviewer Comments, Backup ID, Timestamp Created, Environment Name<|end|><|user|>based on service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleProject Tag, Origin System, Archived Flag, Batch Number, Response Time (ms)<|end|><|user|>can you cluster by govt title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title Code NoRelease Version, Sync Status, Audit Trail, Origin System, Backup ID<|end|><|user|>show data organize by title code no<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job IDAlert Triggered, Internal Notes, Validation Notes, Source File Name, Backup ID<|end|><|user|>can you grouped by j o b i d?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencySession Token, Response Time (ms), Source File Name, Audit Trail, Release Version<|end|><|user|>grouped by AGENCY<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyLast Modified By, Timestamp Created, Origin System, Run ID, Reviewer Comments<|end|><|user|>can you split by agcy?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleRetry Count, Processing Time, Workflow Step, Last Modified By, Response Time (ms)<|end|><|user|>show data by govt title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoInternal Notes, Manual Override, Run ID, Processing Time, Retry Count<|end|><|user|>Could you group the data by title code and show the mean of Level?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationWorkflow Step, Response Time (ms), Last Modified By, Request ID, Alert Triggered<|end|><|user|>I'd like to know the count of Job ID by title classification.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleTimestamp Created, Backup ID, Document Ref, Session Token, Response Time (ms)<|end|><|user|>How many # Of Positions values are there per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoManual Override, System ID, Request ID, Backup ID, Project Tag<|end|><|user|>Which title code no has the highest Level std?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleInternal Notes, Error Code, Batch Number, Processing Time, Timestamp Created<|end|><|user|>Can you show me the max # Of Positions grouped by service title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyError Code, Environment Name, Project Tag, Source File Name, Approval Status<|end|><|user|>What\u2019s the min of # Of Positions in each AGENCY group?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleSession Token, Source File Name, Internal Notes, Retry Count, Timestamp Created<|end|><|user|>List count # Of Positions per civil service.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoTimestamp Created, Document Ref, Run ID, Processing Time, Response Time (ms)<|end|><|user|>Can you show me the mean Level grouped by tile code?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyOrigin System, Processing Time, Flagged Reason, Audit Trail, Backup ID<|end|><|user|>List sum # Of Positions per Agency.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyBackup ID, Last Modified By, Alert Triggered, Workflow Step, Audit Trail<|end|><|user|>Could you group the data by Agency and show the count of # Of Positions?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleEnvironment Name, Sync Status, Run ID, Batch Number, Origin System<|end|><|user|>Which service title has the highest # Of Positions std?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelRun ID, Retry Count, Manual Override, Session Token, Flagged Reason<|end|><|user|>I'd like to know the min of Level by business title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationFlagged Reason, Project Tag, Run ID, Processing Time, Backup ID<|end|><|user|>Which title classfn has the highest Job ID count?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelResponse Time (ms), Processing Time, Batch Number, Manual Override, Run ID<|end|><|user|>Could you group the data by biz title and show the count of Level?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelRetry Count, Internal Notes, Origin System, Project Tag, System ID<|end|><|user|>Which j o b i d has the highest Level min?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelRelease Version, Error Code, Source File Name, Run ID, Alert Triggered<|end|><|user|>List std Level per official title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleManual Override, Origin System, Sync Status, Project Tag, Workflow Step<|end|><|user|>Give me the std of # Of Positions for every cst.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationTimestamp Created, Validation Notes, Backup ID, Internal Notes, Source File Name<|end|><|user|>How is Job ID distributed across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelFlagged Reason, Response Time (ms), Batch Number, Session Token, Document Ref<|end|><|user|>Which business title has the highest Level sum?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationResponse Time (ms), Release Version, Audit Trail, Project Tag, Source File Name<|end|><|user|>Could you group the data by title class and show the sum of Job ID?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationWorkflow Step, Internal Notes, Processing Time, Backup ID, Reviewer Comments<|end|><|user|>How is Job ID distributed across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelInternal Notes, Backup ID, Archived Flag, Validation Notes, Source File Name<|end|><|user|>What\u2019s the count of Level in each j o b i d group?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationBackup ID, Last Modified By, Release Version, Sync Status, Timestamp Created<|end|><|user|>How many Job ID values are there per title classification?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleRequest ID, Tracking Code, Sync Status, Source File Name, System ID<|end|><|user|>How many # Of Positions values are there per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleDocument Ref, Processing Time, Audit Trail, Reviewer Comments, Batch Number<|end|><|user|>Can you show me the min # Of Positions grouped by civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelProcessing Time, Session Token, Origin System, Reviewer Comments, Workflow Step<|end|><|user|>group job id and apply min on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelProcessing Time, Reviewer Comments, Sync Status, System ID, Last Modified By<|end|><|user|>group JOB ID and apply count on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelSession Token, Audit Trail, Tracking Code, Error Code, Internal Notes<|end|><|user|>group job identifier and apply sum on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyBackup ID, Error Code, Manual Override, Alert Triggered, Session Token<|end|><|user|>agcy wise std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyFlagged Reason, Document Ref, Batch Number, Archived Flag, Processing Time<|end|><|user|>group AGENCY and apply mean on # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyBatch Number, Sync Status, Origin System, Alert Triggered, Timestamp Created<|end|><|user|>group the data by AGENCY and get sum of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelRun ID, Internal Notes, Alert Triggered, Session Token, Audit Trail<|end|><|user|>min Level per biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelRequest ID, Batch Number, Workflow Step, Retry Count, Manual Override<|end|><|user|>group the data by biz title and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleSession Token, Retry Count, Source File Name, Request ID, Reviewer Comments<|end|><|user|>aggregate # Of Positions by civil title using max<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleRelease Version, Workflow Step, Validation Notes, Internal Notes, Response Time (ms)<|end|><|user|>group civil title and apply median on # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationRetry Count, Timestamp Created, Origin System, Environment Name, Batch Number<|end|><|user|>count Job ID per title class<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoReviewer Comments, Request ID, System ID, Environment Name, Tracking Code<|end|><|user|>group title code no and apply median on Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoProcessing Time, Request ID, Audit Trail, Environment Name, Project Tag<|end|><|user|>group the data by tcode and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoAudit Trail, Manual Override, Backup ID, Sync Status, Flagged Reason<|end|><|user|>count Level based on tile code<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyProject Tag, Source File Name, Release Version, Validation Notes, Environment Name<|end|><|user|>sum # Of Positions by agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelArchived Flag, Sync Status, Environment Name, Tracking Code, Origin System<|end|><|user|>median Level by Job Id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelOrigin System, Project Tag, Retry Count, Approval Status, Request ID<|end|><|user|>count Level per official title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleError Code, Project Tag, Validation Notes, Origin System, Session Token<|end|><|user|>organize by service title and get sum of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoRelease Version, Batch Number, Validation Notes, Reviewer Comments, Source File Name<|end|><|user|>categorized by tile code and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyBackup ID, Timestamp Created, Archived Flag, Environment Name, Run ID<|end|><|user|>split by agcy and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoWorkflow Step, Approval Status, Response Time (ms), Audit Trail, Request ID<|end|><|user|>min Level wise title code<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyAudit Trail, Approval Status, Release Version, Origin System, Environment Name<|end|><|user|>group by organisation and get max of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelLast Modified By, Retry Count, Manual Override, Source File Name, Internal Notes<|end|><|user|>sum Level grpby title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationManual Override, Source File Name, Run ID, Retry Count, Reviewer Comments<|end|><|user|>max Job ID per title classfn<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelTracking Code, Flagged Reason, Run ID, Archived Flag, Origin System<|end|><|user|>sum Level grp biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelProcessing Time, Backup ID, Origin System, Error Code, Source File Name<|end|><|user|>organize by title and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoRun ID, Flagged Reason, Alert Triggered, Document Ref, Audit Trail<|end|><|user|>bucket by titlecode number and get median of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelSession Token, Sync Status, Batch Number, Audit Trail, Approval Status<|end|><|user|>partition by business title and get count of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelSource File Name, Manual Override, Internal Notes, Sync Status, Approval Status<|end|><|user|>count Level by JOB ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoManual Override, Archived Flag, Sync Status, Reviewer Comments, Session Token<|end|><|user|>std Level grpby tcode<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleResponse Time (ms), Batch Number, Error Code, Manual Override, Origin System<|end|><|user|>max # Of Positions based on service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationInternal Notes, Request ID, System ID, Workflow Step, Validation Notes<|end|><|user|>partition by classification and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationProcessing Time, Last Modified By, Approval Status, Flagged Reason, Internal Notes<|end|><|user|>groub by title classfn and get std of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeSync Status, Audit Trail, Environment Name, Response Time (ms), Retry Count<|end|><|user|>max Job ID grpby PostingType<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelSource File Name, Retry Count, Internal Notes, Reviewer Comments, Run ID<|end|><|user|>group by job id and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeBackup ID, Workflow Step, Audit Trail, Batch Number, Document Ref<|end|><|user|>max Job ID grp posting type<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationAudit Trail, Error Code, Approval Status, Batch Number, Alert Triggered<|end|><|user|>groub by classification and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeError Code, System ID, Alert Triggered, Sync Status, Approval Status<|end|><|user|>organize by posting and get median of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoTracking Code, System ID, Origin System, Project Tag, Request ID<|end|><|user|>split by tcode and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelManual Override, Archived Flag, Sync Status, Request ID, Batch Number<|end|><|user|>mean Level wise job identifier<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelValidation Notes, Sync Status, Document Ref, Source File Name, Alert Triggered<|end|><|user|>grup by biz title and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelManual Override, Request ID, Timestamp Created, Response Time (ms), System ID<|end|><|user|>split by biz title and get median of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoTracking Code, Manual Override, Timestamp Created, System ID, Document Ref<|end|><|user|>categorized by title_code and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelAudit Trail, Response Time (ms), Backup ID, Document Ref, Error Code<|end|><|user|>count Level on the basis of job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationTimestamp Created, Processing Time, Session Token, Approval Status, Request ID<|end|><|user|>partition by classification and get min of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyResponse Time (ms), System ID, Release Version, Error Code, Sync Status<|end|><|user|>categorized by agency and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyInternal Notes, Backup ID, Source File Name, Release Version, Document Ref<|end|><|user|>cluster by agcy and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyResponse Time (ms), Retry Count, Release Version, Workflow Step, Run ID<|end|><|user|>grup by agency and get mean of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelSync Status, Validation Notes, Tracking Code, Alert Triggered, Backup ID<|end|><|user|>categorized by title and get std of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyReviewer Comments, Internal Notes, Session Token, Release Version, Response Time (ms)<|end|><|user|>categorized by AGENCY and get std of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationSync Status, Workflow Step, Processing Time, Run ID, Approval Status<|end|><|user|>partition by title class and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelInternal Notes, Manual Override, Archived Flag, Backup ID, Response Time (ms)<|end|><|user|>std Level based on job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencySync Status, Flagged Reason, Document Ref, Source File Name, Last Modified By<|end|><|user|>partition by AGENCY and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelWorkflow Step, Timestamp Created, Document Ref, Audit Trail, Approval Status<|end|><|user|>std Level by job identifier<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelBatch Number, Validation Notes, Retry Count, Release Version, Source File Name<|end|><|user|>max Level grp title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyBatch Number, System ID, Session Token, Audit Trail, Archived Flag<|end|><|user|>groub by agcy and get min of # Of Positions<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelRetry Count, Release Version, Environment Name, Archived Flag, Run ID<|end|><|user|>partition by title of job and get max of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationSync Status, Approval Status, Session Token, Internal Notes, Manual Override<|end|><|user|>groop by title classfn and get mean of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeReviewer Comments, Validation Notes, Batch Number, Timestamp Created, Document Ref<|end|><|user|>groub by post type and get median of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('median').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelManual Override, Validation Notes, Session Token, Source File Name, Environment Name<|end|><|user|>organize by job id and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelReviewer Comments, Response Time (ms), Processing Time, Last Modified By, Origin System<|end|><|user|>std Level based on job id<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyFlagged Reason, Processing Time, Release Version, Request ID, Workflow Step<|end|><|user|>max # Of Positions based on agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelError Code, Archived Flag, Approval Status, Document Ref, Manual Override<|end|><|user|>split by Job Id and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleSession Token, Project Tag, Flagged Reason, Run ID, Document Ref<|end|><|user|>count # Of Positions grpby service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeRetry Count, Internal Notes, Last Modified By, Document Ref, Audit Trail<|end|><|user|>partition by PostingType and get sum of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelSystem ID, Retry Count, Session Token, Internal Notes, Response Time (ms)<|end|><|user|>group by job identifier and get mean of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeSync Status, Last Modified By, Reviewer Comments, Archived Flag, Source File Name<|end|><|user|>split by posting and get std of Job ID<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoTimestamp Created, Last Modified By, Response Time (ms), Workflow Step, Tracking Code<|end|><|user|>partition by tile code and get sum of Level<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyTracking Code, Manual Override, Backup ID, Response Time (ms), Last Modified By<|end|><|user|>i want to see it group organisation<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting TypeOrigin System, Workflow Step, Manual Override, System ID, Request ID<|end|><|user|>can you grp type of post?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business TitleProcessing Time, Tracking Code, Audit Trail, Flagged Reason, Release Version<|end|><|user|>i want to see it by title of job<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencySystem ID, Batch Number, Response Time (ms), Flagged Reason, Environment Name<|end|><|user|>grpby organisation<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business TitleApproval Status, Validation Notes, Tracking Code, Document Ref, Run ID<|end|><|user|>i want to see it based on title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencySystem ID, Audit Trail, Retry Count, Document Ref, Timestamp Created<|end|><|user|>show data by AGENCY<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting TypeRelease Version, Timestamp Created, Approval Status, Alert Triggered, Project Tag<|end|><|user|>show data categorize by PostingType<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business TitleManual Override, Processing Time, Backup ID, Document Ref, Retry Count<|end|><|user|>grp biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyFlagged Reason, Document Ref, Environment Name, Audit Trail, Session Token<|end|><|user|>can you organize by AGENCY?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleWorkflow Step, Document Ref, Internal Notes, System ID, Error Code<|end|><|user|>categorize by cst<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyAlert Triggered, Validation Notes, Processing Time, Approval Status, Run ID<|end|><|user|>cluster by Agency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleEnvironment Name, Document Ref, Release Version, Response Time (ms), Source File Name<|end|><|user|>i want to see it grp cst<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business TitleValidation Notes, Run ID, Release Version, Last Modified By, Manual Override<|end|><|user|>i want to see it grpby biz title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleFlagged Reason, Source File Name, Response Time (ms), Last Modified By, Session Token<|end|><|user|>based on service title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleSystem ID, Archived Flag, Project Tag, Backup ID, Session Token<|end|><|user|>can you cluster by govt title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title Code NoProject Tag, Internal Notes, Manual Override, Retry Count, Approval Status<|end|><|user|>show data organize by title code no<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job IDLast Modified By, Response Time (ms), Release Version, Audit Trail, Reviewer Comments<|end|><|user|>can you grouped by j o b i d?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyArchived Flag, Error Code, Reviewer Comments, Batch Number, System ID<|end|><|user|>grouped by AGENCY<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: AgencyWorkflow Step, Request ID, Internal Notes, Processing Time, Manual Override<|end|><|user|>can you split by agcy?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleTracking Code, Reviewer Comments, Last Modified By, Environment Name, Request ID<|end|><|user|>show data by govt title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title').first().reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoBatch Number, Approval Status, System ID, Origin System, Project Tag<|end|><|user|>Could you group the data by title code and show the mean of Level?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationArchived Flag, Last Modified By, Retry Count, Validation Notes, Sync Status<|end|><|user|>I'd like to know the count of Job ID by title classification.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleSync Status, Alert Triggered, Processing Time, Flagged Reason, Environment Name<|end|><|user|>How many # Of Positions values are there per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoSystem ID, Run ID, Environment Name, Archived Flag, Error Code<|end|><|user|>Which title code no has the highest Level std?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleInternal Notes, System ID, Alert Triggered, Timestamp Created, Validation Notes<|end|><|user|>Can you show me the max # Of Positions grouped by service title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyApproval Status, Reviewer Comments, System ID, Sync Status, Alert Triggered<|end|><|user|>What\u2019s the min of # Of Positions in each AGENCY group?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleFlagged Reason, Session Token, Sync Status, Manual Override, Release Version<|end|><|user|>List count # Of Positions per civil service.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoError Code, Retry Count, Environment Name, Project Tag, Origin System<|end|><|user|>Can you show me the mean Level grouped by tile code?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyEnvironment Name, Archived Flag, Release Version, Error Code, Backup ID<|end|><|user|>List sum # Of Positions per Agency.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyBatch Number, Response Time (ms), Source File Name, Archived Flag, Audit Trail<|end|><|user|>Could you group the data by Agency and show the count of # Of Positions?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleReviewer Comments, Tracking Code, Release Version, Document Ref, Source File Name<|end|><|user|>Which service title has the highest # Of Positions std?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelRun ID, Response Time (ms), Manual Override, Source File Name, Processing Time<|end|><|user|>I'd like to know the min of Level by business title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationDocument Ref, Processing Time, Sync Status, Origin System, Validation Notes<|end|><|user|>Which title classfn has the highest Job ID count?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelBackup ID, Processing Time, Audit Trail, Session Token, Document Ref<|end|><|user|>Could you group the data by biz title and show the count of Level?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelReviewer Comments, Audit Trail, Sync Status, Last Modified By, Processing Time<|end|><|user|>Which j o b i d has the highest Level min?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelLast Modified By, Manual Override, Flagged Reason, Audit Trail, Environment Name<|end|><|user|>List std Level per official title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleRequest ID, Project Tag, Approval Status, Archived Flag, System ID<|end|><|user|>Give me the std of # Of Positions for every cst.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationTimestamp Created, Backup ID, Approval Status, Manual Override, Retry Count<|end|><|user|>How is Job ID distributed across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelSystem ID, Sync Status, Error Code, Batch Number, Processing Time<|end|><|user|>Which business title has the highest Level sum?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationProject Tag, Tracking Code, Origin System, Audit Trail, Backup ID<|end|><|user|>Could you group the data by title class and show the sum of Job ID?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationFlagged Reason, Sync Status, Last Modified By, Retry Count, Backup ID<|end|><|user|>How is Job ID distributed across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelReviewer Comments, Source File Name, Approval Status, Backup ID, Timestamp Created<|end|><|user|>What\u2019s the count of Level in each j o b i d group?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationError Code, Response Time (ms), Source File Name, Release Version, Sync Status<|end|><|user|>How many Job ID values are there per title classification?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleTracking Code, Archived Flag, Last Modified By, Audit Trail, Sync Status<|end|><|user|>How many # Of Positions values are there per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleError Code, Request ID, Backup ID, Manual Override, Reviewer Comments<|end|><|user|>Can you show me the min # Of Positions grouped by civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('min').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelAlert Triggered, Retry Count, Project Tag, Response Time (ms), Workflow Step<|end|><|user|>How does the Level vary across job id?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationResponse Time (ms), Request ID, Document Ref, System ID, Tracking Code<|end|><|user|>Show the spread of Job ID by classification.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleReviewer Comments, Internal Notes, Origin System, Flagged Reason, Validation Notes<|end|><|user|>What\u2019s the variation in # Of Positions per civil title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoSource File Name, Run ID, Alert Triggered, Archived Flag, Approval Status<|end|><|user|>Tell me the spread of Level across different title code no.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleTracking Code, Workflow Step, Batch Number, Sync Status, System ID<|end|><|user|>What is the variability of # Of Positions grouped by civil service?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoDocument Ref, Processing Time, Reviewer Comments, Manual Override, Retry Count<|end|><|user|>What is the variability of Level grouped by title code?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleApproval Status, Flagged Reason, Document Ref, Internal Notes, Processing Time<|end|><|user|>What is the variability of # Of Positions grouped by service title?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleAlert Triggered, Source File Name, Internal Notes, Response Time (ms), Approval Status<|end|><|user|>Tell me the spread of # Of Positions across different govt title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeRun ID, Processing Time, Timestamp Created, Session Token, Release Version<|end|><|user|>Check how Job ID changes across type of post.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencySystem ID, Origin System, Run ID, Timestamp Created, Session Token<|end|><|user|>What's the range of # Of Positions for each AGENCY?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, LevelProcessing Time, Response Time (ms), Workflow Step, Tracking Code, Retry Count<|end|><|user|>Give the scattered values of Level by jobid.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Job ID')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Posting TypeSync Status, Timestamp Created, System ID, Request ID, Approval Status<|end|><|user|>How is Job ID scattered over type of post?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Posting Type')['Job ID'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoResponse Time (ms), Release Version, Run ID, Backup ID, Batch Number<|end|><|user|>How does the Level vary across title_code?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Business Title, LevelEnvironment Name, Release Version, Error Code, Processing Time, Project Tag<|end|><|user|>Give the scattered values of Level by title.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Business Title')['Level'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationApproval Status, Session Token, Audit Trail, Workflow Step, Flagged Reason<|end|><|user|>How does the Job ID vary across title classfn?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('std').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Level, Title Code NoAudit Trail, Manual Override, Processing Time, Batch Number, Retry Count<|end|><|user|>What's the range of Level for each tcode?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Code No')['Level'].agg('max').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyApproval Status, Processing Time, Project Tag, Release Version, Environment Name<|end|><|user|>What\u2019s the variation in # Of Positions per agcy?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job ID, Title ClassificationOrigin System, Tracking Code, Workflow Step, Release Version, Archived Flag<|end|><|user|>Check how Job ID changes across title classfn.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, Civil Service TitleAudit Trail, Processing Time, Document Ref, Run ID, System ID<|end|><|user|>What\u2019s the variation in # Of Positions per civil service?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: # Of Positions, AgencyTracking Code, Project Tag, Batch Number, Error Code, System ID<|end|><|user|>Can you show the distribution of # Of Positions across agcy?<|end|><|assistant|>", "completion": "{\"df_code\": \"df.groupby('Agency')['# Of Positions'].agg('count').reset_index()\", \"query_pred_category\": \"aggregation\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueSystem ID, Session Token, Environment Name, Tracking Code, Sync Status<|end|><|user|>Show customers in increasing order of revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldProject Tag, Timestamp Created, Run ID, Internal Notes, Sync Status<|end|><|user|>Display employees in order of decreasing units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesSource File Name, Audit Trail, Manual Override, Alert Triggered, Tracking Code<|end|><|user|>Get the highest sales values for each employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: rating, storesBackup ID, Run ID, Workflow Step, Source File Name, Release Version<|end|><|user|>Find top 3 stores with highest rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, salesRelease Version, Response Time (ms), Audit Trail, Processing Time, Last Modified By<|end|><|user|>Get the highest sales values for each departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, units_soldRelease Version, System ID, Sync Status, Backup ID, Retry Count<|end|><|user|>Find top 3 departments with highest units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenue, storesInternal Notes, Document Ref, Origin System, System ID, Manual Override<|end|><|user|>List the lowest revenue values grouped by stores.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profitSystem ID, Last Modified By, Request ID, Error Code, Release Version<|end|><|user|>Show customers in increasing order of profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, units_soldResponse Time (ms), Environment Name, Manual Override, Release Version, Error Code<|end|><|user|>Rank departments by units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['units_sold_rank'] = df['units_sold'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesSystem ID, Environment Name, Document Ref, Source File Name, Sync Status<|end|><|user|>Get the highest profit values for each stores.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, expensesLast Modified By, Tracking Code, Timestamp Created, Workflow Step, Reviewer Comments<|end|><|user|>Rank employees by expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['expenses_rank'] = df['expenses'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profitBackup ID, Flagged Reason, Last Modified By, Run ID, Release Version<|end|><|user|>Show customers sorted by profit ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, storesResponse Time (ms), Project Tag, Internal Notes, Origin System, Request ID<|end|><|user|>Show stores sorted by sales ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, storesTracking Code, Session Token, Release Version, Reviewer Comments, Run ID<|end|><|user|>Rank stores by expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['expenses_rank'] = df['expenses'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, storesSource File Name, System ID, Reviewer Comments, Validation Notes, Processing Time<|end|><|user|>Display stores in order of decreasing expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, storesValidation Notes, Audit Trail, Timestamp Created, Processing Time, Document Ref<|end|><|user|>Get bottom 10 stores based on sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, units_soldManual Override, Run ID, Processing Time, Sync Status, Timestamp Created<|end|><|user|>Get bottom 10 customers based on units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profitArchived Flag, Timestamp Created, Workflow Step, Backup ID, Audit Trail<|end|><|user|>Rank products by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profitProcessing Time, Validation Notes, Backup ID, Origin System, Timestamp Created<|end|><|user|>Sort customers by profit in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profitRelease Version, Error Code, Source File Name, Reviewer Comments, Last Modified By<|end|><|user|>List top 5 employees by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profitRelease Version, Request ID, Run ID, Alert Triggered, Audit Trail<|end|><|user|>Get bottom 10 products based on profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, units_soldRequest ID, Last Modified By, Backup ID, Flagged Reason, Release Version<|end|><|user|>Find top 3 departments with highest units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingFlagged Reason, Processing Time, Internal Notes, Audit Trail, Sync Status<|end|><|user|>Display products in order of decreasing rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: rating, storesAudit Trail, Archived Flag, Backup ID, Workflow Step, Batch Number<|end|><|user|>Get the highest rating values for each stores.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, salesEnvironment Name, Reviewer Comments, Document Ref, Approval Status, Session Token<|end|><|user|>Show customers in increasing order of sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, revenueRequest ID, Project Tag, Last Modified By, Archived Flag, Response Time (ms)<|end|><|user|>List the lowest revenue values grouped by products.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, expensesValidation Notes, Document Ref, Release Version, Source File Name, Session Token<|end|><|user|>Find top 3 employees with highest expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, storesRun ID, Alert Triggered, Tracking Code, Backup ID, Reviewer Comments<|end|><|user|>Sort stores by sales in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenue, storesBatch Number, Release Version, Project Tag, Processing Time, Error Code<|end|><|user|>Sort stores by revenue in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, salesRetry Count, Release Version, Reviewer Comments, Audit Trail, System ID<|end|><|user|>Find top 3 products with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingWorkflow Step, Processing Time, Internal Notes, Timestamp Created, Response Time (ms)<|end|><|user|>Rank products by rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['rating_rank'] = df['rating'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, profitTimestamp Created, Approval Status, Flagged Reason, Source File Name, System ID<|end|><|user|>Rank departments by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldBackup ID, Reviewer Comments, Audit Trail, Origin System, Manual Override<|end|><|user|>Get bottom 10 employees based on units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, expensesAlert Triggered, Validation Notes, Response Time (ms), Session Token, Timestamp Created<|end|><|user|>Display customers in order of decreasing expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, revenueInternal Notes, Document Ref, Response Time (ms), Retry Count, Timestamp Created<|end|><|user|>Get bottom 10 employees based on revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profitWorkflow Step, Alert Triggered, Audit Trail, Session Token, Retry Count<|end|><|user|>Sort customers by profit in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profitTracking Code, Batch Number, Timestamp Created, Document Ref, Origin System<|end|><|user|>List the lowest profit values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, revenueRun ID, Reviewer Comments, Manual Override, Flagged Reason, Tracking Code<|end|><|user|>List the lowest revenue values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, profitAudit Trail, Validation Notes, Environment Name, Source File Name, Project Tag<|end|><|user|>Show departments in increasing order of profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profitValidation Notes, Archived Flag, Source File Name, Run ID, Last Modified By<|end|><|user|>Find top 3 products with highest profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueEnvironment Name, Internal Notes, Flagged Reason, Last Modified By, Request ID<|end|><|user|>Find top 3 customers with highest revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: rating, storesTracking Code, Validation Notes, Audit Trail, Request ID, Batch Number<|end|><|user|>Sort stores by rating in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, expensesTracking Code, System ID, Origin System, Internal Notes, Project Tag<|end|><|user|>List the lowest expenses values grouped by departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, profitDocument Ref, Environment Name, Audit Trail, Error Code, Timestamp Created<|end|><|user|>Display departments in order of decreasing profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profitProcessing Time, Response Time (ms), Reviewer Comments, Release Version, Batch Number<|end|><|user|>Find top 3 employees with highest profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, revenueReviewer Comments, Project Tag, Manual Override, Document Ref, Alert Triggered<|end|><|user|>Show products in increasing order of revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, ratingTracking Code, Environment Name, Request ID, Batch Number, Sync Status<|end|><|user|>Display customers in order of decreasing rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, expensesWorkflow Step, System ID, Processing Time, Approval Status, Audit Trail<|end|><|user|>List the lowest expenses values grouped by departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, productsSystem ID, Batch Number, Approval Status, Retry Count, Alert Triggered<|end|><|user|>Find top 3 products with highest expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, salesManual Override, Project Tag, Internal Notes, Batch Number, Approval Status<|end|><|user|>Display departments in order of decreasing sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, units_soldTracking Code, Approval Status, Session Token, Environment Name, Error Code<|end|><|user|>List the lowest units_sold values grouped by products.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, revenueApproval Status, Processing Time, Manual Override, Workflow Step, Alert Triggered<|end|><|user|>Show departments in increasing order of revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, revenueSession Token, Archived Flag, Audit Trail, Last Modified By, Timestamp Created<|end|><|user|>List the lowest revenue values grouped by departments.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, ratingBatch Number, Run ID, Flagged Reason, Audit Trail, Error Code<|end|><|user|>Show customers sorted by rating ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, productsSync Status, Archived Flag, Source File Name, Retry Count, System ID<|end|><|user|>Get bottom 10 products based on expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, profitTimestamp Created, Session Token, Retry Count, Last Modified By, Origin System<|end|><|user|>List top 5 departments by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, ratingAlert Triggered, Batch Number, System ID, Retry Count, Manual Override<|end|><|user|>List top 5 customers by rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingBatch Number, System ID, Archived Flag, Manual Override, Sync Status<|end|><|user|>Get bottom 10 products based on rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenue, storesEnvironment Name, Processing Time, Archived Flag, Audit Trail, Error Code<|end|><|user|>Rank stores by revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['revenue_rank'] = df['revenue'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldReviewer Comments, Error Code, Response Time (ms), Run ID, Release Version<|end|><|user|>Show employees sorted by units_sold ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, units_soldResponse Time (ms), Retry Count, Manual Override, Last Modified By, Workflow Step<|end|><|user|>Rank customers by units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['units_sold_rank'] = df['units_sold'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, ratingBackup ID, Release Version, Retry Count, Response Time (ms), System ID<|end|><|user|>Find top 3 employees with highest rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, expensesArchived Flag, Sync Status, Error Code, Audit Trail, Timestamp Created<|end|><|user|>Show departments in increasing order of expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profitBackup ID, Last Modified By, Validation Notes, Session Token, Alert Triggered<|end|><|user|>Rank products by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, revenueSystem ID, Workflow Step, Origin System, Run ID, Project Tag<|end|><|user|>Sort employees by revenue in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, ratingInternal Notes, Backup ID, Run ID, Audit Trail, Approval Status<|end|><|user|>Display customers in order of decreasing rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, storesValidation Notes, Run ID, Request ID, Timestamp Created, Audit Trail<|end|><|user|>Sort stores by sales in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, salesInternal Notes, Workflow Step, Alert Triggered, Approval Status, Request ID<|end|><|user|>Find top 3 customers with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, expensesAlert Triggered, Retry Count, Audit Trail, Run ID, Internal Notes<|end|><|user|>Show departments in increasing order of expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profitRequest ID, Tracking Code, Workflow Step, Session Token, Project Tag<|end|><|user|>Find top 3 customers with highest profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, productsApproval Status, Request ID, Validation Notes, Response Time (ms), Error Code<|end|><|user|>Rank products by expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['expenses_rank'] = df['expenses'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, storesInternal Notes, Origin System, Reviewer Comments, Backup ID, Session Token<|end|><|user|>Show stores sorted by sales ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, ratingTimestamp Created, Approval Status, Release Version, Audit Trail, Workflow Step<|end|><|user|>List the lowest rating values grouped by customers.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, expensesRequest ID, Origin System, Approval Status, System ID, Processing Time<|end|><|user|>List the lowest expenses values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, storesBackup ID, Origin System, Retry Count, Flagged Reason, Request ID<|end|><|user|>Sort stores by expenses in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, storesRelease Version, Audit Trail, Run ID, Approval Status, Last Modified By<|end|><|user|>Find top 3 stores with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, salesLast Modified By, Reviewer Comments, Session Token, Workflow Step, Release Version<|end|><|user|>Get bottom 10 products based on sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: sales, storesOrigin System, Retry Count, Internal Notes, Project Tag, Last Modified By<|end|><|user|>Find top 2 stores with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldDocument Ref, Environment Name, Reviewer Comments, Internal Notes, Timestamp Created<|end|><|user|>Sort employees by units_sold in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesProcessing Time, Flagged Reason, Last Modified By, Response Time (ms), Session Token<|end|><|user|>Get bottom 10 stores based on profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, profitApproval Status, Project Tag, Flagged Reason, Internal Notes, Validation Notes<|end|><|user|>Rank customers by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profitArchived Flag, Environment Name, Document Ref, Last Modified By, Tracking Code<|end|><|user|>List the lowest profit values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: stores, units_soldSystem ID, Approval Status, Backup ID, Validation Notes, Release Version<|end|><|user|>Sort stores by units_sold in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, salesLast Modified By, Request ID, Processing Time, Source File Name, Alert Triggered<|end|><|user|>Display departments in order of decreasing sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, profitProject Tag, Batch Number, Reviewer Comments, System ID, Audit Trail<|end|><|user|>Rank employees by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, ratingTimestamp Created, Source File Name, Validation Notes, Origin System, Batch Number<|end|><|user|>Show employees in increasing order of rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, units_soldManual Override, Document Ref, Backup ID, Internal Notes, Last Modified By<|end|><|user|>Sort departments by units_sold in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, profitProject Tag, Reviewer Comments, Tracking Code, Processing Time, Internal Notes<|end|><|user|>Rank products by profit.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['profit_rank'] = df['profit'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesResponse Time (ms), Archived Flag, Sync Status, Release Version, Source File Name<|end|><|user|>Find top 2 employees with highest sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, productsRetry Count, Archived Flag, Flagged Reason, Alert Triggered, Approval Status<|end|><|user|>Show products in increasing order of expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, salesRetry Count, System ID, Request ID, Processing Time, Session Token<|end|><|user|>Show customers sorted by sales ascending.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, revenueSystem ID, Validation Notes, Request ID, Approval Status, Processing Time<|end|><|user|>List top 5 departments by revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueAlert Triggered, Run ID, Workflow Step, Internal Notes, Project Tag<|end|><|user|>Get bottom 10 customers based on revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueBackup ID, Archived Flag, Environment Name, Retry Count, Response Time (ms)<|end|><|user|>Sort customers by revenue in descending order.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, revenueBackup ID, Reviewer Comments, Last Modified By, Release Version, Processing Time<|end|><|user|>List the lowest revenue values grouped by employees.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldBackup ID, Archived Flag, Alert Triggered, Retry Count, Flagged Reason<|end|><|user|>Rank employees by units_sold.<|end|><|assistant|>", "completion": "{\"df_code\": \"df['units_sold_rank'] = df['units_sold'].rank(ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departments, revenueAlert Triggered, Session Token, Manual Override, Request ID, Retry Count<|end|><|user|>List top 5 departments by revenue.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, ratingEnvironment Name, Reviewer Comments, Audit Trail, Release Version, Alert Triggered<|end|><|user|>Get bottom 10 customers based on rating.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='rating', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: expenses, productsAudit Trail, Environment Name, Backup ID, Internal Notes, Run ID<|end|><|user|>Get bottom 10 products based on expenses.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='expenses', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesLast Modified By, Flagged Reason, Timestamp Created, Validation Notes, Tracking Code<|end|><|user|>List top 5 employees by sales.<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueApproval Status, Workflow Step, Release Version, System ID, Batch Number<|end|><|user|>10 customers with most revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesProject Tag, Tracking Code, Processing Time, Workflow Step, Environment Name<|end|><|user|>stores sorted top by profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsValidation Notes, Workflow Step, Request ID, Retry Count, System ID<|end|><|user|>show top 20 products by ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesInternal Notes, Error Code, Workflow Step, Processing Time, Audit Trail<|end|><|user|>list 10 stores having low to high profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersResponse Time (ms), Last Modified By, Batch Number, Request ID, Sync Status<|end|><|user|>categories sorted least by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueProject Tag, Session Token, Last Modified By, Validation Notes, Flagged Reason<|end|><|user|>get top 20 customers increasing revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersInternal Notes, Release Version, Manual Override, Backup ID, Validation Notes<|end|><|user|>list 5 categories having decreasing orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueManual Override, Processing Time, Origin System, Source File Name, Audit Trail<|end|><|user|>show top 20 customers by revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesRelease Version, Processing Time, Audit Trail, Timestamp Created, Response Time (ms)<|end|><|user|>get top 10 stores bottom profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsSession Token, Last Modified By, System ID, Origin System, Reviewer Comments<|end|><|user|>organize products by ratings (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesError Code, Tracking Code, Environment Name, Internal Notes, Document Ref<|end|><|user|>list 20 employees having increasing sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersAudit Trail, Last Modified By, Alert Triggered, Processing Time, Request ID<|end|><|user|>sort categories by orders in bottom order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesBackup ID, Internal Notes, Tracking Code, Approval Status, Workflow Step<|end|><|user|>arrange all stores according to most profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsTimestamp Created, Origin System, Request ID, Last Modified By, Internal Notes<|end|><|user|>get top 3 products greatest ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueRelease Version, Last Modified By, Approval Status, Batch Number, Session Token<|end|><|user|>get top 20 customers highest revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueWorkflow Step, Origin System, Last Modified By, Response Time (ms), Session Token<|end|><|user|>customers sorted most by revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersRequest ID, Archived Flag, Audit Trail, Workflow Step, Flagged Reason<|end|><|user|>categories sorted bottom by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesLast Modified By, Workflow Step, Error Code, Request ID, Response Time (ms)<|end|><|user|>employees sorted most by sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldApproval Status, Workflow Step, Backup ID, Manual Override, Release Version<|end|><|user|>employees sorted low to high by units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsResponse Time (ms), Tracking Code, Session Token, Reviewer Comments, Last Modified By<|end|><|user|>show top 20 products by ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesProject Tag, Release Version, Timestamp Created, Origin System, Validation Notes<|end|><|user|>3 employees with greatest sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueSession Token, Run ID, Origin System, Validation Notes, Reviewer Comments<|end|><|user|>customers sorted bottom by revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesRelease Version, Source File Name, Alert Triggered, Sync Status, Origin System<|end|><|user|>5 employees with greatest sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesError Code, Alert Triggered, Response Time (ms), Last Modified By, Validation Notes<|end|><|user|>show top 5 employees by sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsProcessing Time, Request ID, Tracking Code, Manual Override, Validation Notes<|end|><|user|>organize products by ratings (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersSync Status, Environment Name, Audit Trail, Origin System, Request ID<|end|><|user|>categories sorted ascending by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersProject Tag, Retry Count, Origin System, Response Time (ms), Tracking Code<|end|><|user|>categories sorted top by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesTimestamp Created, Workflow Step, Approval Status, Environment Name, System ID<|end|><|user|>show top 10 employees by sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueArchived Flag, Source File Name, Alert Triggered, Audit Trail, Batch Number<|end|><|user|>customers sorted descending by revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueRun ID, Sync Status, Timestamp Created, Manual Override, Last Modified By<|end|><|user|>arrange all customers according to low to high revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersError Code, Source File Name, Audit Trail, Batch Number, Run ID<|end|><|user|>get top 10 categories bottom orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesManual Override, Retry Count, Batch Number, Request ID, Approval Status<|end|><|user|>order stores based on profit (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsRun ID, Flagged Reason, Archived Flag, Audit Trail, Origin System<|end|><|user|>order products based on ratings (greatest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldTimestamp Created, Batch Number, System ID, Request ID, Reviewer Comments<|end|><|user|>3 employees with least units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldSync Status, Tracking Code, Alert Triggered, Timestamp Created, Release Version<|end|><|user|>get top 5 employees decreasing units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesOrigin System, Run ID, Validation Notes, Response Time (ms), System ID<|end|><|user|>organize stores by profit (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesBackup ID, Retry Count, Release Version, Audit Trail, Last Modified By<|end|><|user|>sort stores by profit in least order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesRelease Version, Timestamp Created, Workflow Step, Alert Triggered, Source File Name<|end|><|user|>arrange all stores according to high to low profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldWorkflow Step, Manual Override, Reviewer Comments, Error Code, Processing Time<|end|><|user|>organize employees by units_sold (greatest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersApproval Status, Timestamp Created, Alert Triggered, Run ID, Audit Trail<|end|><|user|>sort categories by orders in most order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesManual Override, Processing Time, Origin System, Timestamp Created, Error Code<|end|><|user|>get top 5 employees top sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsLast Modified By, Environment Name, Response Time (ms), Audit Trail, Approval Status<|end|><|user|>order products based on ratings (most)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsSync Status, Last Modified By, Origin System, Request ID, Manual Override<|end|><|user|>organize products by ratings (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersRelease Version, Backup ID, Reviewer Comments, Internal Notes, Error Code<|end|><|user|>order categories based on orders (descending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesDocument Ref, Origin System, Request ID, Reviewer Comments, Source File Name<|end|><|user|>list 5 employees having least sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldValidation Notes, Manual Override, Response Time (ms), Audit Trail, Error Code<|end|><|user|>arrange all employees according to decreasing units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesDocument Ref, Request ID, Manual Override, Session Token, Retry Count<|end|><|user|>get top 20 employees highest sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesAudit Trail, Tracking Code, Batch Number, Sync Status, Source File Name<|end|><|user|>display 3 stores sorted by profit (ascending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueOrigin System, Archived Flag, Approval Status, Processing Time, Timestamp Created<|end|><|user|>arrange all customers according to low to high revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesError Code, Reviewer Comments, Project Tag, Document Ref, Processing Time<|end|><|user|>employees sorted least by sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueSession Token, Audit Trail, Origin System, Workflow Step, Response Time (ms)<|end|><|user|>10 customrs with most Revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesRelease Version, Timestamp Created, Source File Name, Run ID, Approval Status<|end|><|user|>STORES sorted top by Profitt<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsRetry Count, Archived Flag, Tracking Code, Alert Triggered, Validation Notes<|end|><|user|>show top 20 PRODUCTS by RATINGS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesSync Status, Run ID, Audit Trail, Timestamp Created, Session Token<|end|><|user|>list 10 Storez having low to high PROFIT<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersResponse Time (ms), Error Code, Last Modified By, Flagged Reason, Document Ref<|end|><|user|>categores sorted least by ORDERS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueApproval Status, Flagged Reason, Source File Name, Last Modified By, Manual Override<|end|><|user|>get top 20 customrs increasing REVENUE<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersManual Override, Sync Status, Internal Notes, Batch Number, Alert Triggered<|end|><|user|>list 5 categores having decreasing odders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueTimestamp Created, Session Token, Request ID, Tracking Code, Retry Count<|end|><|user|>show top 20 customrs by REVENUE<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesTracking Code, Processing Time, Flagged Reason, Workflow Step, Manual Override<|end|><|user|>get top 10 Storez bottom proffit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=True).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsSync Status, Alert Triggered, Approval Status, Source File Name, Run ID<|end|><|user|>organize productz by raatings (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesLast Modified By, Validation Notes, Backup ID, Response Time (ms), Origin System<|end|><|user|>list 20 empoyees having increasing sails<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersResponse Time (ms), Batch Number, Source File Name, Last Modified By, Session Token<|end|><|user|>sort CategorieS by Orderz in bottom order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesRun ID, Approval Status, Release Version, Environment Name, Alert Triggered<|end|><|user|>arrange all stoers according to most PROFIT<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsBatch Number, Session Token, Document Ref, Project Tag, Origin System<|end|><|user|>get top 3 PRODUCTS greatest RATINGS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueRun ID, Workflow Step, Release Version, Origin System, Tracking Code<|end|><|user|>get top 20 custmers highest Revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueApproval Status, Retry Count, Archived Flag, Environment Name, Last Modified By<|end|><|user|>CustomerS sorted most by reveneu<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersRelease Version, Environment Name, Origin System, Project Tag, Flagged Reason<|end|><|user|>CategorieS sorted bottom by ORDERS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesRelease Version, Tracking Code, Session Token, Run ID, Archived Flag<|end|><|user|>empoyees sorted most by Sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldValidation Notes, Alert Triggered, Environment Name, Flagged Reason, Session Token<|end|><|user|>EMPLoyees sorted low to high by unit_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsTimestamp Created, Origin System, Audit Trail, Processing Time, Workflow Step<|end|><|user|>show top 20 PRODUCTS by ratingz<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesRun ID, Audit Trail, Request ID, Sync Status, Release Version<|end|><|user|>3 empoyees with greatest sails<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueRelease Version, Audit Trail, Timestamp Created, Sync Status, Session Token<|end|><|user|>customrs sorted bottom by Revenue<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesEnvironment Name, Audit Trail, Document Ref, Manual Override, System ID<|end|><|user|>5 empoyees with greatest SALES<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesEnvironment Name, Document Ref, Sync Status, Backup ID, Run ID<|end|><|user|>show top 5 EMPLoyees by SALES<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsOrigin System, Alert Triggered, Request ID, Run ID, Audit Trail<|end|><|user|>organize PRODUCTS by RATINGS (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersFlagged Reason, Retry Count, Timestamp Created, Workflow Step, Origin System<|end|><|user|>categores sorted ascending by odders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersEnvironment Name, System ID, Last Modified By, Audit Trail, Validation Notes<|end|><|user|>categoriess sorted top by ORDERS<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesRequest ID, Last Modified By, Retry Count, Processing Time, Manual Override<|end|><|user|>show top 10 empoyees by Sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueSource File Name, Origin System, Run ID, Flagged Reason, Sync Status<|end|><|user|>CustomerS sorted descending by REVENUE<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customers, revenueApproval Status, Flagged Reason, Archived Flag, Workflow Step, Manual Override<|end|><|user|>arrange all custmers according to low to high reveneu<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='revenue', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersRequest ID, Release Version, Run ID, Backup ID, Audit Trail<|end|><|user|>show top eight categories by orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True).head(8)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesProject Tag, System ID, Origin System, Reviewer Comments, Flagged Reason<|end|><|user|>list two stores having most profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldError Code, Reviewer Comments, Document Ref, Response Time (ms), Internal Notes<|end|><|user|>show top two employees by units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldArchived Flag, Project Tag, Workflow Step, Flagged Reason, Internal Notes<|end|><|user|>three employees with bottom units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldRequest ID, Session Token, Error Code, Timestamp Created, Tracking Code<|end|><|user|>list three employees having greatest units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldAlert Triggered, Run ID, Flagged Reason, Request ID, Manual Override<|end|><|user|>display five employees sorted by units_sold (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldWorkflow Step, Response Time (ms), Audit Trail, Request ID, Reviewer Comments<|end|><|user|>display fifty employees sorted by units_sold (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(50)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldReviewer Comments, Session Token, Alert Triggered, Archived Flag, Last Modified By<|end|><|user|>eight employees with smallest units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(8)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesSession Token, Reviewer Comments, Workflow Step, Response Time (ms), Flagged Reason<|end|><|user|>list four employees having least sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersRelease Version, Origin System, System ID, Sync Status, Alert Triggered<|end|><|user|>display nine categories sorted by orders (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=True).head(9)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsBackup ID, Project Tag, Workflow Step, Timestamp Created, Approval Status<|end|><|user|>display twenty products sorted by ratings (decreasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesFlagged Reason, Error Code, Validation Notes, System ID, Audit Trail<|end|><|user|>display six employees sorted by sales (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldTracking Code, Release Version, Archived Flag, Reviewer Comments, Session Token<|end|><|user|>display thirty employees sorted by units_sold (increasing)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(30)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsRequest ID, Sync Status, Tracking Code, Timestamp Created, Source File Name<|end|><|user|>five products with low to high ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categories, ordersBatch Number, Document Ref, Processing Time, Reviewer Comments, System ID<|end|><|user|>get top seven categories most orders<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='orders', ascending=False).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldResponse Time (ms), Session Token, Run ID, Archived Flag, Backup ID<|end|><|user|>show top twenty employees by units_sold<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, units_soldProject Tag, Retry Count, Release Version, Document Ref, Request ID<|end|><|user|>display fifty employees sorted by units_sold (bottom)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='units_sold', ascending=True).head(50)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: employees, salesAudit Trail, Environment Name, Processing Time, Tracking Code, Last Modified By<|end|><|user|>list seven employees having ascending sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='sales', ascending=True).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: products, ratingsProject Tag, Reviewer Comments, Backup ID, System ID, Document Ref<|end|><|user|>get top four products least ratings<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='ratings', ascending=True).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: profit, storesLast Modified By, Timestamp Created, Reviewer Comments, Error Code, Tracking Code<|end|><|user|>show top six stores by profit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='profit', ascending=False).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting Updated, jobsFlagged Reason, Processing Time, Origin System, Document Ref, Alert Triggered<|end|><|user|>display six entries sorted by Posting Updated (highest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Updated', ascending=False).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title Classification, jobsResponse Time (ms), Retry Count, Workflow Step, Flagged Reason, Origin System<|end|><|user|>sort jobs by Title Classification in low to high order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Title Classification', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title Classification, jobsEnvironment Name, Request ID, Sync Status, Session Token, Approval Status<|end|><|user|>list three jobs with highest Title Classification<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Title Classification', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Division/Work Unit, jobsValidation Notes, Response Time (ms), Environment Name, Approval Status, Retry Count<|end|><|user|>arrange job entries according to highest Division/Work Unit<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Division/Work Unit', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Full-Time/Part-Time indicator, jobsRun ID, Error Code, Workflow Step, Tracking Code, Project Tag<|end|><|user|>arrange job entries according to decreasing Full-Time/Part-Time indicator<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Full-Time/Part-Time indicator', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Residency Requirement, jobsProject Tag, Flagged Reason, Session Token, Internal Notes, Processing Time<|end|><|user|>display nine entries sorted by Residency Requirement (highest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Residency Requirement', ascending=False).head(9)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting Date, jobsError Code, Tracking Code, Manual Override, Reviewer Comments, Approval Status<|end|><|user|>display five entries sorted by Posting Date (low to high)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Date', ascending=True).head(5)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Post Until, jobsLast Modified By, Run ID, Error Code, Request ID, Project Tag<|end|><|user|>organize postings by Post Until descending<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Post Until', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Post Until, jobsEnvironment Name, Workflow Step, Sync Status, Processing Time, Flagged Reason<|end|><|user|>sort jobs by Post Until in top order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Post Until', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range To, jobsProject Tag, Tracking Code, Retry Count, Environment Name, System ID<|end|><|user|>organize postings by Salary Range To increasing<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range To', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Division/Work Unit, jobsDocument Ref, Release Version, Manual Override, Approval Status, Batch Number<|end|><|user|>display two entries sorted by Division/Work Unit (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Division/Work Unit', ascending=True).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting Date, jobsSystem ID, Request ID, Project Tag, Flagged Reason, Batch Number<|end|><|user|>display eight entries sorted by Posting Date (smallest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Date', ascending=True).head(8)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range From, jobsError Code, Project Tag, Flagged Reason, Tracking Code, Archived Flag<|end|><|user|>list seven jobs with bottom Salary Range From<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range From', ascending=True).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting Updated, jobsLast Modified By, Run ID, System ID, Retry Count, Project Tag<|end|><|user|>display seven entries sorted by Posting Updated (descending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Updated', ascending=False).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Preferred Skills, jobsProject Tag, Origin System, Validation Notes, Internal Notes, Processing Time<|end|><|user|>thirty job postings with top Preferred Skills<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Preferred Skills', ascending=False).head(30)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range From, jobsOrigin System, Workflow Step, Audit Trail, Run ID, Timestamp Created<|end|><|user|>four job postings with increasing Salary Range From<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range From', ascending=True).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Recruitment Contact, jobsSource File Name, Session Token, System ID, Backup ID, Approval Status<|end|><|user|>organize postings by Recruitment Contact least<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Recruitment Contact', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Work Location 1, jobsRetry Count, Internal Notes, Request ID, Session Token, Sync Status<|end|><|user|>list four jobs with high to low Work Location 1<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Work Location 1', ascending=False).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range From, jobsManual Override, Internal Notes, Error Code, Source File Name, Project Tag<|end|><|user|>sort jobs by Salary Range From in highest order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range From', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Minimum Qual Requirements, jobsRelease Version, Sync Status, Archived Flag, Backup ID, Tracking Code<|end|><|user|>list two jobs with most Minimum Qual Requirements<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Minimum Qual Requirements', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job Category, jobsLast Modified By, Sync Status, Manual Override, Reviewer Comments, Origin System<|end|><|user|>nine job postings with increasing Job Category<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Job Category', ascending=True).head(9)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: To Apply, jobsProcessing Time, Alert Triggered, Session Token, Release Version, Validation Notes<|end|><|user|>sort jobs by To Apply in bottom order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='To Apply', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Recruitment Contact, jobsSource File Name, Archived Flag, Retry Count, Response Time (ms), Reviewer Comments<|end|><|user|>forty job postings with ascending Recruitment Contact<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Recruitment Contact', ascending=True).head(40)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title Classification, jobsRun ID, Session Token, Audit Trail, Alert Triggered, Archived Flag<|end|><|user|>display seven entries sorted by Title Classification (greatest)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Title Classification', ascending=False).head(7)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title Code No, jobsSource File Name, Validation Notes, Reviewer Comments, Project Tag, Timestamp Created<|end|><|user|>organize postings by Title Code No most<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Title Code No', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service Title, jobsValidation Notes, Alert Triggered, System ID, Run ID, Response Time (ms)<|end|><|user|>show top two jobs by Civil Service Title<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Civil Service Title', ascending=False).head(2)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting Date, jobsValidation Notes, Workflow Step, Error Code, Tracking Code, Batch Number<|end|><|user|>organize postings by Posting Date descending<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Posting Date', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Full-Time/Part-Time indicator, jobsRelease Version, Audit Trail, Run ID, Validation Notes, Error Code<|end|><|user|>list ten jobs with top Full-Time/Part-Time indicator<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Full-Time/Part-Time indicator', ascending=False).head(10)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Residency Requirement, jobsRelease Version, Retry Count, Approval Status, Reviewer Comments, Processing Time<|end|><|user|>display four entries sorted by Residency Requirement (descending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Residency Requirement', ascending=False).head(4)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Preferred Skills, jobsArchived Flag, Backup ID, System ID, Sync Status, Approval Status<|end|><|user|>show top six jobs by Preferred Skills<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Preferred Skills', ascending=True).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Work Location 1, jobsRequest ID, Retry Count, Response Time (ms), Reviewer Comments, Internal Notes<|end|><|user|>display six entries sorted by Work Location 1 (most)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Work Location 1', ascending=False).head(6)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Frequency, jobsApproval Status, Error Code, Sync Status, Origin System, Archived Flag<|end|><|user|>order jobs based on Salary Frequency (ascending)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Frequency', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Full-Time/Part-Time indicator, jobsSystem ID, Document Ref, Request ID, Alert Triggered, Tracking Code<|end|><|user|>show top three jobs by Full-Time/Part-Time indicator<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Full-Time/Part-Time indicator', ascending=False).head(3)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Work Location 1, jobsError Code, Tracking Code, Workflow Step, Run ID, Archived Flag<|end|><|user|>twenty job postings with ascending Work Location 1<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Work Location 1', ascending=True).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Frequency, jobsProject Tag, Request ID, System ID, Source File Name, Sync Status<|end|><|user|>sort jobs by Salary Frequency in increasing order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Frequency', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Frequency, jobsSystem ID, Sync Status, Document Ref, Backup ID, Timestamp Created<|end|><|user|>show top forty jobs by Salary Frequency<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Frequency', ascending=False).head(40)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range To, jobsSync Status, Validation Notes, Source File Name, Release Version, Document Ref<|end|><|user|>order jobs based on Salary Range To (least)<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range To', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job Category, jobsSync Status, Request ID, Last Modified By, Environment Name, Reviewer Comments<|end|><|user|>arrange job entries according to descending Job Category<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Job Category', ascending=False)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range To, jobsManual Override, Tracking Code, Backup ID, Approval Status, Response Time (ms)<|end|><|user|>sort jobs by Salary Range To in least order<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Salary Range To', ascending=True)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job Description, jobsOrigin System, Retry Count, Batch Number, Run ID, Internal Notes<|end|><|user|>show top twenty jobs by Job Description<|end|><|assistant|>", "completion": "{\"df_code\": \"df.sort_values(by='Job Description', ascending=False).head(20)\", \"query_pred_category\": \"sorting_&_ranking\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailRelease Version, Processing Time, Reviewer Comments, Audit Trail, Batch Number<|end|><|user|>Get rows where email field has the substring 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityAlert Triggered, Sync Status, Request ID, Internal Notes, Source File Name<|end|><|user|>Find all values in city that end with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameBatch Number, Origin System, Archived Flag, Document Ref, Session Token<|end|><|user|>List all records where product_name includes 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameProject Tag, Manual Override, Error Code, Tracking Code, Session Token<|end|><|user|>Get rows where customer_name field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryAudit Trail, Workflow Step, Source File Name, Environment Name, Reviewer Comments<|end|><|user|>Find all values in category that end with 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.endswith('Manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameApproval Status, Reviewer Comments, Alert Triggered, Audit Trail, Manual Override<|end|><|user|>Filter rows where product_name contains 'Service' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameValidation Notes, Approval Status, Retry Count, Session Token, Batch Number<|end|><|user|>Filter rows where customer_name contains 'Service' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityResponse Time (ms), Approval Status, Release Version, Session Token, Archived Flag<|end|><|user|>List all records where city includes 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityValidation Notes, Run ID, Document Ref, Audit Trail, Last Modified By<|end|><|user|>Filter rows where city contains 'Store' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryBatch Number, System ID, Workflow Step, Alert Triggered, Manual Override<|end|><|user|>Find category values that contain 'Pro' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameRetry Count, Processing Time, Response Time (ms), Error Code, Manual Override<|end|><|user|>List records where customer_name begins with 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('Inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRun ID, Error Code, Flagged Reason, Validation Notes, Reviewer Comments<|end|><|user|>List all records where department includes 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryAudit Trail, Source File Name, Reviewer Comments, Last Modified By, Workflow Step<|end|><|user|>Get rows where category field has the substring 'sales'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentApproval Status, Sync Status, Validation Notes, Workflow Step, Retry Count<|end|><|user|>Get rows where department field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameManual Override, Environment Name, Backup ID, Request ID, Validation Notes<|end|><|user|>Get rows where product_name field has the substring 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameTracking Code, Workflow Step, Retry Count, Environment Name, Alert Triggered<|end|><|user|>Find customer_name values that contain 'Manager' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityBatch Number, Response Time (ms), Reviewer Comments, Approval Status, Validation Notes<|end|><|user|>List all records where city includes 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailLast Modified By, Project Tag, Release Version, System ID, Tracking Code<|end|><|user|>Filter rows where email contains 'North' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('North', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityRelease Version, Error Code, Validation Notes, Flagged Reason, Origin System<|end|><|user|>List records where city begins with 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('Manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityBackup ID, Document Ref, Session Token, Approval Status, Validation Notes<|end|><|user|>List records where city begins with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityRelease Version, Backup ID, Workflow Step, Processing Time, Batch Number<|end|><|user|>Get rows where city field has the substring 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameInternal Notes, Environment Name, Reviewer Comments, Release Version, Approval Status<|end|><|user|>Find customer_name values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityArchived Flag, Tracking Code, Timestamp Created, Response Time (ms), Reviewer Comments<|end|><|user|>List all records where city includes 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentArchived Flag, Request ID, Alert Triggered, Session Token, Backup ID<|end|><|user|>List records where department begins with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameWorkflow Step, Tracking Code, Flagged Reason, Alert Triggered, Approval Status<|end|><|user|>List all records where customer_name includes 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRetry Count, Batch Number, Alert Triggered, Request ID, Audit Trail<|end|><|user|>Find department values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categorySystem ID, Backup ID, Last Modified By, Document Ref, Audit Trail<|end|><|user|>List records where category begins with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameBackup ID, Workflow Step, Batch Number, Flagged Reason, Processing Time<|end|><|user|>Get rows where customer_name starts with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityProcessing Time, Environment Name, Reviewer Comments, Audit Trail, Tracking Code<|end|><|user|>List all records where city includes 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameSource File Name, Workflow Step, Retry Count, Manual Override, Approval Status<|end|><|user|>Find product_name values that contain 'North' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('North', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityProcessing Time, Error Code, Release Version, Origin System, Environment Name<|end|><|user|>Show entries where city ends with 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('Pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryBackup ID, Last Modified By, Audit Trail, Project Tag, Flagged Reason<|end|><|user|>Find all category that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentWorkflow Step, Sync Status, Backup ID, Response Time (ms), Project Tag<|end|><|user|>Show entries where department ends with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameProject Tag, Backup ID, Workflow Step, Audit Trail, Flagged Reason<|end|><|user|>Get rows where product_name starts with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailProject Tag, Session Token, Internal Notes, Workflow Step, Backup ID<|end|><|user|>Find email values that contain 'Service' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityInternal Notes, Timestamp Created, Flagged Reason, Batch Number, Reviewer Comments<|end|><|user|>Get rows where city field has the substring 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityResponse Time (ms), Validation Notes, Processing Time, Approval Status, Archived Flag<|end|><|user|>Find all city that contain the word 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameOrigin System, Run ID, Batch Number, Project Tag, Document Ref<|end|><|user|>Get rows where product_name starts with 'Manager'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameProcessing Time, Source File Name, Run ID, Flagged Reason, Sync Status<|end|><|user|>Get rows where product_name field has the substring 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameTracking Code, Archived Flag, Workflow Step, Flagged Reason, Alert Triggered<|end|><|user|>Find all customer_name that contain the word 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityResponse Time (ms), Timestamp Created, Processing Time, Retry Count, Reviewer Comments<|end|><|user|>Find all values in city that end with 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('Inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameTracking Code, Internal Notes, System ID, Request ID, Source File Name<|end|><|user|>List all records where product_name includes 'North'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('North', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryBatch Number, Last Modified By, Response Time (ms), Flagged Reason, Release Version<|end|><|user|>Find all entries with category matching 'Store' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'] == 'Store']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameTimestamp Created, Validation Notes, Request ID, Sync Status, Origin System<|end|><|user|>Find all values in customer_name that end with 'North'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.endswith('North', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailArchived Flag, Error Code, Validation Notes, Flagged Reason, Manual Override<|end|><|user|>Find all entries with email matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryTracking Code, Validation Notes, Backup ID, Processing Time, Approval Status<|end|><|user|>Find category values that contain 'Manager' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryBackup ID, Retry Count, Session Token, Flagged Reason, Tracking Code<|end|><|user|>Find category values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryBackup ID, Approval Status, Source File Name, Project Tag, Sync Status<|end|><|user|>Find all category that contain the word 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentValidation Notes, System ID, Audit Trail, Workflow Step, Tracking Code<|end|><|user|>List all records where department includes 'sales'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentDocument Ref, Workflow Step, Backup ID, Validation Notes, Last Modified By<|end|><|user|>Find department values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameSource File Name, Timestamp Created, Flagged Reason, Backup ID, Origin System<|end|><|user|>Show entries where customer_name ends with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.endswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameDocument Ref, Request ID, Workflow Step, Internal Notes, Run ID<|end|><|user|>List records where product_name begins with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailWorkflow Step, Request ID, Approval Status, Flagged Reason, Audit Trail<|end|><|user|>Find all email that contain the word 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailRelease Version, Internal Notes, Project Tag, Alert Triggered, Session Token<|end|><|user|>Find all values in email that end with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameWorkflow Step, Flagged Reason, Approval Status, Internal Notes, Sync Status<|end|><|user|>Find all customer_name that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentTimestamp Created, Approval Status, Manual Override, Session Token, Backup ID<|end|><|user|>Find department values that contain 'Service' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRun ID, Internal Notes, Validation Notes, Flagged Reason, Source File Name<|end|><|user|>Get rows where department starts with 'sales'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRelease Version, Sync Status, Alert Triggered, Internal Notes, Workflow Step<|end|><|user|>Find department values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailApproval Status, Release Version, Manual Override, Environment Name, System ID<|end|><|user|>List all records where email includes 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameRequest ID, Last Modified By, Tracking Code, Document Ref, Retry Count<|end|><|user|>List records where customer_name begins with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameFlagged Reason, Internal Notes, Manual Override, Reviewer Comments, Request ID<|end|><|user|>Find customer_name values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameTracking Code, Retry Count, Error Code, Origin System, Timestamp Created<|end|><|user|>Find all customer_name that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentValidation Notes, Document Ref, Flagged Reason, Audit Trail, Response Time (ms)<|end|><|user|>Find all values in department that end with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailValidation Notes, Tracking Code, Alert Triggered, Workflow Step, Retry Count<|end|><|user|>Find email values that contain 'Inc' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentBackup ID, Flagged Reason, Manual Override, Reviewer Comments, Project Tag<|end|><|user|>Get rows where department field has the substring 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityLast Modified By, Audit Trail, Archived Flag, Timestamp Created, Validation Notes<|end|><|user|>Find all entries with city matching 'North' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'] == 'North']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailOrigin System, Response Time (ms), Request ID, Audit Trail, Batch Number<|end|><|user|>List records where email begins with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryRun ID, Approval Status, Backup ID, Session Token, Workflow Step<|end|><|user|>Get rows where category starts with 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.startswith('Pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentValidation Notes, Retry Count, Batch Number, Environment Name, Timestamp Created<|end|><|user|>Find all entries with department matching 'com' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'] == 'com']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityValidation Notes, Manual Override, Batch Number, Approval Status, Timestamp Created<|end|><|user|>Find all values in city that end with 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('Pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameReviewer Comments, Audit Trail, Approval Status, System ID, Timestamp Created<|end|><|user|>Get rows where customer_name starts with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameSystem ID, Response Time (ms), Batch Number, Session Token, Approval Status<|end|><|user|>Find all values in product_name that end with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameManual Override, Reviewer Comments, Processing Time, Internal Notes, Source File Name<|end|><|user|>Find all values in product_name that end with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryOrigin System, Validation Notes, Processing Time, Retry Count, Sync Status<|end|><|user|>Get rows where category field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameSession Token, Retry Count, Release Version, Batch Number, Tracking Code<|end|><|user|>Find customer_name values that contain 'Store' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('Store', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentValidation Notes, Reviewer Comments, Processing Time, Backup ID, Tracking Code<|end|><|user|>Find all entries with department matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailReviewer Comments, Batch Number, Origin System, System ID, Last Modified By<|end|><|user|>Get rows where email starts with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: citySystem ID, Environment Name, Last Modified By, Origin System, Reviewer Comments<|end|><|user|>Find all entries with city matching 'com' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'] == 'com']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameWorkflow Step, Release Version, Reviewer Comments, Response Time (ms), Timestamp Created<|end|><|user|>Get rows where customer_name starts with 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentManual Override, Approval Status, Response Time (ms), Last Modified By, Sync Status<|end|><|user|>Find all entries with department matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentValidation Notes, System ID, Audit Trail, Archived Flag, Response Time (ms)<|end|><|user|>Find department values that contain 'Manager' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameApproval Status, Sync Status, Workflow Step, Validation Notes, Reviewer Comments<|end|><|user|>List records where product_name begins with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: citySource File Name, Environment Name, Session Token, Workflow Step, Document Ref<|end|><|user|>Get rows where city starts with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameDocument Ref, Processing Time, Retry Count, Timestamp Created, Workflow Step<|end|><|user|>Filter rows where product_name contains 'Manager' substring.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameRun ID, Workflow Step, System ID, Manual Override, Audit Trail<|end|><|user|>List records where product_name begins with 'North'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('North', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailTimestamp Created, Backup ID, Retry Count, Reviewer Comments, Request ID<|end|><|user|>Get rows where email field has the substring 'Pro'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('Pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryReviewer Comments, Source File Name, Processing Time, Run ID, Manual Override<|end|><|user|>List all records where category includes 'com'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailRelease Version, Audit Trail, Origin System, System ID, Batch Number<|end|><|user|>Find all values in email that end with 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('Service', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameFlagged Reason, Timestamp Created, Document Ref, Request ID, Workflow Step<|end|><|user|>Find all customer_name that contain the word 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: customer_nameWorkflow Step, Reviewer Comments, Sync Status, Environment Name, Batch Number<|end|><|user|>List records where customer_name begins with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['customer_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentResponse Time (ms), Release Version, Session Token, Alert Triggered, Error Code<|end|><|user|>Get rows where department field has the substring 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameRun ID, Manual Override, Document Ref, Backup ID, Project Tag<|end|><|user|>Get rows where product_name starts with 'Store'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('Store', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRun ID, Approval Status, Sync Status, Backup ID, Response Time (ms)<|end|><|user|>List all records where department includes 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('New', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: categoryValidation Notes, Manual Override, Response Time (ms), Archived Flag, Retry Count<|end|><|user|>Find category values that contain 'Pro' case-insensitively.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['category'].str.contains('Pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailManual Override, Retry Count, Alert Triggered, Backup ID, Session Token<|end|><|user|>List records where email begins with 'Inc'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('Inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameResponse Time (ms), Environment Name, Error Code, Approval Status, Validation Notes<|end|><|user|>List all records where product_name includes 'Service'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Service', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentError Code, Session Token, Sync Status, Archived Flag, Validation Notes<|end|><|user|>Get rows where department starts with 'New'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('New', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentSync Status, Run ID, Approval Status, Flagged Reason, System ID<|end|><|user|>Get rows where department field has the substring 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentValidation Notes, Sync Status, Internal Notes, Alert Triggered, Request ID<|end|><|user|>List records where department begins with 'tech'.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailInternal Notes, Processing Time, Workflow Step, Approval Status, Session Token<|end|><|user|>Find all entries with email matching 'Service' exactly.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'] == 'Service']\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameEnvironment Name, Internal Notes, Project Tag, Alert Triggered, Batch Number<|end|><|user|>find company_name ending in Sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailSource File Name, Internal Notes, Sync Status, Document Ref, Batch Number<|end|><|user|>find email ending in salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentEnvironment Name, Flagged Reason, Workflow Step, Request ID, Release Version<|end|><|user|>department has 'managr' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameResponse Time (ms), Tracking Code, Reviewer Comments, Retry Count, Source File Name<|end|><|user|>product_name has word salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: citySource File Name, Environment Name, Document Ref, Tracking Code, Run ID<|end|><|user|>city has 'Manager' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameInternal Notes, Manual Override, Response Time (ms), System ID, Reviewer Comments<|end|><|user|>get records with product_name beginning as Tech<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameBackup ID, Audit Trail, Request ID, Alert Triggered, Document Ref<|end|><|user|>get values with product_name trailing with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailLast Modified By, Response Time (ms), Audit Trail, Processing Time, Document Ref<|end|><|user|>find rows where email includes 'Manager'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailBackup ID, Project Tag, Source File Name, Internal Notes, Archived Flag<|end|><|user|>email has word mngr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleError Code, Session Token, Document Ref, Timestamp Created, Workflow Step<|end|><|user|>get records with job_title beginning as mngr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityAudit Trail, Source File Name, System ID, Internal Notes, Manual Override<|end|><|user|>show rows where city starts with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameDocument Ref, Validation Notes, Approval Status, Project Tag, Retry Count<|end|><|user|>product_name field holds value support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('support', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityManual Override, Approval Status, Backup ID, Run ID, Batch Number<|end|><|user|>city has word hiringg<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailRun ID, Workflow Step, Project Tag, Flagged Reason, Sync Status<|end|><|user|>find email ending in dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameTracking Code, Request ID, Archived Flag, Environment Name, Approval Status<|end|><|user|>get values with product_name trailing with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleWorkflow Step, Validation Notes, System ID, Flagged Reason, Retry Count<|end|><|user|>get values with job_title trailing with inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailAlert Triggered, Response Time (ms), Source File Name, Approval Status, Batch Number<|end|><|user|>find rows where email includes 'manager'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleFlagged Reason, Request ID, Project Tag, Last Modified By, Batch Number<|end|><|user|>get records with job_title beginning as pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameTimestamp Created, Sync Status, Error Code, Session Token, Workflow Step<|end|><|user|>find product_name ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentError Code, System ID, Validation Notes, Last Modified By, Batch Number<|end|><|user|>find department ending in support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRequest ID, Retry Count, Alert Triggered, Source File Name, Workflow Step<|end|><|user|>list where department ends with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityAlert Triggered, Response Time (ms), Release Version, Sync Status, Batch Number<|end|><|user|>show rows where city starts with sup<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleAlert Triggered, Tracking Code, Validation Notes, Origin System, Manual Override<|end|><|user|>job_title has word managr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityReviewer Comments, Origin System, Batch Number, Project Tag, Retry Count<|end|><|user|>list where city ends with hiringg<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentSync Status, Origin System, Workflow Step, Last Modified By, Document Ref<|end|><|user|>department field begins with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityRetry Count, Source File Name, Validation Notes, Run ID, Archived Flag<|end|><|user|>find city ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleTracking Code, Project Tag, Timestamp Created, Validation Notes, Session Token<|end|><|user|>job_title field begins with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentEnvironment Name, Archived Flag, Retry Count, Audit Trail, Timestamp Created<|end|><|user|>find department ending in managr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailWorkflow Step, Request ID, Approval Status, Response Time (ms), System ID<|end|><|user|>get values with email trailing with manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameResponse Time (ms), Request ID, Tracking Code, Retry Count, Timestamp Created<|end|><|user|>list where company_name ends with .COM<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityError Code, Request ID, Timestamp Created, Workflow Step, Internal Notes<|end|><|user|>find rows where city includes 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityValidation Notes, Processing Time, Approval Status, Archived Flag, Retry Count<|end|><|user|>find city ending in support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentAudit Trail, Approval Status, Project Tag, Last Modified By, Timestamp Created<|end|><|user|>list where department ends with Hiring<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentApproval Status, Release Version, Source File Name, Audit Trail, System ID<|end|><|user|>show all department with tech in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameWorkflow Step, Source File Name, Run ID, System ID, Alert Triggered<|end|><|user|>find rows where product_name includes 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleRelease Version, Flagged Reason, Backup ID, Workflow Step, System ID<|end|><|user|>job_title has 'mngr' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameDocument Ref, Processing Time, Archived Flag, Internal Notes, Audit Trail<|end|><|user|>product_name has word INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailFlagged Reason, Approval Status, Audit Trail, Validation Notes, Retry Count<|end|><|user|>show rows where email starts with sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameAudit Trail, Release Version, Error Code, Source File Name, Workflow Step<|end|><|user|>get records with product_name beginning as TECH<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentOrigin System, Validation Notes, Document Ref, Processing Time, Archived Flag<|end|><|user|>find department ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailTimestamp Created, Workflow Step, Alert Triggered, Audit Trail, Backup ID<|end|><|user|>get records with email beginning as Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleSession Token, Response Time (ms), Source File Name, Request ID, Alert Triggered<|end|><|user|>job_title has 'hire' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameValidation Notes, Manual Override, Retry Count, System ID, Approval Status<|end|><|user|>company_name field holds value Sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRetry Count, Request ID, Workflow Step, Approval Status, Run ID<|end|><|user|>show rows where department starts with pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentResponse Time (ms), Sync Status, Error Code, Environment Name, Project Tag<|end|><|user|>department has word inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailProcessing Time, Internal Notes, Flagged Reason, Session Token, Tracking Code<|end|><|user|>show rows where email starts with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameSession Token, Document Ref, Manual Override, Flagged Reason, Validation Notes<|end|><|user|>get values with product_name trailing with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameSync Status, System ID, Audit Trail, Timestamp Created, Internal Notes<|end|><|user|>find product_name ending in Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameManual Override, Timestamp Created, Internal Notes, Flagged Reason, Sync Status<|end|><|user|>product_name field begins with TECH<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRelease Version, Run ID, Timestamp Created, Source File Name, Retry Count<|end|><|user|>get entries if department contains .com<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameTimestamp Created, Error Code, Session Token, Release Version, Manual Override<|end|><|user|>get rows where product_name does not contain 'suport'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('suport', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameError Code, Workflow Step, Run ID, Session Token, Request ID<|end|><|user|>get rows where company_name does not contain '.COM'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['company_name'].str.contains('.COM', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailApproval Status, Alert Triggered, Manual Override, Archived Flag, Internal Notes<|end|><|user|>find email having 'tech' and company_name with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameRequest ID, Flagged Reason, Backup ID, Retry Count, Approval Status<|end|><|user|>get rows where product_name does not contain 'tek'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('tek', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRelease Version, Session Token, Batch Number, Validation Notes, Workflow Step<|end|><|user|>find department having 'support' and job_title with 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameFlagged Reason, Origin System, Backup ID, Archived Flag, Request ID<|end|><|user|>get rows where company_name does not contain 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['company_name'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameRequest ID, Approval Status, Reviewer Comments, Environment Name, Tracking Code<|end|><|user|>find company_name having 'salez' and product_name with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRelease Version, Archived Flag, Sync Status, Error Code, Source File Name<|end|><|user|>find department having 'salez' and email with 'sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameProcessing Time, Error Code, Validation Notes, Retry Count, Reviewer Comments<|end|><|user|>get rows where product_name does not contain 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('Sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailTimestamp Created, Alert Triggered, Audit Trail, System ID, Retry Count<|end|><|user|>get rows where email does not contain 'support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['email'].str.contains('support', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentManual Override, Processing Time, Archived Flag, Batch Number, Approval Status<|end|><|user|>list records where department has 'dotcom' or company_name has 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRelease Version, Approval Status, Sync Status, Run ID, Response Time (ms)<|end|><|user|>get rows where department does not contain 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('inc.', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleTimestamp Created, Reviewer Comments, Processing Time, Environment Name, Project Tag<|end|><|user|>find job_title having 'managr' and city with '.com'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentArchived Flag, Internal Notes, Retry Count, Last Modified By, Tracking Code<|end|><|user|>get rows where department does not contain 'tek'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('tek', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentResponse Time (ms), Backup ID, Batch Number, Origin System, Timestamp Created<|end|><|user|>get rows where department does not contain 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameBatch Number, Validation Notes, Reviewer Comments, Release Version, Backup ID<|end|><|user|>get rows where product_name does not contain 'PRo'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('PRo', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityTimestamp Created, Origin System, Archived Flag, Environment Name, Release Version<|end|><|user|>find city having 'dotcom' and product_name with 'pr0'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameRetry Count, Environment Name, Archived Flag, Release Version, Reviewer Comments<|end|><|user|>list records where product_name has 'Tech' or job_title has 'PRo'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentProject Tag, Audit Trail, Origin System, Last Modified By, Archived Flag<|end|><|user|>list records where department has '.com' or job_title has 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleSource File Name, Last Modified By, Archived Flag, Audit Trail, Project Tag<|end|><|user|>list records where job_title has 'sup' or product_name has '.com'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameSync Status, Session Token, Audit Trail, Error Code, Approval Status<|end|><|user|>list records where product_name has 'support' or job_title has 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailSystem ID, Flagged Reason, Project Tag, Response Time (ms), Source File Name<|end|><|user|>find email having 'salez' and job_title with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleValidation Notes, Response Time (ms), Flagged Reason, Batch Number, Timestamp Created<|end|><|user|>find job_title having 'mngr' and company_name with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleAudit Trail, Timestamp Created, Document Ref, Response Time (ms), Run ID<|end|><|user|>list records where job_title has 'sales' or product_name has 'ink'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleRetry Count, Flagged Reason, Alert Triggered, System ID, Audit Trail<|end|><|user|>list records where job_title has '.COM' or email has 'pro'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToManual Override, Release Version, Session Token, System ID, Alert Triggered<|end|><|user|>list entries where Salary Range To has 'inc' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleFlagged Reason, Response Time (ms), Retry Count, Audit Trail, Release Version<|end|><|user|>show rows where Civil Service Title finishes with salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Civil Service Title'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelTimestamp Created, Project Tag, Release Version, Alert Triggered, Tracking Code<|end|><|user|>show records where Level begins with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional InformationInternal Notes, Run ID, Alert Triggered, Flagged Reason, Project Tag<|end|><|user|>show records where Additional Information begins with sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToInternal Notes, Backup ID, Response Time (ms), Audit Trail, Flagged Reason<|end|><|user|>Salary Range To contains value sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job DescriptionAlert Triggered, Audit Trail, Validation Notes, Project Tag, Response Time (ms)<|end|><|user|>find all where Job Description contains 'hire'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Job Description'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromAlert Triggered, Origin System, Document Ref, Approval Status, Archived Flag<|end|><|user|>list entries where Salary Range From has '.com' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleRequest ID, Error Code, Document Ref, Approval Status, Last Modified By<|end|><|user|>find all where Civil Service Title contains 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Work Location 1Source File Name, Tracking Code, Run ID, Internal Notes, Response Time (ms)<|end|><|user|>show records where Work Location 1 begins with ink<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Work Location 1'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelRequest ID, Backup ID, Flagged Reason, Workflow Step, Retry Count<|end|><|user|>Level starts with 'support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting UpdatedWorkflow Step, Project Tag, Sync Status, Release Version, Manual Override<|end|><|user|>Posting Updated ends with 'Support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Updated'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional InformationRetry Count, Source File Name, Project Tag, Environment Name, Response Time (ms)<|end|><|user|>Additional Information starts with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Residency RequirementAlert Triggered, Archived Flag, Workflow Step, System ID, Request ID<|end|><|user|>show records where Residency Requirement begins with sup<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Residency Requirement'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Residency RequirementSource File Name, Response Time (ms), Tracking Code, Archived Flag, Approval Status<|end|><|user|>show records where Residency Requirement begins with sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Residency Requirement'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional InformationResponse Time (ms), Batch Number, Validation Notes, Internal Notes, Flagged Reason<|end|><|user|>Additional Information ends with 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional InformationArchived Flag, Session Token, Backup ID, Environment Name, Timestamp Created<|end|><|user|>Additional Information includes 'Pro'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Hours/ShiftTimestamp Created, Archived Flag, Validation Notes, Last Modified By, Manual Override<|end|><|user|>list entries where Hours/Shift has 'pr0' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelLast Modified By, Document Ref, Response Time (ms), Validation Notes, Tracking Code<|end|><|user|>show records where Level begins with Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting DateBatch Number, Processing Time, Request ID, Document Ref, Timestamp Created<|end|><|user|>show rows where Posting Date finishes with pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Date'].str.endswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Minimum Qual RequirementsArchived Flag, Source File Name, Manual Override, Request ID, Sync Status<|end|><|user|>Minimum Qual Requirements includes 'INC'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Career LevelRequest ID, Origin System, Alert Triggered, System ID, Sync Status<|end|><|user|>Career Level includes 'pr0'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Career Level'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process DateProject Tag, Approval Status, Validation Notes, Processing Time, Tracking Code<|end|><|user|>Process Date starts with 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Process Date'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Hours/ShiftRun ID, Flagged Reason, Reviewer Comments, Request ID, Session Token<|end|><|user|>Hours/Shift ends with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelRelease Version, Session Token, Environment Name, Retry Count, Workflow Step<|end|><|user|>show records where Level begins with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process DateRetry Count, Request ID, Reviewer Comments, Approval Status, Flagged Reason<|end|><|user|>Process Date ends with 'Hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Process Date'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Career LevelAudit Trail, Project Tag, Approval Status, Internal Notes, Workflow Step<|end|><|user|>show rows where Career Level finishes with inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Career Level'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Minimum Qual RequirementsAlert Triggered, Reviewer Comments, Response Time (ms), Environment Name, Origin System<|end|><|user|>find all where Minimum Qual Requirements contains 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Full-Time/Part-Time indicatorTimestamp Created, Tracking Code, System ID, Approval Status, Release Version<|end|><|user|>Full-Time/Part-Time indicator starts with 'ink'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job DescriptionSource File Name, Flagged Reason, Last Modified By, Response Time (ms), Error Code<|end|><|user|>Job Description starts with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Job Description'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Post UntilReviewer Comments, Approval Status, Alert Triggered, Origin System, System ID<|end|><|user|>Post Until ends with 'sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Post Until'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title ClassificationBackup ID, Environment Name, Release Version, Retry Count, Document Ref<|end|><|user|>Title Classification starts with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Title Classification'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Post UntilProcessing Time, Approval Status, Response Time (ms), Error Code, System ID<|end|><|user|>show rows where Post Until finishes with Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Post Until'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Hours/ShiftRetry Count, Origin System, Request ID, Backup ID, Release Version<|end|><|user|>Hours/Shift ends with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelTracking Code, Response Time (ms), Release Version, Timestamp Created, Reviewer Comments<|end|><|user|>Level contains value pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary FrequencyRelease Version, Source File Name, Approval Status, Request ID, Response Time (ms)<|end|><|user|>Salary Frequency ends with '.COM'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Frequency'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title ClassificationReviewer Comments, Audit Trail, Release Version, Archived Flag, Origin System<|end|><|user|>Title Classification includes 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Title Classification'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Work Location 1Timestamp Created, Reviewer Comments, Origin System, Manual Override, Error Code<|end|><|user|>Work Location 1 ends with 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Work Location 1'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelManual Override, Run ID, Alert Triggered, Response Time (ms), Internal Notes<|end|><|user|>Level ends with 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Division/Work UnitAlert Triggered, Batch Number, Flagged Reason, Request ID, Reviewer Comments<|end|><|user|>Division/Work Unit starts with 'sells'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Division/Work Unit'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting UpdatedReviewer Comments, Request ID, Flagged Reason, Retry Count, Internal Notes<|end|><|user|>Posting Updated ends with 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Updated'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameInternal Notes, Batch Number, Validation Notes, Session Token, Request ID<|end|><|user|>find company_name ending in Sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailManual Override, Timestamp Created, Archived Flag, Retry Count, Source File Name<|end|><|user|>find email ending in salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentFlagged Reason, Document Ref, Last Modified By, Alert Triggered, Approval Status<|end|><|user|>department has 'managr' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameWorkflow Step, Backup ID, Sync Status, Retry Count, Document Ref<|end|><|user|>product_name has word salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityManual Override, Retry Count, Session Token, Archived Flag, Project Tag<|end|><|user|>city has 'Manager' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameError Code, Environment Name, Archived Flag, Flagged Reason, Batch Number<|end|><|user|>get records with product_name beginning as Tech<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameArchived Flag, Retry Count, Document Ref, Timestamp Created, System ID<|end|><|user|>get values with product_name trailing with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailEnvironment Name, Sync Status, Source File Name, System ID, Timestamp Created<|end|><|user|>find rows where email includes 'Manager'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailSystem ID, Audit Trail, Project Tag, Approval Status, Run ID<|end|><|user|>email has word mngr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleInternal Notes, Run ID, Audit Trail, Batch Number, Timestamp Created<|end|><|user|>get records with job_title beginning as mngr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityWorkflow Step, Retry Count, Response Time (ms), Session Token, Last Modified By<|end|><|user|>show rows where city starts with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameRetry Count, Last Modified By, Batch Number, Error Code, Project Tag<|end|><|user|>product_name field holds value support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('support', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityTimestamp Created, Batch Number, Sync Status, Validation Notes, Workflow Step<|end|><|user|>city has word hiringg<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailProject Tag, Run ID, Backup ID, Audit Trail, Archived Flag<|end|><|user|>find email ending in dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameInternal Notes, Batch Number, Document Ref, Workflow Step, Error Code<|end|><|user|>get values with product_name trailing with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleRequest ID, Timestamp Created, Document Ref, Internal Notes, Batch Number<|end|><|user|>get values with job_title trailing with inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailOrigin System, Batch Number, Processing Time, Internal Notes, Archived Flag<|end|><|user|>find rows where email includes 'manager'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleEnvironment Name, Sync Status, Run ID, Request ID, Workflow Step<|end|><|user|>get records with job_title beginning as pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameSync Status, Document Ref, Reviewer Comments, Tracking Code, Error Code<|end|><|user|>find product_name ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentEnvironment Name, Approval Status, Processing Time, Source File Name, Manual Override<|end|><|user|>find department ending in support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentFlagged Reason, Origin System, Project Tag, Environment Name, Release Version<|end|><|user|>list where department ends with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityRelease Version, Session Token, Project Tag, Audit Trail, Error Code<|end|><|user|>show rows where city starts with sup<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleRun ID, Tracking Code, Environment Name, Document Ref, Session Token<|end|><|user|>job_title has word managr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityInternal Notes, Approval Status, Last Modified By, Backup ID, Error Code<|end|><|user|>list where city ends with hiringg<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRequest ID, Release Version, Audit Trail, Response Time (ms), Validation Notes<|end|><|user|>department field begins with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityFlagged Reason, Run ID, Audit Trail, Document Ref, Origin System<|end|><|user|>find city ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleProject Tag, Archived Flag, Last Modified By, Retry Count, Environment Name<|end|><|user|>job_title field begins with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentSource File Name, Audit Trail, Retry Count, Tracking Code, Sync Status<|end|><|user|>find department ending in managr<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailLast Modified By, Audit Trail, Manual Override, Error Code, Backup ID<|end|><|user|>get values with email trailing with manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameEnvironment Name, Timestamp Created, Reviewer Comments, Request ID, Batch Number<|end|><|user|>list where company_name ends with .COM<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: citySync Status, Flagged Reason, Retry Count, Error Code, Timestamp Created<|end|><|user|>find rows where city includes 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: cityBatch Number, Internal Notes, Run ID, Backup ID, Response Time (ms)<|end|><|user|>find city ending in support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentResponse Time (ms), Request ID, Internal Notes, Backup ID, Last Modified By<|end|><|user|>list where department ends with Hiring<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentInternal Notes, Tracking Code, Last Modified By, Response Time (ms), Document Ref<|end|><|user|>show all department with tech in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameReviewer Comments, Workflow Step, Manual Override, Audit Trail, Flagged Reason<|end|><|user|>find rows where product_name includes 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleRun ID, Error Code, Batch Number, Document Ref, Source File Name<|end|><|user|>job_title has 'mngr' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('manager', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameProcessing Time, Timestamp Created, Tracking Code, System ID, Manual Override<|end|><|user|>product_name has word INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailDocument Ref, Environment Name, Run ID, Batch Number, Audit Trail<|end|><|user|>show rows where email starts with sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameProject Tag, Document Ref, Workflow Step, Manual Override, Processing Time<|end|><|user|>get records with product_name beginning as TECH<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentApproval Status, Internal Notes, Source File Name, Origin System, Request ID<|end|><|user|>find department ending in Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.endswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailOrigin System, Validation Notes, Flagged Reason, Release Version, Reviewer Comments<|end|><|user|>get records with email beginning as Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_titleRequest ID, Approval Status, Origin System, Workflow Step, Manual Override<|end|><|user|>job_title has 'hire' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameRequest ID, Processing Time, Project Tag, Reviewer Comments, Workflow Step<|end|><|user|>company_name field holds value Sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentError Code, Environment Name, Release Version, Approval Status, Validation Notes<|end|><|user|>show rows where department starts with pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentSync Status, Source File Name, Workflow Step, Backup ID, Run ID<|end|><|user|>department has word inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailSource File Name, Manual Override, Release Version, Tracking Code, Reviewer Comments<|end|><|user|>show rows where email starts with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameRelease Version, Flagged Reason, Request ID, Audit Trail, Alert Triggered<|end|><|user|>get values with product_name trailing with dotcom<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameWorkflow Step, Validation Notes, Manual Override, Approval Status, Batch Number<|end|><|user|>find product_name ending in Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameEnvironment Name, Sync Status, System ID, Tracking Code, Run ID<|end|><|user|>product_name field begins with TECH<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentSystem ID, Environment Name, Backup ID, Source File Name, Manual Override<|end|><|user|>get entries if department contains .com<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameBatch Number, Source File Name, Tracking Code, Flagged Reason, Audit Trail<|end|><|user|>get rows where product_name does not contain 'suport'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('suport', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameTracking Code, Reviewer Comments, Flagged Reason, Environment Name, Archived Flag<|end|><|user|>get rows where company_name does not contain '.COM'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['company_name'].str.contains('.COM', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_name, emailRun ID, Last Modified By, Validation Notes, Workflow Step, Processing Time<|end|><|user|>find email having 'tech' and company_name with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameAudit Trail, Request ID, Project Tag, Source File Name, Internal Notes<|end|><|user|>get rows where product_name does not contain 'tek'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('tek', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, job_titleRetry Count, Release Version, Backup ID, Response Time (ms), Session Token<|end|><|user|>find department having 'support' and job_title with 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_nameReviewer Comments, Last Modified By, Flagged Reason, Session Token, Error Code<|end|><|user|>get rows where company_name does not contain 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['company_name'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_name, product_nameInternal Notes, Backup ID, Error Code, Validation Notes, Sync Status<|end|><|user|>find company_name having 'salez' and product_name with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, emailProject Tag, Validation Notes, Run ID, Response Time (ms), Sync Status<|end|><|user|>find department having 'salez' and email with 'sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameLast Modified By, Workflow Step, Timestamp Created, Response Time (ms), Alert Triggered<|end|><|user|>get rows where product_name does not contain 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('Sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: emailValidation Notes, System ID, Request ID, Workflow Step, Run ID<|end|><|user|>get rows where email does not contain 'support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['email'].str.contains('support', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_name, departmentDocument Ref, Response Time (ms), Run ID, Timestamp Created, Environment Name<|end|><|user|>list records where department has 'dotcom' or company_name has 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentRetry Count, Environment Name, Flagged Reason, Response Time (ms), Workflow Step<|end|><|user|>get rows where department does not contain 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('inc.', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, job_titleProject Tag, Request ID, Flagged Reason, Archived Flag, Alert Triggered<|end|><|user|>find job_title having 'managr' and city with '.com'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentBackup ID, Batch Number, Run ID, Sync Status, Origin System<|end|><|user|>get rows where department does not contain 'tek'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('tek', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: departmentAudit Trail, Internal Notes, Archived Flag, Response Time (ms), Reviewer Comments<|end|><|user|>get rows where department does not contain 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['department'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: product_nameError Code, Flagged Reason, Backup ID, Run ID, System ID<|end|><|user|>get rows where product_name does not contain 'PRo'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[~df['product_name'].str.contains('PRo', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: city, product_nameProcessing Time, Reviewer Comments, Approval Status, Run ID, Last Modified By<|end|><|user|>find city having 'dotcom' and product_name with 'pr0'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_title, product_nameAudit Trail, Backup ID, Request ID, Response Time (ms), Batch Number<|end|><|user|>list records where product_name has 'Tech' or job_title has 'PRo'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: department, job_titleEnvironment Name, Processing Time, Validation Notes, Tracking Code, Last Modified By<|end|><|user|>list records where department has '.com' or job_title has 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_title, product_nameInternal Notes, Approval Status, Backup ID, Document Ref, Flagged Reason<|end|><|user|>list records where job_title has 'sup' or product_name has '.com'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_title, product_nameProject Tag, Sync Status, Last Modified By, Internal Notes, Retry Count<|end|><|user|>list records where product_name has 'support' or job_title has 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email, job_titleRequest ID, Flagged Reason, Document Ref, System ID, Reviewer Comments<|end|><|user|>find email having 'salez' and job_title with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: company_name, job_titleSource File Name, Tracking Code, Sync Status, Request ID, Origin System<|end|><|user|>find job_title having 'mngr' and company_name with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: job_title, product_nameAudit Trail, Project Tag, Processing Time, Alert Triggered, Environment Name<|end|><|user|>list records where job_title has 'sales' or product_name has 'ink'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: email, job_titleSync Status, Flagged Reason, Workflow Step, Approval Status, Audit Trail<|end|><|user|>list records where job_title has '.COM' or email has 'pro'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToApproval Status, Tracking Code, Error Code, Audit Trail, Origin System<|end|><|user|>list entries where Salary Range To has 'inc' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleSource File Name, Request ID, Project Tag, Audit Trail, Archived Flag<|end|><|user|>show rows where Civil Service Title finishes with salez<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Civil Service Title'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelOrigin System, Flagged Reason, Project Tag, Manual Override, Alert Triggered<|end|><|user|>show records where Level begins with INC<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional InformationSession Token, Project Tag, Workflow Step, Source File Name, Request ID<|end|><|user|>show records where Additional Information begins with sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToLast Modified By, Release Version, Project Tag, Workflow Step, Retry Count<|end|><|user|>Salary Range To contains value sales<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'].str.contains('sales', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job DescriptionBatch Number, Sync Status, Run ID, Last Modified By, Tracking Code<|end|><|user|>find all where Job Description contains 'hire'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Job Description'].str.contains('hiring', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromEnvironment Name, Flagged Reason, Session Token, Audit Trail, Reviewer Comments<|end|><|user|>list entries where Salary Range From has '.com' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'].str.contains('.com', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Civil Service TitleReviewer Comments, Alert Triggered, Last Modified By, Processing Time, Flagged Reason<|end|><|user|>find all where Civil Service Title contains 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Work Location 1Tracking Code, Internal Notes, Validation Notes, Retry Count, Release Version<|end|><|user|>show records where Work Location 1 begins with ink<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Work Location 1'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelBackup ID, Tracking Code, Last Modified By, Error Code, Retry Count<|end|><|user|>Level starts with 'support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting UpdatedWorkflow Step, Internal Notes, Manual Override, Validation Notes, Backup ID<|end|><|user|>Posting Updated ends with 'Support'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Updated'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional InformationBackup ID, Release Version, System ID, Environment Name, Retry Count<|end|><|user|>Additional Information starts with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Residency RequirementManual Override, Error Code, Document Ref, Environment Name, Validation Notes<|end|><|user|>show records where Residency Requirement begins with sup<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Residency Requirement'].str.startswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Residency RequirementSync Status, Run ID, Processing Time, Alert Triggered, Release Version<|end|><|user|>show records where Residency Requirement begins with sells<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Residency Requirement'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional InformationSession Token, Approval Status, Origin System, Retry Count, Project Tag<|end|><|user|>Additional Information ends with 'Sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Additional InformationInternal Notes, Backup ID, Flagged Reason, Document Ref, Validation Notes<|end|><|user|>Additional Information includes 'Pro'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Additional Information'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Hours/ShiftRun ID, Flagged Reason, Timestamp Created, Response Time (ms), Validation Notes<|end|><|user|>list entries where Hours/Shift has 'pr0' in it<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelSource File Name, Batch Number, Environment Name, Release Version, Processing Time<|end|><|user|>show records where Level begins with Manager<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting DateOrigin System, Release Version, Retry Count, Project Tag, Flagged Reason<|end|><|user|>show rows where Posting Date finishes with pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Date'].str.endswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Minimum Qual RequirementsTracking Code, Sync Status, Project Tag, Session Token, Alert Triggered<|end|><|user|>Minimum Qual Requirements includes 'INC'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Career LevelDocument Ref, Batch Number, Source File Name, Retry Count, Reviewer Comments<|end|><|user|>Career Level includes 'pr0'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Career Level'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process DateLast Modified By, Run ID, Timestamp Created, Audit Trail, Manual Override<|end|><|user|>Process Date starts with 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Process Date'].str.startswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Hours/ShiftValidation Notes, Session Token, Timestamp Created, Origin System, Processing Time<|end|><|user|>Hours/Shift ends with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelResponse Time (ms), Retry Count, Validation Notes, Batch Number, Error Code<|end|><|user|>show records where Level begins with Pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.startswith('pro', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process DateTracking Code, Environment Name, Archived Flag, Origin System, Audit Trail<|end|><|user|>Process Date ends with 'Hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Process Date'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Career LevelReviewer Comments, Origin System, Release Version, Audit Trail, Environment Name<|end|><|user|>show rows where Career Level finishes with inc.<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Career Level'].str.endswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Minimum Qual RequirementsError Code, Internal Notes, Approval Status, Session Token, Flagged Reason<|end|><|user|>find all where Minimum Qual Requirements contains 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Full-Time/Part-Time indicatorAlert Triggered, Batch Number, Error Code, Document Ref, Internal Notes<|end|><|user|>Full-Time/Part-Time indicator starts with 'ink'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Job DescriptionBatch Number, Manual Override, System ID, Environment Name, Audit Trail<|end|><|user|>Job Description starts with 'dotcom'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Job Description'].str.startswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Post UntilDocument Ref, Last Modified By, Origin System, Approval Status, Workflow Step<|end|><|user|>Post Until ends with 'sales'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Post Until'].str.endswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title ClassificationSync Status, Reviewer Comments, Validation Notes, Internal Notes, Timestamp Created<|end|><|user|>Title Classification starts with 'managr'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Title Classification'].str.startswith('manager', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Post UntilArchived Flag, Retry Count, Alert Triggered, Environment Name, Document Ref<|end|><|user|>show rows where Post Until finishes with Support<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Post Until'].str.endswith('support', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Hours/ShiftTimestamp Created, Alert Triggered, Validation Notes, Backup ID, Project Tag<|end|><|user|>Hours/Shift ends with 'hiringg'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Hours/Shift'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelRun ID, Request ID, Alert Triggered, Last Modified By, Batch Number<|end|><|user|>Level contains value pro<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.contains('pro', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary FrequencyInternal Notes, Error Code, Alert Triggered, Flagged Reason, Timestamp Created<|end|><|user|>Salary Frequency ends with '.COM'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Frequency'].str.endswith('.com', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Title ClassificationSystem ID, Validation Notes, Approval Status, Tracking Code, Audit Trail<|end|><|user|>Title Classification includes 'inc.'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Title Classification'].str.contains('inc', case=False, na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Work Location 1Response Time (ms), Validation Notes, Sync Status, Workflow Step, Source File Name<|end|><|user|>Work Location 1 ends with 'hiring'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Work Location 1'].str.endswith('hiring', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelSync Status, Batch Number, Release Version, Document Ref, Alert Triggered<|end|><|user|>Level ends with 'Tech'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Division/Work UnitWorkflow Step, Flagged Reason, Timestamp Created, Response Time (ms), Alert Triggered<|end|><|user|>Division/Work Unit starts with 'sells'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Division/Work Unit'].str.startswith('sales', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting UpdatedResponse Time (ms), Batch Number, Origin System, Environment Name, Approval Status<|end|><|user|>Posting Updated ends with 'TECH'<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Posting Updated'].str.endswith('tech', na=False)]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromFlagged Reason, Request ID, System ID, Tracking Code, Release Version<|end|><|user|>list all jobs with Salary Range From minimum 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] >= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelRetry Count, Environment Name, Last Modified By, Manual Override, Session Token<|end|><|user|>Level != 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] != 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToManual Override, Archived Flag, Origin System, Retry Count, Response Time (ms)<|end|><|user|>Salary Range To should be below 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] < 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromSession Token, Run ID, Environment Name, Document Ref, Alert Triggered<|end|><|user|>Salary Range From should be maximum 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] <= 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromReviewer Comments, Batch Number, Retry Count, Audit Trail, Run ID<|end|><|user|>show records where Salary Range From is below 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] < 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToApproval Status, Validation Notes, Sync Status, Environment Name, Error Code<|end|><|user|>list all jobs with Salary Range To maximum 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelError Code, Last Modified By, Approval Status, Source File Name, Request ID<|end|><|user|>get jobs where Level is greater than 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelSystem ID, Source File Name, Environment Name, Backup ID, Document Ref<|end|><|user|>show records where Level is >= 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] >= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToRequest ID, Retry Count, Release Version, Document Ref, Source File Name<|end|><|user|>Salary Range To should be maximum 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelDocument Ref, Alert Triggered, Request ID, Flagged Reason, Run ID<|end|><|user|>show records where Level is more than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelProcessing Time, Request ID, Run ID, Sync Status, Validation Notes<|end|><|user|>get jobs where Level is != 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] != 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromTimestamp Created, Approval Status, Response Time (ms), Backup ID, Error Code<|end|><|user|>Salary Range From should be == 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] == 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelApproval Status, Response Time (ms), Processing Time, Validation Notes, Workflow Step<|end|><|user|>show records where Level is maximum 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] <= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelReviewer Comments, Response Time (ms), Alert Triggered, Workflow Step, Release Version<|end|><|user|>get jobs where Level is more than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelSystem ID, Environment Name, Archived Flag, Audit Trail, Run ID<|end|><|user|>Level <= 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] <= 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelRequest ID, Batch Number, Environment Name, Internal Notes, Backup ID<|end|><|user|>list all jobs with Level not 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] != 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromSource File Name, Environment Name, Session Token, Project Tag, Workflow Step<|end|><|user|>get jobs where Salary Range From is under 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] < 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromOrigin System, Flagged Reason, Request ID, System ID, Source File Name<|end|><|user|>Salary Range From should be under 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] < 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelSession Token, Internal Notes, Release Version, Batch Number, Document Ref<|end|><|user|>list all jobs with Level equal to 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] == 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToRun ID, Retry Count, Workflow Step, Internal Notes, Error Code<|end|><|user|>Salary Range To should be not 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelInternal Notes, Alert Triggered, Manual Override, Timestamp Created, Run ID<|end|><|user|>show records where Level is more than 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToProcessing Time, Approval Status, Sync Status, Origin System, Request ID<|end|><|user|>Salary Range To != 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromProcessing Time, Run ID, System ID, Backup ID, Internal Notes<|end|><|user|>Salary Range From <= 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] <= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromArchived Flag, Environment Name, Source File Name, Last Modified By, Document Ref<|end|><|user|>get jobs where Salary Range From is maximum 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] <= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelTracking Code, Batch Number, Origin System, Retry Count, Project Tag<|end|><|user|>get jobs where Level is >= 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] >= 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelRelease Version, Alert Triggered, Archived Flag, Processing Time, Request ID<|end|><|user|>Level minimum 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] >= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToAlert Triggered, Retry Count, Project Tag, Run ID, Timestamp Created<|end|><|user|>Salary Range To should be != 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToProject Tag, Processing Time, Error Code, Alert Triggered, Archived Flag<|end|><|user|>Salary Range To less than 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] < 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToInternal Notes, Origin System, Workflow Step, Sync Status, Backup ID<|end|><|user|>show records where Salary Range To is under 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] < 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelAudit Trail, Error Code, Validation Notes, Document Ref, Workflow Step<|end|><|user|>show records where Level is at most 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] <= 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToLast Modified By, Error Code, Alert Triggered, Sync Status, Tracking Code<|end|><|user|>get jobs where Salary Range To is <= 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToReviewer Comments, Run ID, Project Tag, Response Time (ms), Internal Notes<|end|><|user|>list all jobs with Salary Range To maximum 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromFlagged Reason, Session Token, Timestamp Created, Environment Name, Backup ID<|end|><|user|>Salary Range From should be above 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] > 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToInternal Notes, Audit Trail, Origin System, Flagged Reason, Session Token<|end|><|user|>show records where Salary Range To is at most 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] <= 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelRetry Count, Audit Trail, System ID, Tracking Code, Environment Name<|end|><|user|>list all jobs with Level less than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] < 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromProcessing Time, Error Code, Tracking Code, Timestamp Created, Release Version<|end|><|user|>show records where Salary Range From is equal to 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] == 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromSource File Name, Approval Status, Response Time (ms), Origin System, Release Version<|end|><|user|>get jobs where Salary Range From is minimum 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] >= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromDocument Ref, Release Version, Source File Name, Error Code, Workflow Step<|end|><|user|>show records where Salary Range From is not 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] != 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelTimestamp Created, Batch Number, Tracking Code, Audit Trail, Archived Flag<|end|><|user|>get jobs where Level is at most 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] <= 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromLast Modified By, Tracking Code, Approval Status, Session Token, Workflow Step<|end|><|user|>list all jobs with Salary Range From above 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] > 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromRelease Version, System ID, Reviewer Comments, Run ID, Archived Flag<|end|><|user|>Salary Range From should be != 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] != 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelValidation Notes, Release Version, Document Ref, Processing Time, Backup ID<|end|><|user|>list all jobs with Level is 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] == 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToBackup ID, Reviewer Comments, System ID, Environment Name, Release Version<|end|><|user|>show records where Salary Range To is greater than 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] > 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToEnvironment Name, Sync Status, Internal Notes, Run ID, Validation Notes<|end|><|user|>show records where Salary Range To is not equal to 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromBatch Number, Validation Notes, Flagged Reason, Origin System, Request ID<|end|><|user|>list all jobs with Salary Range From >= 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] >= 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelProcessing Time, Session Token, Batch Number, Reviewer Comments, Tracking Code<|end|><|user|>list all jobs with Level not 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] != 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: LevelLast Modified By, Reviewer Comments, Manual Override, Origin System, Tracking Code<|end|><|user|>show records where Level is greater than 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Level'] > 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromTimestamp Created, Manual Override, Document Ref, Last Modified By, Tracking Code<|end|><|user|>Salary Range From maximum 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] <= 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToRetry Count, Document Ref, Session Token, Sync Status, Validation Notes<|end|><|user|>Salary Range To should be at least 75000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] >= 75000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToTracking Code, Backup ID, Environment Name, Last Modified By, System ID<|end|><|user|>Salary Range To != 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting DateBackup ID, Archived Flag, Manual Override, Run ID, Origin System<|end|><|user|>show records where Posting Date is not equal to 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Date']) != pd.to_datetime('200000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: SalesApproval Status, Environment Name, Origin System, Retry Count, Request ID<|end|><|user|>show entries having Sales >= 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] >= 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: discountRun ID, Retry Count, Backup ID, Tracking Code, Timestamp Created<|end|><|user|>show entries having discount is 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['discount'] == 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: units_soldAudit Trail, Source File Name, Batch Number, Sync Status, Error Code<|end|><|user|>units_sold <= 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['units_sold'] <= 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenueAlert Triggered, Flagged Reason, Archived Flag, Sync Status, Origin System<|end|><|user|>revenue should be more than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] > 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: discountDocument Ref, Workflow Step, Session Token, Origin System, Environment Name<|end|><|user|>show entries having discount below 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['discount'] < 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToProject Tag, Document Ref, Error Code, Tracking Code, Response Time (ms)<|end|><|user|>Salary Range To >= 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] >= 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting DateProject Tag, Validation Notes, Backup ID, Session Token, Audit Trail<|end|><|user|>Posting Date should be minimum 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Date']) >= pd.to_datetime('100000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: units_soldValidation Notes, Processing Time, Sync Status, Archived Flag, System ID<|end|><|user|>units_sold should be >= 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['units_sold'] >= 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToTimestamp Created, Validation Notes, Internal Notes, Backup ID, System ID<|end|><|user|>Salary Range To not 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] != 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenueRetry Count, Sync Status, Manual Override, Origin System, Error Code<|end|><|user|>revenue equal to 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] == 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenueLast Modified By, Response Time (ms), Workflow Step, Audit Trail, Validation Notes<|end|><|user|>show entries having revenue not 99999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] != 99999]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenueProject Tag, Workflow Step, Alert Triggered, Approval Status, Release Version<|end|><|user|>get records where revenue is greater than 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] > 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range ToSystem ID, Reviewer Comments, Archived Flag, Sync Status, Audit Trail<|end|><|user|>Salary Range To less than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range To'] < 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromRetry Count, Tracking Code, Processing Time, Environment Name, Run ID<|end|><|user|>Salary Range From under 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] < 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process DateRetry Count, Run ID, Batch Number, Document Ref, Sync Status<|end|><|user|>Process Date should be <= 99999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Process Date']) <= pd.to_datetime('99999')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromAlert Triggered, System ID, Response Time (ms), Origin System, Flagged Reason<|end|><|user|>show entries having Salary Range From equal to 1<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] == 1]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenueSource File Name, Session Token, Approval Status, Project Tag, Reviewer Comments<|end|><|user|>revenue should be equal to 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] == 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting UpdatedArchived Flag, Backup ID, Origin System, Run ID, Flagged Reason<|end|><|user|>entries where Posting Updated is at most 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Updated']) <= pd.to_datetime('25000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: SalesArchived Flag, Document Ref, Processing Time, Manual Override, Run ID<|end|><|user|>get records where Sales is greater than 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] > 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenueReviewer Comments, Project Tag, System ID, Request ID, Origin System<|end|><|user|>get records where revenue is more than 100000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] > 100000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting UpdatedApproval Status, Document Ref, Sync Status, Batch Number, Flagged Reason<|end|><|user|>list data with Posting Updated less than 10<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting UpdatedManual Override, Run ID, Sync Status, Processing Time, Workflow Step<|end|><|user|>list data with Posting Updated under 0<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('0')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Posting UpdatedOrigin System, Validation Notes, Backup ID, Project Tag, Batch Number<|end|><|user|>show records where Posting Updated is below 10<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Post UntilManual Override, Error Code, Request ID, Backup ID, Timestamp Created<|end|><|user|>Post Until should be not 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Post Until']) != pd.to_datetime('200000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process DateManual Override, Approval Status, Run ID, Origin System, Environment Name<|end|><|user|>show records where Process Date is >= 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Process Date']) >= pd.to_datetime('150000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: SalesRetry Count, Environment Name, Project Tag, Origin System, Run ID<|end|><|user|>Sales below 10<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] < 10]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromTimestamp Created, Archived Flag, Session Token, Project Tag, Manual Override<|end|><|user|>Salary Range From greater than 200000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] > 200000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Salary Range FromValidation Notes, Run ID, Session Token, Last Modified By, Processing Time<|end|><|user|>get records where Salary Range From is == 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Salary Range From'] == 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: units_soldProcessing Time, Source File Name, Response Time (ms), Origin System, Retry Count<|end|><|user|>units_sold should be is 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['units_sold'] == 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process DateFlagged Reason, System ID, Run ID, Batch Number, Error Code<|end|><|user|>Process Date should be greater than 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Process Date']) > pd.to_datetime('30000')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: discountValidation Notes, Workflow Step, Audit Trail, Run ID, Approval Status<|end|><|user|>show entries having discount at most 30000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['discount'] <= 30000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: units_soldApproval Status, Alert Triggered, Session Token, Validation Notes, System ID<|end|><|user|>show entries having units_sold at most 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['units_sold'] <= 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: Process DateManual Override, Archived Flag, Backup ID, Timestamp Created, Error Code<|end|><|user|>Process Date should be under 9999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[pd.to_datetime(df['Process Date']) < pd.to_datetime('9999')]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: discountSource File Name, Session Token, Approval Status, Tracking Code, Internal Notes<|end|><|user|>show entries having discount at least 25000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['discount'] >= 25000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: SalesTracking Code, Last Modified By, Error Code, Response Time (ms), Workflow Step<|end|><|user|>Sales should be is 99999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] == 99999]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenueTimestamp Created, Response Time (ms), Run ID, Flagged Reason, Internal Notes<|end|><|user|>get records where revenue is at most 50000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] <= 50000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: revenueBatch Number, Request ID, Alert Triggered, Release Version, Approval Status<|end|><|user|>revenue should be != 0<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['revenue'] != 0]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: SalesBatch Number, Last Modified By, Approval Status, Manual Override, Backup ID<|end|><|user|>Sales should be below 9999<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] < 9999]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
{"prompt": "<|system|>You are an expert Python assistant. Generate valid Pandas code based on the user's query.\nThe DataFrame contains the following columns: SalesResponse Time (ms), Session Token, Origin System, Audit Trail, Project Tag<|end|><|user|>get records where Sales is is 150000<|end|><|assistant|>", "completion": "{\"df_code\": \"df[df['Sales'] == 150000]\", \"query_pred_category\": \"text/string_operations\"}<|end|>"}
