{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Document Ref, Release Version, Request ID, channel, quantity.\nQuery: Get the number of quantity values grouped by channel.", "target": "df.groupby('channel')['quantity'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Last Modified By, Manual Override, Response Time (ms), Run ID, cost, region.\nQuery: Compute the minimum cost per region.", "target": "df.groupby('region')['cost'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Manual Override, Request ID, Response Time (ms), Retry Count, cost, month.\nQuery: Get the average cost grouped by month.", "target": "df.groupby('month')['cost'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Flagged Reason, Last Modified By, Run ID, Timestamp Created, month.\nQuery: Give the median month for each month.", "target": "df.groupby('month')['month'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Manual Override, Project Tag, Reviewer Comments, Source File Name, profit, store_id.\nQuery: Find standard deviation of profit grouped by store_id.", "target": "df.groupby('store_id')['profit'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Project Tag, Request ID, Run ID, channel, expenses.\nQuery: Calculate the total expenses for each channel.", "target": "df.groupby('channel')['expenses'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Run ID, Session Token, System ID, Workflow Step, cost, department.\nQuery: Find the maximum cost in every department.", "target": "df.groupby('department')['cost'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Origin System, Processing Time, Retry Count, Tracking Code, category, cost.\nQuery: Compute the minimum cost per category.", "target": "df.groupby('category')['cost'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Response Time (ms), Run ID, Source File Name, city, profit.\nQuery: Show the sum of profit across city.", "target": "df.groupby('city')['profit'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Error Code, Release Version, Source File Name, channel, cost.\nQuery: Find the maximum cost in every channel.", "target": "df.groupby('channel')['cost'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Session Token, Tracking Code, Validation Notes, Workflow Step, city, tax.\nQuery: Calculate the total tax for each city.", "target": "df.groupby('city')['tax'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Release Version, Reviewer Comments, Session Token, System ID, Validation Notes, department, sales.\nQuery: List the count of sales for each department.", "target": "df.groupby('department')['sales'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Internal Notes, Manual Override, Reviewer Comments, Tracking Code, customer_type, expenses.\nQuery: Give the median expenses for each customer_type.", "target": "df.groupby('customer_type')['expenses'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Last Modified By, Project Tag, Reviewer Comments, Tracking Code, category, units_sold.\nQuery: Calculate the total units_sold for each category.", "target": "df.groupby('category')['units_sold'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Error Code, Retry Count, Run ID, store_id.\nQuery: Get the average store_id grouped by store_id.", "target": "df.groupby('store_id')['store_id'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Internal Notes, Sync Status, Timestamp Created, Workflow Step, cost, product.\nQuery: Get the average cost grouped by product.", "target": "df.groupby('product')['cost'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Project Tag, Response Time (ms), Retry Count, channel, quantity.\nQuery: Find the maximum quantity in every channel.", "target": "df.groupby('channel')['quantity'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Environment Name, Error Code, Retry Count, Run ID, channel, expenses.\nQuery: Find the maximum expenses in every channel.", "target": "df.groupby('channel')['expenses'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Retry Count, Reviewer Comments, Session Token, Sync Status, Workflow Step, customer_type, order_value.\nQuery: Get the number of order_value values grouped by customer_type.", "target": "df.groupby('customer_type')['order_value'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Origin System, Processing Time, Release Version, System ID, Tracking Code, month, units_sold.\nQuery: Show how many units_sold entries exist per month.", "target": "df.groupby('month')['units_sold'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Manual Override, Reviewer Comments, System ID, discount, store_id.\nQuery: Find standard deviation of discount grouped by store_id.", "target": "df.groupby('store_id')['discount'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Internal Notes, Run ID, System ID, department, quantity.\nQuery: Show how many quantity entries exist per department.", "target": "df.groupby('department')['quantity'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Batch Number, Release Version, Session Token, department, units_sold.\nQuery: Show the sum of units_sold across department.", "target": "df.groupby('department')['units_sold'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Manual Override, Release Version, Reviewer Comments, Source File Name, category, sales.\nQuery: Give the median sales for each category.", "target": "df.groupby('category')['sales'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Run ID, Session Token, Source File Name, category, units_sold.\nQuery: Show how many units_sold entries exist per category.", "target": "df.groupby('category')['units_sold'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Flagged Reason, Last Modified By, Manual Override, Session Token, department, sales.\nQuery: Show the sum of sales across department.", "target": "df.groupby('department')['sales'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Internal Notes, Last Modified By, Origin System, department, units_sold.\nQuery: Calculate the total units_sold for each department.", "target": "df.groupby('department')['units_sold'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Internal Notes, Run ID, Timestamp Created, department, discount.\nQuery: Calculate the total discount for each department.", "target": "df.groupby('department')['discount'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Project Tag, Request ID, System ID, month, units_sold.\nQuery: Show how many units_sold entries exist per month.", "target": "df.groupby('month')['units_sold'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Processing Time, Release Version, Timestamp Created, Validation Notes, channel, units_sold.\nQuery: List the count of units_sold for each channel.", "target": "df.groupby('channel')['units_sold'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Manual Override, Processing Time, Reviewer Comments, category, tax.\nQuery: Find the maximum tax in every category.", "target": "df.groupby('category')['tax'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Error Code, Project Tag, Request ID, store_id, units_sold.\nQuery: List the count of units_sold for each store_id.", "target": "df.groupby('store_id')['units_sold'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Request ID, Source File Name, Sync Status, department, units_sold.\nQuery: Find standard deviation of units_sold grouped by department.", "target": "df.groupby('department')['units_sold'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Processing Time, Project Tag, Response Time (ms), System ID, Workflow Step, city, order_value.\nQuery: Get the average order_value grouped by city.", "target": "df.groupby('city')['order_value'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Project Tag, Response Time (ms), Source File Name, Workflow Step, order_value, store_id.\nQuery: Find standard deviation of order_value grouped by store_id.", "target": "df.groupby('store_id')['order_value'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Batch Number, Release Version, Run ID, System ID, region.\nQuery: Calculate the total region for each region.", "target": "df.groupby('region')['region'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Manual Override, Response Time (ms), Session Token, Timestamp Created, department, discount.\nQuery: Find standard deviation of discount grouped by department.", "target": "df.groupby('department')['discount'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Last Modified By, Origin System, Source File Name, Sync Status, customer_type, units_sold.\nQuery: Show the sum of units_sold across customer_type.", "target": "df.groupby('customer_type')['units_sold'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Document Ref, Retry Count, Reviewer Comments, product, quantity.\nQuery: Show how many quantity entries exist per product.", "target": "df.groupby('product')['quantity'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Manual Override, Reviewer Comments, Timestamp Created, Tracking Code, month, profit.\nQuery: Find standard deviation of profit grouped by month.", "target": "df.groupby('month')['profit'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Last Modified By, Run ID, Validation Notes, department, units_sold.\nQuery: List the count of units_sold for each department.", "target": "df.groupby('department')['units_sold'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Last Modified By, Run ID, Session Token, cost, department.\nQuery: List the count of cost for each department.", "target": "df.groupby('department')['cost'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Last Modified By, Release Version, Source File Name, Sync Status, Timestamp Created, cost, region.\nQuery: Calculate the total cost for each region.", "target": "df.groupby('region')['cost'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Internal Notes, Response Time (ms), Timestamp Created, Tracking Code, Workflow Step, product, units_sold.\nQuery: Get the average units_sold grouped by product.", "target": "df.groupby('product')['units_sold'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Last Modified By, Manual Override, Origin System, Reviewer Comments, quantity, store_id.\nQuery: Find standard deviation of quantity grouped by store_id.", "target": "df.groupby('store_id')['quantity'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Release Version, Run ID, Tracking Code, Workflow Step, order_value, region.\nQuery: Show the sum of order_value across region.", "target": "df.groupby('region')['order_value'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Last Modified By, Manual Override, Reviewer Comments, Timestamp Created, order_value, region.\nQuery: Find the maximum order_value in every region.", "target": "df.groupby('region')['order_value'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Batch Number, Internal Notes, Request ID, Validation Notes, expenses, store_id.\nQuery: Find standard deviation of expenses grouped by store_id.", "target": "df.groupby('store_id')['expenses'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Retry Count, Timestamp Created, Validation Notes, channel, order_value.\nQuery: Compute the minimum order_value per channel.", "target": "df.groupby('channel')['order_value'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Manual Override, Request ID, Timestamp Created, Validation Notes, Workflow Step, customer_type, profit.\nQuery: List the count of profit for each customer_type.", "target": "df.groupby('customer_type')['profit'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Environment Name, Project Tag, System ID, Workflow Step, region, units_sold.\nQuery: Compute the minimum units_sold per region.", "target": "df.groupby('region')['units_sold'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Retry Count, Run ID, Session Token, cost, region.\nQuery: Get the number of cost values grouped by region.", "target": "df.groupby('region')['cost'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Release Version, Response Time (ms), Source File Name, Timestamp Created, region, sales.\nQuery: Give the median sales for each region.", "target": "df.groupby('region')['sales'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Internal Notes, Manual Override, Run ID, Validation Notes, Workflow Step, channel, quantity.\nQuery: Get the number of quantity values grouped by channel.", "target": "df.groupby('channel')['quantity'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Session Token, Timestamp Created, Tracking Code, profit, region.\nQuery: Show how many profit entries exist per region.", "target": "df.groupby('region')['profit'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Batch Number, Internal Notes, Release Version, Request ID, product.\nQuery: Show how many product entries exist per product.", "target": "df.groupby('product')['product'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Flagged Reason, Manual Override, Sync Status, department, tax.\nQuery: Get the average tax grouped by department.", "target": "df.groupby('department')['tax'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Reviewer Comments, Tracking Code, Workflow Step, department, order_value.\nQuery: Show the sum of order_value across department.", "target": "df.groupby('department')['order_value'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Project Tag, Response Time (ms), Sync Status, System ID, category, units_sold.\nQuery: Get the number of units_sold values grouped by category.", "target": "df.groupby('category')['units_sold'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Origin System, Retry Count, Source File Name, Validation Notes, category, sales.\nQuery: Get the number of sales values grouped by category.", "target": "df.groupby('category')['sales'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Batch Number, Manual Override, Request ID, category, order_value.\nQuery: Get the average order_value grouped by category.", "target": "df.groupby('category')['order_value'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Flagged Reason, Release Version, System ID, city, cost.\nQuery: Get the number of cost values grouped by city.", "target": "df.groupby('city')['cost'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, System ID, Tracking Code, Workflow Step, city, units_sold.\nQuery: Compute the minimum units_sold per city.", "target": "df.groupby('city')['units_sold'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Release Version, Reviewer Comments, Timestamp Created, Validation Notes, employee, expenses.\nQuery: Show the sum of expenses across employee.", "target": "df.groupby('employee')['expenses'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Flagged Reason, Processing Time, Reviewer Comments, Run ID, expenses, store_id.\nQuery: Find the maximum expenses in every store_id.", "target": "df.groupby('store_id')['expenses'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Manual Override, Request ID, Reviewer Comments, region.\nQuery: Give the median region for each region.", "target": "df.groupby('region')['region'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Environment Name, Error Code, Session Token, category, tax.\nQuery: List the count of tax for each category.", "target": "df.groupby('category')['tax'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Manual Override, Processing Time, Source File Name, channel.\nQuery: Get the average channel grouped by channel.", "target": "df.groupby('channel')['channel'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Last Modified By, Processing Time, Session Token, Source File Name, cost, month.\nQuery: Show the sum of cost across month.", "target": "df.groupby('month')['cost'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Processing Time, Session Token, Timestamp Created, department, discount.\nQuery: Find the maximum discount in every department.", "target": "df.groupby('department')['discount'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Error Code, Response Time (ms), Timestamp Created, discount, month.\nQuery: Show the sum of discount across month.", "target": "df.groupby('month')['discount'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Document Ref, System ID, Workflow Step, channel, quantity.\nQuery: Find the maximum quantity in every channel.", "target": "df.groupby('channel')['quantity'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Flagged Reason, Response Time (ms), Retry Count, Validation Notes, channel, tax.\nQuery: Compute the minimum tax per channel.", "target": "df.groupby('channel')['tax'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Processing Time, Project Tag, Request ID, Validation Notes, cost, month.\nQuery: Calculate the total cost for each month.", "target": "df.groupby('month')['cost'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Last Modified By, Manual Override, Origin System, Processing Time, month, profit.\nQuery: Get the average profit grouped by month.", "target": "df.groupby('month')['profit'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Response Time (ms), Retry Count, Run ID, Timestamp Created, Validation Notes, channel.\nQuery: Get the average channel grouped by channel.", "target": "df.groupby('channel')['channel'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Error Code, Flagged Reason, Last Modified By, expenses, month.\nQuery: Find the maximum expenses in every month.", "target": "df.groupby('month')['expenses'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Batch Number, Document Ref, Tracking Code, city, units_sold.\nQuery: Get the number of units_sold values grouped by city.", "target": "df.groupby('city')['units_sold'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Batch Number, Document Ref, Response Time (ms), channel, expenses.\nQuery: Show the sum of expenses across channel.", "target": "df.groupby('channel')['expenses'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Manual Override, Request ID, Source File Name, Sync Status, expenses, region.\nQuery: List the count of expenses for each region.", "target": "df.groupby('region')['expenses'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Origin System, Project Tag, Request ID, Timestamp Created, month, order_value.\nQuery: Get the average order_value grouped by month.", "target": "df.groupby('month')['order_value'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Internal Notes, Project Tag, Release Version, city, sales.\nQuery: Calculate the total sales for each city.", "target": "df.groupby('city')['sales'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Last Modified By, Processing Time, Session Token, expenses, product.\nQuery: Find the maximum expenses in every product.", "target": "df.groupby('product')['expenses'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Project Tag, Request ID, Run ID, Sync Status, Validation Notes, cost, employee.\nQuery: List the count of cost for each employee.", "target": "df.groupby('employee')['cost'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Internal Notes, Origin System, Retry Count, department, sales.\nQuery: Show how many sales entries exist per department.", "target": "df.groupby('department')['sales'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Environment Name, Response Time (ms), Reviewer Comments, channel, profit.\nQuery: Get the average profit grouped by channel.", "target": "df.groupby('channel')['profit'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Origin System, Processing Time, Project Tag, Response Time (ms), category, discount.\nQuery: Calculate the total discount for each category.", "target": "df.groupby('category')['discount'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Internal Notes, Release Version, Run ID, employee, profit.\nQuery: Show how many profit entries exist per employee.", "target": "df.groupby('employee')['profit'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Request ID, Response Time (ms), Reviewer Comments, System ID, month, sales.\nQuery: Find the maximum sales in every month.", "target": "df.groupby('month')['sales'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Last Modified By, Origin System, Response Time (ms), Tracking Code, city, sales.\nQuery: Give the median sales for each city.", "target": "df.groupby('city')['sales'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Manual Override, Run ID, Session Token, Timestamp Created, Workflow Step, department, units_sold.\nQuery: Show the sum of units_sold across department.", "target": "df.groupby('department')['units_sold'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Last Modified By, Origin System, Reviewer Comments, Timestamp Created, Tracking Code, cost, employee.\nQuery: Give the median cost for each employee.", "target": "df.groupby('employee')['cost'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Processing Time, Project Tag, Reviewer Comments, Tracking Code, Validation Notes, customer_type, profit.\nQuery: Get the number of profit values grouped by customer_type.", "target": "df.groupby('customer_type')['profit'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Project Tag, System ID, Validation Notes, employee, profit.\nQuery: Find the maximum profit in every employee.", "target": "df.groupby('employee')['profit'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Last Modified By, Project Tag, Retry Count, System ID, city, profit.\nQuery: Calculate the total profit for each city.", "target": "df.groupby('city')['profit'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Internal Notes, Last Modified By, Retry Count, month, units_sold.\nQuery: Find standard deviation of units_sold grouped by month.", "target": "df.groupby('month')['units_sold'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Release Version, Source File Name, Workflow Step, employee.\nQuery: Find the maximum employee in every employee.", "target": "df.groupby('employee')['employee'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Origin System, Release Version, Reviewer Comments, Run ID, customer_type, quantity.\nQuery: Calculate the total quantity for each customer_type.", "target": "df.groupby('customer_type')['quantity'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Batch Number, Internal Notes, Response Time (ms), Reviewer Comments, city, quantity.\nQuery: Show the sum of quantity across city.", "target": "df.groupby('city')['quantity'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Request ID, Reviewer Comments, System ID, Timestamp Created, customer_type, units_sold.\nQuery: Compute the minimum units_sold per customer_type.", "target": "df.groupby('customer_type')['units_sold'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Job ID, Level, Processing Time, Retry Count, Validation Notes, Workflow Step.\nQuery: group job id and apply min on Level", "target": "df.groupby('Job ID')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Internal Notes, Job ID, Last Modified By, Level, Timestamp Created, Validation Notes.\nQuery: group JOB ID and apply count on Level", "target": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Error Code, Job ID, Level, Source File Name, Sync Status, System ID.\nQuery: group job identifier and apply sum on Level", "target": "df.groupby('Job ID')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Audit Trail, Batch Number, Run ID, Session Token.\nQuery: agcy wise std of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Backup ID, Batch Number, Retry Count, Run ID, System ID.\nQuery: group AGENCY and apply mean on # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Internal Notes, Manual Override, Processing Time, Source File Name, Validation Notes.\nQuery: group the data by AGENCY and get sum of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Business Title, Internal Notes, Level, Timestamp Created, Validation Notes.\nQuery: min Level per biz title", "target": "df.groupby('Business Title')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Business Title, Document Ref, Level, Request ID, Reviewer Comments, Run ID.\nQuery: group the data by biz title and get max of Level", "target": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Alert Triggered, Civil Service Title, Manual Override, Reviewer Comments, Session Token, Timestamp Created.\nQuery: aggregate # Of Positions by civil title using max", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Audit Trail, Civil Service Title, Last Modified By, Retry Count, System ID, Workflow Step.\nQuery: group civil title and apply median on # Of Positions", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Environment Name, Job ID, Request ID, Run ID, Title Classification.\nQuery: count Job ID per title class", "target": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Internal Notes, Level, Run ID, Sync Status, Timestamp Created, Title Code No.\nQuery: group title code no and apply median on Level", "target": "df.groupby('Title Code No')['Level'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Level, Run ID, Sync Status, Timestamp Created, Title Code No.\nQuery: group the data by tcode and get count of Level", "target": "df.groupby('Title Code No')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Level, Processing Time, Retry Count, Run ID, Timestamp Created, Title Code No.\nQuery: count Level based on tile code", "target": "df.groupby('Title Code No')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Internal Notes, Request ID, Retry Count, Source File Name.\nQuery: sum # Of Positions by agency", "target": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Error Code, Job ID, Level, Processing Time, Retry Count, Tracking Code.\nQuery: median Level by Job Id", "target": "df.groupby('Job ID')['Level'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Internal Notes, Level, Release Version, Source File Name, System ID, Tracking Code.\nQuery: count Level per official title", "target": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Document Ref, Internal Notes, Response Time (ms), Tracking Code, Validation Notes.\nQuery: organize by service title and get sum of # Of Positions", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Level, Origin System, Release Version, Title Code No, Tracking Code.\nQuery: categorized by tile code and get mean of Level", "target": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Internal Notes, Request ID, Retry Count, Source File Name, Validation Notes.\nQuery: split by agcy and get min of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Error Code, Last Modified By, Level, Response Time (ms), Session Token, Title Code No.\nQuery: min Level wise title code", "target": "df.groupby('Title Code No')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Release Version, Request ID, Reviewer Comments, Timestamp Created.\nQuery: group by organisation and get max of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Business Title, Environment Name, Level, Origin System, Response Time (ms), Reviewer Comments.\nQuery: sum Level grpby title of job", "target": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Job ID, Last Modified By, Retry Count, Reviewer Comments, System ID, Title Classification.\nQuery: max Job ID per title classfn", "target": "df.groupby('Title Classification')['Job ID'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Business Title, Environment Name, Level, Response Time (ms), Sync Status, System ID.\nQuery: sum Level grp biz title", "target": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Business Title, Internal Notes, Level, Response Time (ms), Retry Count.\nQuery: organize by title and get count of Level", "target": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Level, Request ID, Run ID, System ID, Title Code No.\nQuery: bucket by titlecode number and get median of Level", "target": "df.groupby('Title Code No')['Level'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Business Title, Last Modified By, Level, Request ID, Retry Count, Session Token.\nQuery: partition by business title and get count of Level", "target": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Error Code, Internal Notes, Job ID, Level, System ID, Validation Notes.\nQuery: count Level by JOB ID", "target": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Level, Response Time (ms), Reviewer Comments, Run ID, Title Code No.\nQuery: std Level grpby tcode", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Alert Triggered, Civil Service Title, Internal Notes, Last Modified By, Manual Override, Release Version.\nQuery: max # Of Positions based on service title", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Flagged Reason, Job ID, Processing Time, Reviewer Comments, System ID, Title Classification.\nQuery: partition by classification and get mean of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Internal Notes, Job ID, Processing Time, Retry Count, Sync Status, Title Classification, Workflow Step.\nQuery: groub by title classfn and get std of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Internal Notes, Job ID, Manual Override, Posting Type, System ID, Timestamp Created.\nQuery: max Job ID grpby PostingType", "target": "df.groupby('Posting Type')['Job ID'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Batch Number, Job ID, Level, Retry Count, Reviewer Comments, Run ID.\nQuery: group by job id and get max of Level", "target": "df.groupby('Job ID')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Environment Name, Job ID, Posting Type, Tracking Code, Workflow Step.\nQuery: max Job ID grp posting type", "target": "df.groupby('Posting Type')['Job ID'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Flagged Reason, Internal Notes, Job ID, Manual Override, Title Classification.\nQuery: groub by classification and get mean of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Environment Name, Job ID, Manual Override, Posting Type, Release Version.\nQuery: organize by posting and get median of Job ID", "target": "df.groupby('Posting Type')['Job ID'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Batch Number, Level, Processing Time, Sync Status, Title Code No.\nQuery: split by tcode and get std of Level", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Error Code, Job ID, Level, Processing Time, Session Token.\nQuery: mean Level wise job identifier", "target": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Business Title, Document Ref, Level, Release Version, Reviewer Comments, Source File Name.\nQuery: grup by biz title and get max of Level", "target": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Document Ref, Internal Notes, Last Modified By, Level, Release Version, Request ID.\nQuery: split by biz title and get median of Level", "target": "df.groupby('Business Title')['Level'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Flagged Reason, Level, Manual Override, Release Version, System ID, Title Code No.\nQuery: categorized by title_code and get std of Level", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Internal Notes, Job ID, Level, Response Time (ms), Run ID, Timestamp Created.\nQuery: count Level on the basis of job id", "target": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Internal Notes, Job ID, Last Modified By, Session Token, Title Classification, Validation Notes.\nQuery: partition by classification and get min of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Audit Trail, Error Code, Reviewer Comments, Workflow Step.\nQuery: categorized by agency and get std of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Backup ID, Flagged Reason, Internal Notes, Sync Status.\nQuery: cluster by agcy and get std of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Document Ref, Environment Name, Origin System, Processing Time, Retry Count.\nQuery: grup by agency and get mean of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Level, Origin System, Response Time (ms), Retry Count, Run ID, Source File Name.\nQuery: categorized by title and get std of Level", "target": "df.groupby('Business Title')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Document Ref, Flagged Reason, Project Tag, Reviewer Comments, Source File Name.\nQuery: categorized by AGENCY and get std of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Flagged Reason, Job ID, Release Version, System ID, Title Classification.\nQuery: partition by title class and get mean of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Internal Notes, Job ID, Level, Manual Override, Origin System, Retry Count, Timestamp Created.\nQuery: std Level based on job id", "target": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Document Ref, Internal Notes, Origin System, Project Tag, Sync Status.\nQuery: partition by AGENCY and get min of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Internal Notes, Job ID, Level, Request ID, Timestamp Created, Tracking Code.\nQuery: std Level by job identifier", "target": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Business Title, Document Ref, Level, Release Version, Request ID.\nQuery: max Level grp title of job", "target": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Audit Trail, Flagged Reason, Last Modified By, Release Version, Workflow Step.\nQuery: groub by agcy and get min of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Business Title, Internal Notes, Level, Retry Count, Timestamp Created.\nQuery: partition by title of job and get max of Level", "target": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Job ID, Release Version, Retry Count, System ID, Title Classification.\nQuery: groop by title classfn and get mean of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Job ID, Manual Override, Posting Type, Release Version, Source File Name.\nQuery: groub by post type and get median of Job ID", "target": "df.groupby('Posting Type')['Job ID'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Document Ref, Job ID, Level, Origin System, System ID, Workflow Step.\nQuery: organize by job id and get mean of Level", "target": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Job ID, Level, Request ID, Retry Count, Source File Name.\nQuery: std Level based on job id", "target": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Internal Notes, Processing Time, Session Token, Tracking Code, Validation Notes.\nQuery: max # Of Positions based on agency", "target": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Flagged Reason, Job ID, Level, Manual Override, Tracking Code, Workflow Step.\nQuery: split by Job Id and get mean of Level", "target": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Backup ID, Batch Number, Civil Service Title, Last Modified By, Release Version, Tracking Code.\nQuery: count # Of Positions grpby service title", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Job ID, Last Modified By, Posting Type, Retry Count, Run ID, Session Token.\nQuery: partition by PostingType and get sum of Job ID", "target": "df.groupby('Posting Type')['Job ID'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Job ID, Level, Processing Time, Run ID, Timestamp Created.\nQuery: group by job identifier and get mean of Level", "target": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Internal Notes, Job ID, Posting Type, Response Time (ms), Retry Count.\nQuery: split by posting and get std of Job ID", "target": "df.groupby('Posting Type')['Job ID'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Document Ref, Level, Release Version, Response Time (ms), Title Code No.\nQuery: partition by tile code and get sum of Level", "target": "df.groupby('Title Code No')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Flagged Reason, Last Modified By, Origin System, System ID, Tracking Code.\nQuery: i want to see it group organisation", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Flagged Reason, Posting Type, Release Version, Response Time (ms).\nQuery: can you grp type of post?", "target": "df.groupby('Posting Type').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Business Title, Retry Count, Reviewer Comments, Tracking Code, Workflow Step.\nQuery: i want to see it by title of job", "target": "df.groupby('Business Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Alert Triggered, Request ID, Response Time (ms), Timestamp Created, Tracking Code.\nQuery: grpby organisation", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Environment Name, Request ID, Response Time (ms), Reviewer Comments, Source File Name.\nQuery: i want to see it based on title", "target": "df.groupby('Business Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Flagged Reason, Project Tag, Retry Count, Session Token, Workflow Step.\nQuery: show data by AGENCY", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Internal Notes, Posting Type, Processing Time, Release Version, Reviewer Comments, Tracking Code.\nQuery: show data categorize by PostingType", "target": "df.groupby('Posting Type').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Business Title, Project Tag, Response Time (ms), Sync Status.\nQuery: grp biz title", "target": "df.groupby('Business Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Approval Status, Archived Flag, Backup ID, Run ID, Validation Notes.\nQuery: can you organize by AGENCY?", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Civil Service Title, Internal Notes, Last Modified By, Request ID, Workflow Step.\nQuery: categorize by cst", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Backup ID, Manual Override, Release Version, Tracking Code, Workflow Step.\nQuery: cluster by Agency", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Civil Service Title, Origin System, Processing Time, Response Time (ms), Session Token, System ID.\nQuery: i want to see it grp cst", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Document Ref, Request ID, Response Time (ms), Run ID, Workflow Step.\nQuery: i want to see it grpby biz title", "target": "df.groupby('Business Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Civil Service Title, Flagged Reason, Internal Notes, Response Time (ms), Source File Name, Workflow Step.\nQuery: based on service title", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Civil Service Title, Document Ref, Error Code, Internal Notes, Release Version, Run ID.\nQuery: can you cluster by govt title?", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Retry Count, Source File Name, System ID, Title Code No, Workflow Step.\nQuery: show data organize by title code no", "target": "df.groupby('Title Code No').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Job ID, Last Modified By, Release Version, Workflow Step.\nQuery: can you grouped by j o b i d?", "target": "df.groupby('Job ID').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Document Ref, Error Code, Processing Time, Project Tag, Reviewer Comments.\nQuery: grouped by AGENCY", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Alert Triggered, Approval Status, Backup ID, Batch Number, Source File Name.\nQuery: can you split by agcy?", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Civil Service Title, Error Code, Origin System, Response Time (ms), Tracking Code.\nQuery: show data by govt title", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Environment Name, Flagged Reason, Level, Source File Name, Sync Status, Title Code No.\nQuery: Could you group the data by title code and show the mean of Level?", "target": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Internal Notes, Job ID, Response Time (ms), Run ID, Title Classification.\nQuery: I'd like to know the count of Job ID by title classification.", "target": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Approval Status, Civil Service Title, Origin System, Response Time (ms), Source File Name, Workflow Step.\nQuery: How many # Of Positions values are there per civil title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Error Code, Level, Processing Time, Reviewer Comments, System ID, Title Code No.\nQuery: Which title code no has the highest Level std?", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Alert Triggered, Approval Status, Archived Flag, Civil Service Title, Project Tag, Source File Name.\nQuery: Can you show me the max # Of Positions grouped by service title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Archived Flag, Processing Time, Release Version, Source File Name, System ID.\nQuery: What\u2019s the min of # Of Positions in each AGENCY group?", "target": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Batch Number, Civil Service Title, Error Code, Flagged Reason, Processing Time, Workflow Step.\nQuery: List count # Of Positions per civil service.", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Level, Manual Override, Origin System, Release Version, System ID, Title Code No.\nQuery: Can you show me the mean Level grouped by tile code?", "target": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Last Modified By, Request ID, Retry Count, Session Token.\nQuery: List sum # Of Positions per Agency.", "target": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Backup ID, Last Modified By, Project Tag, Run ID, System ID.\nQuery: Could you group the data by Agency and show the count of # Of Positions?", "target": "df.groupby('Agency')['# Of Positions'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Alert Triggered, Civil Service Title, Document Ref, Error Code, Release Version, Response Time (ms).\nQuery: Which service title has the highest # Of Positions std?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Environment Name, Level, Manual Override, Origin System, Project Tag, Validation Notes.\nQuery: I'd like to know the min of Level by business title.", "target": "df.groupby('Business Title')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Batch Number, Job ID, Retry Count, Source File Name, Title Classification.\nQuery: Which title classfn has the highest Job ID count?", "target": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Environment Name, Level, Processing Time, Project Tag, Response Time (ms), Validation Notes.\nQuery: Could you group the data by biz title and show the count of Level?", "target": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Job ID, Level, Manual Override, Reviewer Comments, System ID, Tracking Code.\nQuery: Which j o b i d has the highest Level min?", "target": "df.groupby('Job ID')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Environment Name, Level, Release Version, Retry Count, Sync Status, Timestamp Created.\nQuery: List std Level per official title.", "target": "df.groupby('Business Title')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Alert Triggered, Archived Flag, Backup ID, Civil Service Title, Processing Time, Workflow Step.\nQuery: Give me the std of # Of Positions for every cst.", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Error Code, Job ID, Project Tag, Title Classification, Validation Notes.\nQuery: How is Job ID distributed across title classfn?", "target": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Business Title, Level, Origin System, Processing Time, Project Tag.\nQuery: Which business title has the highest Level sum?", "target": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Job ID, Last Modified By, Origin System, Release Version, Sync Status, Title Classification.\nQuery: Could you group the data by title class and show the sum of Job ID?", "target": "df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Flagged Reason, Internal Notes, Job ID, Sync Status, Timestamp Created, Title Classification.\nQuery: How is Job ID distributed across title classfn?", "target": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Job ID, Level, Request ID, Source File Name, Sync Status.\nQuery: What\u2019s the count of Level in each j o b i d group?", "target": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Document Ref, Job ID, Manual Override, Processing Time, Project Tag, Title Classification.\nQuery: How many Job ID values are there per title classification?", "target": "df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Error Code, Last Modified By, Origin System, Session Token, Tracking Code.\nQuery: How many # Of Positions values are there per civil title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Origin System, Release Version, Request ID, Source File Name, Timestamp Created.\nQuery: Can you show me the min # Of Positions grouped by civil title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Job ID, Last Modified By, Level, Project Tag, Tracking Code.\nQuery: group job id and apply min on Level", "target": "df.groupby('Job ID')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Job ID, Level, Request ID, Source File Name, Tracking Code.\nQuery: group JOB ID and apply count on Level", "target": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Backup ID, Job ID, Level, Session Token, Workflow Step.\nQuery: group job identifier and apply sum on Level", "target": "df.groupby('Job ID')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Archived Flag, Backup ID, Processing Time, Session Token.\nQuery: agcy wise std of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Flagged Reason, Release Version, Reviewer Comments, Session Token.\nQuery: group AGENCY and apply mean on # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Environment Name, Internal Notes, Sync Status, Timestamp Created.\nQuery: group the data by AGENCY and get sum of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Environment Name, Internal Notes, Level, Response Time (ms), System ID, Validation Notes.\nQuery: min Level per biz title", "target": "df.groupby('Business Title')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Business Title, Level, Release Version, Response Time (ms), Retry Count, System ID.\nQuery: group the data by biz title and get max of Level", "target": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Document Ref, Origin System, Session Token, System ID, Validation Notes.\nQuery: aggregate # Of Positions by civil title using max", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Approval Status, Audit Trail, Civil Service Title, Internal Notes, Retry Count, Sync Status.\nQuery: group civil title and apply median on # Of Positions", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Job ID, Response Time (ms), Source File Name, Title Classification, Workflow Step.\nQuery: count Job ID per title class", "target": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Flagged Reason, Level, Source File Name, Sync Status, Title Code No, Validation Notes.\nQuery: group title code no and apply median on Level", "target": "df.groupby('Title Code No')['Level'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Internal Notes, Last Modified By, Level, Processing Time, Timestamp Created, Title Code No.\nQuery: group the data by tcode and get count of Level", "target": "df.groupby('Title Code No')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Error Code, Level, Manual Override, Origin System, Processing Time, Title Code No.\nQuery: count Level based on tile code", "target": "df.groupby('Title Code No')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Batch Number, Document Ref, Response Time (ms), Reviewer Comments, Tracking Code.\nQuery: sum # Of Positions by agency", "target": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Internal Notes, Job ID, Level, Processing Time, Run ID, Workflow Step.\nQuery: median Level by Job Id", "target": "df.groupby('Job ID')['Level'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Document Ref, Level, Origin System, Release Version, Session Token, Sync Status.\nQuery: count Level per official title", "target": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Document Ref, Reviewer Comments, Source File Name, Timestamp Created, Validation Notes.\nQuery: organize by service title and get sum of # Of Positions", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Level, Request ID, Reviewer Comments, Run ID, Title Code No.\nQuery: categorized by tile code and get mean of Level", "target": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Audit Trail, Project Tag, Session Token, Tracking Code.\nQuery: split by agcy and get min of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Environment Name, Level, Release Version, Run ID, Source File Name, Title Code No, Tracking Code.\nQuery: min Level wise title code", "target": "df.groupby('Title Code No')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Origin System, Release Version, Source File Name, Sync Status, Validation Notes.\nQuery: group by organisation and get max of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Batch Number, Business Title, Flagged Reason, Level, Project Tag, Run ID.\nQuery: sum Level grpby title of job", "target": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Internal Notes, Job ID, Release Version, Reviewer Comments, Session Token, Source File Name, Title Classification.\nQuery: max Job ID per title classfn", "target": "df.groupby('Title Classification')['Job ID'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Business Title, Flagged Reason, Level, Manual Override, Sync Status.\nQuery: sum Level grp biz title", "target": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Business Title, Flagged Reason, Level, Origin System, Request ID, Validation Notes.\nQuery: organize by title and get count of Level", "target": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Level, Retry Count, Sync Status, Title Code No, Validation Notes.\nQuery: bucket by titlecode number and get median of Level", "target": "df.groupby('Title Code No')['Level'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Business Title, Error Code, Last Modified By, Level, Session Token.\nQuery: partition by business title and get count of Level", "target": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Job ID, Level, Manual Override, Project Tag, Session Token, Validation Notes, Workflow Step.\nQuery: count Level by JOB ID", "target": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Level, Processing Time, Project Tag, Retry Count, Source File Name, Title Code No, Tracking Code.\nQuery: std Level grpby tcode", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Alert Triggered, Approval Status, Backup ID, Civil Service Title, Origin System, Retry Count.\nQuery: max # Of Positions based on service title", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Environment Name, Job ID, Processing Time, Title Classification, Validation Notes.\nQuery: partition by classification and get mean of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Job ID, Processing Time, Run ID, Session Token, Title Classification, Validation Notes, Workflow Step.\nQuery: groub by title classfn and get std of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Internal Notes, Job ID, Last Modified By, Origin System, Posting Type, Run ID.\nQuery: max Job ID grpby PostingType", "target": "df.groupby('Posting Type')['Job ID'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Job ID, Level, Processing Time, Reviewer Comments, System ID.\nQuery: group by job id and get max of Level", "target": "df.groupby('Job ID')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Batch Number, Environment Name, Job ID, Manual Override, Posting Type, Workflow Step.\nQuery: max Job ID grp posting type", "target": "df.groupby('Posting Type')['Job ID'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Job ID, Project Tag, Request ID, Retry Count, Run ID, Title Classification, Tracking Code.\nQuery: groub by classification and get mean of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Job ID, Last Modified By, Manual Override, Posting Type, Project Tag, Source File Name, Timestamp Created.\nQuery: organize by posting and get median of Job ID", "target": "df.groupby('Posting Type')['Job ID'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Flagged Reason, Level, Project Tag, Request ID, Title Code No.\nQuery: split by tcode and get std of Level", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Internal Notes, Job ID, Last Modified By, Level, Response Time (ms), Workflow Step.\nQuery: mean Level wise job identifier", "target": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Business Title, Level, Retry Count, Run ID, Sync Status, System ID.\nQuery: grup by biz title and get max of Level", "target": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Business Title, Level, Project Tag, Retry Count, Timestamp Created.\nQuery: split by biz title and get median of Level", "target": "df.groupby('Business Title')['Level'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Level, Manual Override, Processing Time, Release Version, Source File Name, Title Code No, Workflow Step.\nQuery: categorized by title_code and get std of Level", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Environment Name, Job ID, Level, Origin System, Timestamp Created.\nQuery: count Level on the basis of job id", "target": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Job ID, Last Modified By, Release Version, Response Time (ms), Title Classification, Workflow Step.\nQuery: partition by classification and get min of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Archived Flag, Error Code, Processing Time, Source File Name.\nQuery: categorized by agency and get std of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Flagged Reason, Last Modified By, Reviewer Comments, Session Token.\nQuery: cluster by agcy and get std of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Request ID, Response Time (ms), Session Token, Sync Status, Validation Notes.\nQuery: grup by agency and get mean of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Business Title, Level, Project Tag, Sync Status, Validation Notes.\nQuery: categorized by title and get std of Level", "target": "df.groupby('Business Title')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Error Code, Manual Override, Origin System, Run ID.\nQuery: categorized by AGENCY and get std of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Flagged Reason, Job ID, Last Modified By, Title Classification, Tracking Code.\nQuery: partition by title class and get mean of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Job ID, Level, Origin System, Processing Time, Timestamp Created.\nQuery: std Level based on job id", "target": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Internal Notes, Last Modified By, Request ID, Response Time (ms), Reviewer Comments.\nQuery: partition by AGENCY and get min of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Job ID, Level, Processing Time, Retry Count, Run ID, System ID, Validation Notes.\nQuery: std Level by job identifier", "target": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Business Title, Document Ref, Level, Manual Override, Release Version, Validation Notes.\nQuery: max Level grp title of job", "target": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Backup ID, Error Code, Internal Notes, Run ID, Sync Status.\nQuery: groub by agcy and get min of # Of Positions", "target": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Business Title, Environment Name, Level, Origin System, Source File Name.\nQuery: partition by title of job and get max of Level", "target": "df.groupby('Business Title')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Flagged Reason, Job ID, Processing Time, Timestamp Created, Title Classification.\nQuery: groop by title classfn and get mean of Job ID", "target": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Environment Name, Error Code, Job ID, Posting Type.\nQuery: groub by post type and get median of Job ID", "target": "df.groupby('Posting Type')['Job ID'].agg('median').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Job ID, Last Modified By, Level, Processing Time, Release Version, Source File Name.\nQuery: organize by job id and get mean of Level", "target": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Job ID, Level, Origin System, Request ID, Sync Status, Timestamp Created.\nQuery: std Level based on job id", "target": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Audit Trail, Manual Override, Reviewer Comments, Sync Status, Validation Notes.\nQuery: max # Of Positions based on agency", "target": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Job ID, Level, Manual Override, Project Tag, Release Version, Response Time (ms).\nQuery: split by Job Id and get mean of Level", "target": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Document Ref, Request ID, Timestamp Created, Workflow Step.\nQuery: count # Of Positions grpby service title", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Flagged Reason, Job ID, Posting Type, Processing Time, Release Version, Run ID.\nQuery: partition by PostingType and get sum of Job ID", "target": "df.groupby('Posting Type')['Job ID'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Environment Name, Internal Notes, Job ID, Level, Origin System.\nQuery: group by job identifier and get mean of Level", "target": "df.groupby('Job ID')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Batch Number, Job ID, Posting Type, Sync Status, Tracking Code, Validation Notes, Workflow Step.\nQuery: split by posting and get std of Job ID", "target": "df.groupby('Posting Type')['Job ID'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Level, Release Version, Reviewer Comments, Title Code No, Validation Notes.\nQuery: partition by tile code and get sum of Level", "target": "df.groupby('Title Code No')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Audit Trail, Environment Name, Run ID, Source File Name, Tracking Code.\nQuery: i want to see it group organisation", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Flagged Reason, Origin System, Posting Type, Request ID, System ID.\nQuery: can you grp type of post?", "target": "df.groupby('Posting Type').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Business Title, Flagged Reason, Release Version, Reviewer Comments, Timestamp Created.\nQuery: i want to see it by title of job", "target": "df.groupby('Business Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Batch Number, Last Modified By, Response Time (ms), Session Token, Tracking Code.\nQuery: grpby organisation", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Document Ref, Last Modified By, Origin System, System ID, Validation Notes.\nQuery: i want to see it based on title", "target": "df.groupby('Business Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Approval Status, Manual Override, Session Token, Timestamp Created, Workflow Step.\nQuery: show data by AGENCY", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Posting Type, Processing Time, Run ID, System ID, Timestamp Created, Workflow Step.\nQuery: show data categorize by PostingType", "target": "df.groupby('Posting Type').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Internal Notes, Origin System, Timestamp Created, Tracking Code, Workflow Step.\nQuery: grp biz title", "target": "df.groupby('Business Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Alert Triggered, Backup ID, Document Ref, Environment Name, Origin System.\nQuery: can you organize by AGENCY?", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Civil Service Title, Processing Time, Reviewer Comments, Session Token, Validation Notes.\nQuery: categorize by cst", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Alert Triggered, Audit Trail, Origin System, Retry Count, Session Token.\nQuery: cluster by Agency", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Civil Service Title, Origin System, Processing Time, System ID, Validation Notes, Workflow Step.\nQuery: i want to see it grp cst", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Document Ref, Environment Name, Last Modified By, Session Token, Workflow Step.\nQuery: i want to see it grpby biz title", "target": "df.groupby('Business Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Civil Service Title, Retry Count, Timestamp Created, Validation Notes.\nQuery: based on service title", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Civil Service Title, Manual Override, Project Tag, Release Version, Source File Name, Tracking Code.\nQuery: can you cluster by govt title?", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Last Modified By, Sync Status, Timestamp Created, Title Code No, Tracking Code.\nQuery: show data organize by title code no", "target": "df.groupby('Title Code No').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Document Ref, Job ID, Last Modified By, Origin System, Run ID, Tracking Code.\nQuery: can you grouped by j o b i d?", "target": "df.groupby('Job ID').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Internal Notes, Manual Override, Processing Time, Session Token, Validation Notes.\nQuery: grouped by AGENCY", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Agency, Document Ref, Manual Override, Reviewer Comments, Run ID, Tracking Code.\nQuery: can you split by agcy?", "target": "df.groupby('Agency').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Civil Service Title, Document Ref, Internal Notes, Manual Override.\nQuery: show data by govt title", "target": "df.groupby('Civil Service Title').first().reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Environment Name, Internal Notes, Level, Reviewer Comments, Timestamp Created, Title Code No.\nQuery: Could you group the data by title code and show the mean of Level?", "target": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Error Code, Job ID, Last Modified By, Title Classification.\nQuery: I'd like to know the count of Job ID by title classification.", "target": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Alert Triggered, Civil Service Title, Environment Name, Last Modified By, Origin System, System ID.\nQuery: How many # Of Positions values are there per civil title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Error Code, Level, Release Version, Request ID, Response Time (ms), Session Token, Title Code No.\nQuery: Which title code no has the highest Level std?", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Last Modified By, Processing Time, Response Time (ms), Retry Count, System ID.\nQuery: Can you show me the max # Of Positions grouped by service title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Document Ref, Retry Count, Sync Status, Validation Notes.\nQuery: What\u2019s the min of # Of Positions in each AGENCY group?", "target": "df.groupby('Agency')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Internal Notes, Release Version, Request ID, Session Token, Workflow Step.\nQuery: List count # Of Positions per civil service.", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Flagged Reason, Internal Notes, Level, Release Version, Reviewer Comments, Title Code No.\nQuery: Can you show me the mean Level grouped by tile code?", "target": "df.groupby('Title Code No')['Level'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Internal Notes, Response Time (ms), Validation Notes, Workflow Step.\nQuery: List sum # Of Positions per Agency.", "target": "df.groupby('Agency')['# Of Positions'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Alert Triggered, Approval Status, Manual Override, Request ID, Timestamp Created.\nQuery: Could you group the data by Agency and show the count of # Of Positions?", "target": "df.groupby('Agency')['# Of Positions'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Document Ref, Manual Override, Project Tag, Release Version, Run ID.\nQuery: Which service title has the highest # Of Positions std?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Business Title, Level, Origin System, Release Version, Request ID, Workflow Step.\nQuery: I'd like to know the min of Level by business title.", "target": "df.groupby('Business Title')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Job ID, Manual Override, Project Tag, Title Classification, Tracking Code, Workflow Step.\nQuery: Which title classfn has the highest Job ID count?", "target": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Environment Name, Level, Response Time (ms), Source File Name, Timestamp Created, Validation Notes.\nQuery: Could you group the data by biz title and show the count of Level?", "target": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Error Code, Job ID, Level, Project Tag, Source File Name, Tracking Code.\nQuery: Which j o b i d has the highest Level min?", "target": "df.groupby('Job ID')['Level'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Business Title, Environment Name, Level, Source File Name, Tracking Code, Workflow Step.\nQuery: List std Level per official title.", "target": "df.groupby('Business Title')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Approval Status, Audit Trail, Batch Number, Civil Service Title, Flagged Reason, Origin System.\nQuery: Give me the std of # Of Positions for every cst.", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Flagged Reason, Job ID, Last Modified By, Retry Count, Sync Status, Title Classification.\nQuery: How is Job ID distributed across title classfn?", "target": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Business Title, Error Code, Last Modified By, Level, Request ID.\nQuery: Which business title has the highest Level sum?", "target": "df.groupby('Business Title')['Level'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Flagged Reason, Job ID, Project Tag, Retry Count, Timestamp Created, Title Classification.\nQuery: Could you group the data by title class and show the sum of Job ID?", "target": "df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Internal Notes, Job ID, Processing Time, Source File Name, Title Classification.\nQuery: How is Job ID distributed across title classfn?", "target": "df.groupby('Title Classification')['Job ID'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Job ID, Level, Session Token, Source File Name, Validation Notes.\nQuery: What\u2019s the count of Level in each j o b i d group?", "target": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Internal Notes, Job ID, Release Version, Reviewer Comments, Timestamp Created, Title Classification.\nQuery: How many Job ID values are there per title classification?", "target": "df.groupby('Title Classification')['Job ID'].agg('sum').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Alert Triggered, Civil Service Title, Document Ref, Error Code, Reviewer Comments, System ID.\nQuery: How many # Of Positions values are there per civil title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Document Ref, Flagged Reason, Manual Override, Origin System, Session Token.\nQuery: Can you show me the min # Of Positions grouped by civil title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('min').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Job ID, Level, Processing Time, Response Time (ms), Retry Count.\nQuery: How does the Level vary across job id?", "target": "df.groupby('Job ID')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Job ID, Last Modified By, Processing Time, Reviewer Comments, Source File Name, Title Classification.\nQuery: Show the spread of Job ID by classification.", "target": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Approval Status, Civil Service Title, Processing Time, Project Tag, System ID, Tracking Code.\nQuery: What\u2019s the variation in # Of Positions per civil title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Level, Manual Override, Project Tag, Release Version, Sync Status, Title Code No, Workflow Step.\nQuery: Tell me the spread of Level across different title code no.", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Civil Service Title, Document Ref, Release Version, Run ID, Timestamp Created, Validation Notes.\nQuery: What is the variability of # Of Positions grouped by civil service?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Level, Manual Override, Project Tag, System ID, Title Code No.\nQuery: What is the variability of Level grouped by title code?", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Approval Status, Civil Service Title, Document Ref, Processing Time, Source File Name, Validation Notes.\nQuery: What is the variability of # Of Positions grouped by service title?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Alert Triggered, Archived Flag, Civil Service Title, Release Version, Session Token, Timestamp Created.\nQuery: Tell me the spread of # Of Positions across different govt title.", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Archived Flag, Job ID, Posting Type, Processing Time, Response Time (ms), Sync Status, System ID.\nQuery: Check how Job ID changes across type of post.", "target": "df.groupby('Posting Type')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Batch Number, System ID, Tracking Code, Validation Notes.\nQuery: What's the range of # Of Positions for each AGENCY?", "target": "df.groupby('Agency')['# Of Positions'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: Internal Notes, Job ID, Level, Manual Override, Processing Time, Release Version, System ID.\nQuery: Give the scattered values of Level by jobid.", "target": "df.groupby('Job ID')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Job ID, Origin System, Posting Type, Response Time (ms), Reviewer Comments.\nQuery: How is Job ID scattered over type of post?", "target": "df.groupby('Posting Type')['Job ID'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Level, Origin System, Response Time (ms), Retry Count, System ID, Title Code No.\nQuery: How does the Level vary across title_code?", "target": "df.groupby('Title Code No')['Level'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Business Title, Environment Name, Internal Notes, Level, Manual Override, Release Version, Request ID.\nQuery: Give the scattered values of Level by title.", "target": "df.groupby('Business Title')['Level'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Flagged Reason, Job ID, Last Modified By, Source File Name, Title Classification, Tracking Code.\nQuery: How does the Job ID vary across title classfn?", "target": "df.groupby('Title Classification')['Job ID'].agg('std').reset_index()"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Level, Processing Time, Run ID, Session Token, Title Code No.\nQuery: What's the range of Level for each tcode?", "target": "df.groupby('Title Code No')['Level'].agg('max').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Environment Name, Manual Override, Response Time (ms), Retry Count, Workflow Step.\nQuery: What\u2019s the variation in # Of Positions per agcy?", "target": "df.groupby('Agency')['# Of Positions'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: Audit Trail, Job ID, Manual Override, Origin System, Release Version, Source File Name, Title Classification.\nQuery: Check how Job ID changes across title classfn.", "target": "df.groupby('Title Classification')['Job ID'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Backup ID, Civil Service Title, Last Modified By, Source File Name, Validation Notes, Workflow Step.\nQuery: What\u2019s the variation in # Of Positions per civil service?", "target": "df.groupby('Civil Service Title')['# Of Positions'].agg('mean').reset_index()"}
{"source": "The DataFrame contains the following columns: # Of Positions, Agency, Approval Status, Audit Trail, Environment Name, Error Code, Last Modified By.\nQuery: Can you show the distribution of # Of Positions across agcy?", "target": "df.groupby('Agency')['# Of Positions'].agg('count').reset_index()"}
{"source": "The DataFrame contains the following columns: Backup ID, Internal Notes, Origin System, Processing Time, Release Version, customers, revenue.\nQuery: Show customers in increasing order of revenue.", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Batch Number, Flagged Reason, Internal Notes, Last Modified By, Request ID, employees, units_sold.\nQuery: Display employees in order of decreasing units_sold.", "target": "df.sort_values(by='units_sold', ascending=False)"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Manual Override, Project Tag, Run ID, employees, sales.\nQuery: Get the highest sales values for each employees.", "target": "df.sort_values(by='sales', ascending=False)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Document Ref, Environment Name, Release Version, rating, stores.\nQuery: Find top 3 stores with highest rating.", "target": "df.sort_values(by='rating', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Reviewer Comments, Run ID, departments, sales.\nQuery: Get the highest sales values for each departments.", "target": "df.sort_values(by='sales', ascending=False)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Flagged Reason, Release Version, Run ID, Source File Name, departments, units_sold.\nQuery: Find top 3 departments with highest units_sold.", "target": "df.sort_values(by='units_sold', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Internal Notes, Request ID, Timestamp Created, revenue, stores.\nQuery: List the lowest revenue values grouped by stores.", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Error Code, Request ID, Run ID, customers, profit.\nQuery: Show customers in increasing order of profit.", "target": "df.sort_values(by='profit', ascending=True)"}
{"source": "The DataFrame contains the following columns: Document Ref, Error Code, Project Tag, Request ID, Timestamp Created, departments, units_sold.\nQuery: Rank departments by units_sold.", "target": "df['units_sold_rank'] = df['units_sold'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Processing Time, Project Tag, Sync Status, profit, stores.\nQuery: Get the highest profit values for each stores.", "target": "df.sort_values(by='profit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Error Code, Source File Name, employees, expenses.\nQuery: Rank employees by expenses.", "target": "df['expenses_rank'] = df['expenses'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Document Ref, Manual Override, Processing Time, Retry Count, Timestamp Created, customers, profit.\nQuery: Show customers sorted by profit ascending.", "target": "df.sort_values(by='profit', ascending=True)"}
{"source": "The DataFrame contains the following columns: Internal Notes, Last Modified By, Request ID, Session Token, Timestamp Created, sales, stores.\nQuery: Show stores sorted by sales ascending.", "target": "df.sort_values(by='sales', ascending=True)"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Manual Override, Request ID, Run ID, expenses, stores.\nQuery: Rank stores by expenses.", "target": "df['expenses_rank'] = df['expenses'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Backup ID, Error Code, Manual Override, Response Time (ms), Sync Status, expenses, stores.\nQuery: Display stores in order of decreasing expenses.", "target": "df.sort_values(by='expenses', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Flagged Reason, Response Time (ms), Tracking Code, sales, stores.\nQuery: Get bottom 10 stores based on sales.", "target": "df.sort_values(by='sales', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Backup ID, Internal Notes, Project Tag, Request ID, Workflow Step, customers, units_sold.\nQuery: Get bottom 10 customers based on units_sold.", "target": "df.sort_values(by='units_sold', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Environment Name, Processing Time, Run ID, products, profit.\nQuery: Rank products by profit.", "target": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Batch Number, Environment Name, Response Time (ms), customers, profit.\nQuery: Sort customers by profit in descending order.", "target": "df.sort_values(by='profit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Response Time (ms), System ID, Tracking Code, employees, profit.\nQuery: List top 5 employees by profit.", "target": "df.sort_values(by='profit', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Environment Name, Release Version, Session Token, Validation Notes, products, profit.\nQuery: Get bottom 10 products based on profit.", "target": "df.sort_values(by='profit', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Document Ref, Run ID, Sync Status, departments, units_sold.\nQuery: Find top 3 departments with highest units_sold.", "target": "df.sort_values(by='units_sold', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Processing Time, Request ID, Response Time (ms), System ID, Tracking Code, products, rating.\nQuery: Display products in order of decreasing rating.", "target": "df.sort_values(by='rating', ascending=False)"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Origin System, Session Token, Workflow Step, rating, stores.\nQuery: Get the highest rating values for each stores.", "target": "df.sort_values(by='rating', ascending=False)"}
{"source": "The DataFrame contains the following columns: Document Ref, Internal Notes, Processing Time, Project Tag, Session Token, customers, sales.\nQuery: Show customers in increasing order of sales.", "target": "df.sort_values(by='sales', ascending=True)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Manual Override, Project Tag, Reviewer Comments, products, revenue.\nQuery: List the lowest revenue values grouped by products.", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Last Modified By, Processing Time, Request ID, Run ID, employees, expenses.\nQuery: Find top 3 employees with highest expenses.", "target": "df.sort_values(by='expenses', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Error Code, Manual Override, Reviewer Comments, sales, stores.\nQuery: Sort stores by sales in descending order.", "target": "df.sort_values(by='sales', ascending=False)"}
{"source": "The DataFrame contains the following columns: Release Version, Response Time (ms), Sync Status, System ID, Validation Notes, revenue, stores.\nQuery: Sort stores by revenue in descending order.", "target": "df.sort_values(by='revenue', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Backup ID, Validation Notes, Workflow Step, products, sales.\nQuery: Find top 3 products with highest sales.", "target": "df.sort_values(by='sales', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Manual Override, Release Version, Run ID, Session Token, Timestamp Created, products, rating.\nQuery: Rank products by rating.", "target": "df['rating_rank'] = df['rating'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Flagged Reason, Processing Time, Run ID, departments, profit.\nQuery: Rank departments by profit.", "target": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Project Tag, Release Version, Reviewer Comments, employees, units_sold.\nQuery: Get bottom 10 employees based on units_sold.", "target": "df.sort_values(by='units_sold', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Document Ref, Last Modified By, Source File Name, customers, expenses.\nQuery: Display customers in order of decreasing expenses.", "target": "df.sort_values(by='expenses', ascending=False)"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Environment Name, Error Code, Run ID, employees, revenue.\nQuery: Get bottom 10 employees based on revenue.", "target": "df.sort_values(by='revenue', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Document Ref, Error Code, Last Modified By, Release Version, Timestamp Created, customers, profit.\nQuery: Sort customers by profit in descending order.", "target": "df.sort_values(by='profit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Internal Notes, Last Modified By, Source File Name, employees, profit.\nQuery: List the lowest profit values grouped by employees.", "target": "df.sort_values(by='profit', ascending=True)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Error Code, Processing Time, Sync Status, employees, revenue.\nQuery: List the lowest revenue values grouped by employees.", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Batch Number, Request ID, Reviewer Comments, Session Token, Tracking Code, departments, profit.\nQuery: Show departments in increasing order of profit.", "target": "df.sort_values(by='profit', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Last Modified By, Origin System, Release Version, Reviewer Comments, products, profit.\nQuery: Find top 3 products with highest profit.", "target": "df.sort_values(by='profit', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Backup ID, Session Token, Source File Name, System ID, Tracking Code, customers, revenue.\nQuery: Find top 3 customers with highest revenue.", "target": "df.sort_values(by='revenue', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Internal Notes, Processing Time, Workflow Step, rating, stores.\nQuery: Sort stores by rating in descending order.", "target": "df.sort_values(by='rating', ascending=False)"}
{"source": "The DataFrame contains the following columns: Batch Number, Document Ref, Internal Notes, Origin System, Sync Status, departments, expenses.\nQuery: List the lowest expenses values grouped by departments.", "target": "df.sort_values(by='expenses', ascending=True)"}
{"source": "The DataFrame contains the following columns: Retry Count, Reviewer Comments, Source File Name, Tracking Code, Workflow Step, departments, profit.\nQuery: Display departments in order of decreasing profit.", "target": "df.sort_values(by='profit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Batch Number, Origin System, Retry Count, Session Token, Timestamp Created, employees, profit.\nQuery: Find top 3 employees with highest profit.", "target": "df.sort_values(by='profit', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Release Version, Run ID, System ID, products, revenue.\nQuery: Show products in increasing order of revenue.", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Internal Notes, Manual Override, Run ID, Tracking Code, Validation Notes, customers, rating.\nQuery: Display customers in order of decreasing rating.", "target": "df.sort_values(by='rating', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Internal Notes, Manual Override, Retry Count, Source File Name, departments, expenses.\nQuery: List the lowest expenses values grouped by departments.", "target": "df.sort_values(by='expenses', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Backup ID, Internal Notes, Source File Name, expenses, products.\nQuery: Find top 3 products with highest expenses.", "target": "df.sort_values(by='expenses', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Batch Number, Internal Notes, Last Modified By, System ID, Tracking Code, departments, sales.\nQuery: Display departments in order of decreasing sales.", "target": "df.sort_values(by='sales', ascending=False)"}
{"source": "The DataFrame contains the following columns: Backup ID, Error Code, Internal Notes, Project Tag, Validation Notes, products, units_sold.\nQuery: List the lowest units_sold values grouped by products.", "target": "df.sort_values(by='units_sold', ascending=True)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Last Modified By, Reviewer Comments, Run ID, departments, revenue.\nQuery: Show departments in increasing order of revenue.", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Manual Override, Retry Count, System ID, departments, revenue.\nQuery: List the lowest revenue values grouped by departments.", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Backup ID, Internal Notes, Project Tag, Reviewer Comments, Timestamp Created, customers, rating.\nQuery: Show customers sorted by rating ascending.", "target": "df.sort_values(by='rating', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Internal Notes, Timestamp Created, Workflow Step, expenses, products.\nQuery: Get bottom 10 products based on expenses.", "target": "df.sort_values(by='expenses', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Error Code, Manual Override, Processing Time, Request ID, Retry Count, departments, profit.\nQuery: List top 5 departments by profit.", "target": "df.sort_values(by='profit', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Source File Name, Sync Status, Workflow Step, customers, rating.\nQuery: List top 5 customers by rating.", "target": "df.sort_values(by='rating', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Last Modified By, Origin System, System ID, products, rating.\nQuery: Get bottom 10 products based on rating.", "target": "df.sort_values(by='rating', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Processing Time, Project Tag, Retry Count, Reviewer Comments, Run ID, revenue, stores.\nQuery: Rank stores by revenue.", "target": "df['revenue_rank'] = df['revenue'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Release Version, Retry Count, Sync Status, System ID, Timestamp Created, employees, units_sold.\nQuery: Show employees sorted by units_sold ascending.", "target": "df.sort_values(by='units_sold', ascending=True)"}
{"source": "The DataFrame contains the following columns: Processing Time, Source File Name, Sync Status, Timestamp Created, Validation Notes, customers, units_sold.\nQuery: Rank customers by units_sold.", "target": "df['units_sold_rank'] = df['units_sold'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Backup ID, Manual Override, Processing Time, Session Token, System ID, employees, rating.\nQuery: Find top 3 employees with highest rating.", "target": "df.sort_values(by='rating', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Manual Override, Release Version, Request ID, Reviewer Comments, Source File Name, departments, expenses.\nQuery: Show departments in increasing order of expenses.", "target": "df.sort_values(by='expenses', ascending=True)"}
{"source": "The DataFrame contains the following columns: Request ID, Retry Count, Run ID, Source File Name, Timestamp Created, products, profit.\nQuery: Rank products by profit.", "target": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Approval Status, Flagged Reason, Retry Count, System ID, Workflow Step, employees, revenue.\nQuery: Sort employees by revenue in descending order.", "target": "df.sort_values(by='revenue', ascending=False)"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Last Modified By, Processing Time, Retry Count, Tracking Code, customers, rating.\nQuery: Display customers in order of decreasing rating.", "target": "df.sort_values(by='rating', ascending=False)"}
{"source": "The DataFrame contains the following columns: Project Tag, Release Version, Timestamp Created, Tracking Code, Validation Notes, sales, stores.\nQuery: Sort stores by sales in descending order.", "target": "df.sort_values(by='sales', ascending=False)"}
{"source": "The DataFrame contains the following columns: Project Tag, Response Time (ms), Run ID, Session Token, Tracking Code, customers, sales.\nQuery: Find top 3 customers with highest sales.", "target": "df.sort_values(by='sales', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Release Version, Session Token, Source File Name, System ID, departments, expenses.\nQuery: Show departments in increasing order of expenses.", "target": "df.sort_values(by='expenses', ascending=True)"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Processing Time, Release Version, Run ID, Session Token, customers, profit.\nQuery: Find top 3 customers with highest profit.", "target": "df.sort_values(by='profit', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Batch Number, Environment Name, Workflow Step, expenses, products.\nQuery: Rank products by expenses.", "target": "df['expenses_rank'] = df['expenses'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Origin System, Request ID, Reviewer Comments, Validation Notes, sales, stores.\nQuery: Show stores sorted by sales ascending.", "target": "df.sort_values(by='sales', ascending=True)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Session Token, System ID, Timestamp Created, Validation Notes, customers, rating.\nQuery: List the lowest rating values grouped by customers.", "target": "df.sort_values(by='rating', ascending=True)"}
{"source": "The DataFrame contains the following columns: Error Code, Flagged Reason, Manual Override, Project Tag, Run ID, employees, expenses.\nQuery: List the lowest expenses values grouped by employees.", "target": "df.sort_values(by='expenses', ascending=True)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Project Tag, Session Token, Source File Name, expenses, stores.\nQuery: Sort stores by expenses in descending order.", "target": "df.sort_values(by='expenses', ascending=False)"}
{"source": "The DataFrame contains the following columns: Manual Override, Reviewer Comments, Run ID, Session Token, Source File Name, sales, stores.\nQuery: Find top 3 stores with highest sales.", "target": "df.sort_values(by='sales', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Error Code, Flagged Reason, Project Tag, Retry Count, Source File Name, products, sales.\nQuery: Get bottom 10 products based on sales.", "target": "df.sort_values(by='sales', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Session Token, Tracking Code, sales, stores.\nQuery: Find top 2 stores with highest sales.", "target": "df.sort_values(by='sales', ascending=False).head(2)"}
{"source": "The DataFrame contains the following columns: Environment Name, Flagged Reason, Session Token, Timestamp Created, Workflow Step, employees, units_sold.\nQuery: Sort employees by units_sold in descending order.", "target": "df.sort_values(by='units_sold', ascending=False)"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Error Code, System ID, profit, stores.\nQuery: Get bottom 10 stores based on profit.", "target": "df.sort_values(by='profit', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Batch Number, Retry Count, System ID, Workflow Step, customers, profit.\nQuery: Rank customers by profit.", "target": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Last Modified By, Project Tag, Request ID, Session Token, Source File Name, employees, profit.\nQuery: List the lowest profit values grouped by employees.", "target": "df.sort_values(by='profit', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Batch Number, Origin System, Response Time (ms), Sync Status, stores, units_sold.\nQuery: Sort stores by units_sold in descending order.", "target": "df.sort_values(by='units_sold', ascending=False)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Processing Time, Retry Count, System ID, departments, sales.\nQuery: Display departments in order of decreasing sales.", "target": "df.sort_values(by='sales', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Internal Notes, Reviewer Comments, Tracking Code, employees, profit.\nQuery: Rank employees by profit.", "target": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Internal Notes, Origin System, Project Tag, Reviewer Comments, System ID, employees, rating.\nQuery: Show employees in increasing order of rating.", "target": "df.sort_values(by='rating', ascending=True)"}
{"source": "The DataFrame contains the following columns: Internal Notes, Manual Override, Project Tag, Retry Count, Tracking Code, departments, units_sold.\nQuery: Sort departments by units_sold in descending order.", "target": "df.sort_values(by='units_sold', ascending=False)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Manual Override, Request ID, Response Time (ms), products, profit.\nQuery: Rank products by profit.", "target": "df['profit_rank'] = df['profit'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Environment Name, Response Time (ms), Source File Name, Sync Status, Workflow Step, employees, sales.\nQuery: Find top 2 employees with highest sales.", "target": "df.sort_values(by='sales', ascending=False).head(2)"}
{"source": "The DataFrame contains the following columns: Project Tag, Release Version, Response Time (ms), Run ID, Session Token, expenses, products.\nQuery: Show products in increasing order of expenses.", "target": "df.sort_values(by='expenses', ascending=True)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Batch Number, Reviewer Comments, Sync Status, customers, sales.\nQuery: Show customers sorted by sales ascending.", "target": "df.sort_values(by='sales', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Release Version, Run ID, Source File Name, departments, revenue.\nQuery: List top 5 departments by revenue.", "target": "df.sort_values(by='revenue', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Release Version, Response Time (ms), Run ID, Timestamp Created, customers, revenue.\nQuery: Get bottom 10 customers based on revenue.", "target": "df.sort_values(by='revenue', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Environment Name, Internal Notes, Sync Status, System ID, Workflow Step, customers, revenue.\nQuery: Sort customers by revenue in descending order.", "target": "df.sort_values(by='revenue', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Error Code, Response Time (ms), Retry Count, System ID, employees, revenue.\nQuery: List the lowest revenue values grouped by employees.", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Internal Notes, Manual Override, Reviewer Comments, Run ID, Timestamp Created, employees, units_sold.\nQuery: Rank employees by units_sold.", "target": "df['units_sold_rank'] = df['units_sold'].rank(ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Processing Time, Session Token, Tracking Code, departments, revenue.\nQuery: List top 5 departments by revenue.", "target": "df.sort_values(by='revenue', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Error Code, Manual Override, Timestamp Created, customers, rating.\nQuery: Get bottom 10 customers based on rating.", "target": "df.sort_values(by='rating', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Release Version, Response Time (ms), Reviewer Comments, System ID, expenses, products.\nQuery: Get bottom 10 products based on expenses.", "target": "df.sort_values(by='expenses', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Flagged Reason, Retry Count, System ID, employees, sales.\nQuery: List top 5 employees by sales.", "target": "df.sort_values(by='sales', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Document Ref, Origin System, Processing Time, Project Tag, Response Time (ms), customers, revenue.\nQuery: 10 customers with most revenue", "target": "df.sort_values(by='revenue', ascending=False).head(10)"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Manual Override, Run ID, Validation Notes, profit, stores.\nQuery: stores sorted top by profit", "target": "df.sort_values(by='profit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Last Modified By, Processing Time, System ID, Timestamp Created, products, ratings.\nQuery: show top 20 products by ratings", "target": "df.sort_values(by='ratings', ascending=True).head(20)"}
{"source": "The DataFrame contains the following columns: Document Ref, Manual Override, Run ID, System ID, Timestamp Created, profit, stores.\nQuery: list 10 stores having low to high profit", "target": "df.sort_values(by='profit', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Backup ID, Error Code, Internal Notes, Run ID, System ID, categories, orders.\nQuery: categories sorted least by orders", "target": "df.sort_values(by='orders', ascending=True)"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Last Modified By, Manual Override, Tracking Code, customers, revenue.\nQuery: get top 20 customers increasing revenue", "target": "df.sort_values(by='revenue', ascending=True).head(20)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Internal Notes, Reviewer Comments, Validation Notes, categories, orders.\nQuery: list 5 categories having decreasing orders", "target": "df.sort_values(by='orders', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Backup ID, Internal Notes, Processing Time, Response Time (ms), Reviewer Comments, customers, revenue.\nQuery: show top 20 customers by revenue", "target": "df.sort_values(by='revenue', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Internal Notes, System ID, Timestamp Created, Tracking Code, profit, stores.\nQuery: get top 10 stores bottom profit", "target": "df.sort_values(by='profit', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Request ID, Reviewer Comments, Source File Name, products, ratings.\nQuery: organize products by ratings (least)", "target": "df.sort_values(by='ratings', ascending=True)"}
{"source": "The DataFrame contains the following columns: Processing Time, Response Time (ms), Source File Name, Timestamp Created, Tracking Code, employees, sales.\nQuery: list 20 employees having increasing sales", "target": "df.sort_values(by='sales', ascending=True).head(20)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Last Modified By, Session Token, Validation Notes, categories, orders.\nQuery: sort categories by orders in bottom order", "target": "df.sort_values(by='orders', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Environment Name, Internal Notes, Request ID, profit, stores.\nQuery: arrange all stores according to most profit", "target": "df.sort_values(by='profit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Batch Number, Reviewer Comments, Tracking Code, products, ratings.\nQuery: get top 3 products greatest ratings", "target": "df.sort_values(by='ratings', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Manual Override, Processing Time, Response Time (ms), customers, revenue.\nQuery: get top 20 customers highest revenue", "target": "df.sort_values(by='revenue', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Session Token, Source File Name, Workflow Step, customers, revenue.\nQuery: customers sorted most by revenue", "target": "df.sort_values(by='revenue', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Environment Name, Retry Count, Timestamp Created, categories, orders.\nQuery: categories sorted bottom by orders", "target": "df.sort_values(by='orders', ascending=True)"}
{"source": "The DataFrame contains the following columns: Manual Override, Project Tag, Retry Count, System ID, Timestamp Created, employees, sales.\nQuery: employees sorted most by sales", "target": "df.sort_values(by='sales', ascending=False)"}
{"source": "The DataFrame contains the following columns: Backup ID, Environment Name, Manual Override, Release Version, Timestamp Created, employees, units_sold.\nQuery: employees sorted low to high by units_sold", "target": "df.sort_values(by='units_sold', ascending=True)"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Release Version, Source File Name, Workflow Step, products, ratings.\nQuery: show top 20 products by ratings", "target": "df.sort_values(by='ratings', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Flagged Reason, Processing Time, Session Token, Sync Status, employees, sales.\nQuery: 3 employees with greatest sales", "target": "df.sort_values(by='sales', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Batch Number, Flagged Reason, Release Version, Tracking Code, Workflow Step, customers, revenue.\nQuery: customers sorted bottom by revenue", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Environment Name, Manual Override, Origin System, Project Tag, Session Token, employees, sales.\nQuery: 5 employees with greatest sales", "target": "df.sort_values(by='sales', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Last Modified By, Request ID, Run ID, employees, sales.\nQuery: show top 5 employees by sales", "target": "df.sort_values(by='sales', ascending=True).head(5)"}
{"source": "The DataFrame contains the following columns: Project Tag, Response Time (ms), Retry Count, Run ID, Source File Name, products, ratings.\nQuery: organize products by ratings (bottom)", "target": "df.sort_values(by='ratings', ascending=True)"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Internal Notes, Project Tag, categories, orders.\nQuery: categories sorted ascending by orders", "target": "df.sort_values(by='orders', ascending=True)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Error Code, Response Time (ms), Retry Count, categories, orders.\nQuery: categories sorted top by orders", "target": "df.sort_values(by='orders', ascending=False)"}
{"source": "The DataFrame contains the following columns: Error Code, Response Time (ms), Retry Count, System ID, Tracking Code, employees, sales.\nQuery: show top 10 employees by sales", "target": "df.sort_values(by='sales', ascending=False).head(10)"}
{"source": "The DataFrame contains the following columns: Document Ref, Internal Notes, Request ID, Session Token, System ID, customers, revenue.\nQuery: customers sorted descending by revenue", "target": "df.sort_values(by='revenue', ascending=False)"}
{"source": "The DataFrame contains the following columns: Batch Number, Last Modified By, Release Version, Request ID, Validation Notes, customers, revenue.\nQuery: arrange all customers according to low to high revenue", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Error Code, Origin System, Source File Name, Sync Status, categories, orders.\nQuery: get top 10 categories bottom orders", "target": "df.sort_values(by='orders', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Manual Override, Response Time (ms), Run ID, Session Token, profit, stores.\nQuery: order stores based on profit (least)", "target": "df.sort_values(by='profit', ascending=True)"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Batch Number, Source File Name, Workflow Step, products, ratings.\nQuery: order products based on ratings (greatest)", "target": "df.sort_values(by='ratings', ascending=False)"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Flagged Reason, Response Time (ms), Tracking Code, employees, units_sold.\nQuery: 3 employees with least units_sold", "target": "df.sort_values(by='units_sold', ascending=True).head(3)"}
{"source": "The DataFrame contains the following columns: Last Modified By, Processing Time, Request ID, Validation Notes, Workflow Step, employees, units_sold.\nQuery: get top 5 employees decreasing units_sold", "target": "df.sort_values(by='units_sold', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Backup ID, Processing Time, Request ID, System ID, Workflow Step, profit, stores.\nQuery: organize stores by profit (bottom)", "target": "df.sort_values(by='profit', ascending=True)"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Flagged Reason, Internal Notes, Origin System, profit, stores.\nQuery: sort stores by profit in least order", "target": "df.sort_values(by='profit', ascending=True)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Last Modified By, Origin System, Retry Count, Timestamp Created, profit, stores.\nQuery: arrange all stores according to high to low profit", "target": "df.sort_values(by='profit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Processing Time, Release Version, Timestamp Created, employees, units_sold.\nQuery: organize employees by units_sold (greatest)", "target": "df.sort_values(by='units_sold', ascending=False)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Last Modified By, Request ID, Tracking Code, Workflow Step, categories, orders.\nQuery: sort categories by orders in most order", "target": "df.sort_values(by='orders', ascending=False)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Flagged Reason, Internal Notes, Run ID, Tracking Code, employees, sales.\nQuery: get top 5 employees top sales", "target": "df.sort_values(by='sales', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Origin System, Processing Time, Session Token, Timestamp Created, Workflow Step, products, ratings.\nQuery: order products based on ratings (most)", "target": "df.sort_values(by='ratings', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Flagged Reason, Internal Notes, Session Token, Tracking Code, products, ratings.\nQuery: organize products by ratings (increasing)", "target": "df.sort_values(by='ratings', ascending=True)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Error Code, Response Time (ms), Retry Count, Sync Status, categories, orders.\nQuery: order categories based on orders (descending)", "target": "df.sort_values(by='orders', ascending=False)"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Retry Count, Sync Status, System ID, employees, sales.\nQuery: list 5 employees having least sales", "target": "df.sort_values(by='sales', ascending=True).head(5)"}
{"source": "The DataFrame contains the following columns: Internal Notes, Manual Override, Origin System, Tracking Code, Workflow Step, employees, units_sold.\nQuery: arrange all employees according to decreasing units_sold", "target": "df.sort_values(by='units_sold', ascending=False)"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Document Ref, Processing Time, Request ID, employees, sales.\nQuery: get top 20 employees highest sales", "target": "df.sort_values(by='sales', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Processing Time, Project Tag, Session Token, Sync Status, Validation Notes, profit, stores.\nQuery: display 3 stores sorted by profit (ascending)", "target": "df.sort_values(by='profit', ascending=True).head(3)"}
{"source": "The DataFrame contains the following columns: Batch Number, Origin System, Release Version, Request ID, Response Time (ms), customers, revenue.\nQuery: arrange all customers according to low to high revenue", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Batch Number, Internal Notes, Project Tag, Retry Count, Sync Status, employees, sales.\nQuery: employees sorted least by sales", "target": "df.sort_values(by='sales', ascending=True)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Processing Time, Response Time (ms), Source File Name, Timestamp Created, customers, revenue.\nQuery: 10 customrs with most Revenue", "target": "df.sort_values(by='revenue', ascending=False).head(10)"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Manual Override, Project Tag, System ID, profit, stores.\nQuery: STORES sorted top by Profitt", "target": "df.sort_values(by='profit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Batch Number, Error Code, Reviewer Comments, Source File Name, Timestamp Created, products, ratings.\nQuery: show top 20 PRODUCTS by RATINGS", "target": "df.sort_values(by='ratings', ascending=True).head(20)"}
{"source": "The DataFrame contains the following columns: Batch Number, Last Modified By, Processing Time, Source File Name, Sync Status, profit, stores.\nQuery: list 10 Storez having low to high PROFIT", "target": "df.sort_values(by='profit', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Batch Number, Manual Override, Request ID, Tracking Code, Validation Notes, categories, orders.\nQuery: categores sorted least by ORDERS", "target": "df.sort_values(by='orders', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Audit Trail, Manual Override, Project Tag, customers, revenue.\nQuery: get top 20 customrs increasing REVENUE", "target": "df.sort_values(by='revenue', ascending=True).head(20)"}
{"source": "The DataFrame contains the following columns: Document Ref, Last Modified By, Request ID, Tracking Code, Validation Notes, categories, orders.\nQuery: list 5 categores having decreasing odders", "target": "df.sort_values(by='orders', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Flagged Reason, Origin System, Release Version, customers, revenue.\nQuery: show top 20 customrs by REVENUE", "target": "df.sort_values(by='revenue', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Error Code, Project Tag, Response Time (ms), Reviewer Comments, profit, stores.\nQuery: get top 10 Storez bottom proffit", "target": "df.sort_values(by='profit', ascending=True).head(10)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Last Modified By, System ID, Tracking Code, products, ratings.\nQuery: organize productz by raatings (least)", "target": "df.sort_values(by='ratings', ascending=True)"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Environment Name, Response Time (ms), employees, sales.\nQuery: list 20 empoyees having increasing sails", "target": "df.sort_values(by='sales', ascending=True).head(20)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Flagged Reason, Internal Notes, Run ID, categories, orders.\nQuery: sort CategorieS by Orderz in bottom order", "target": "df.sort_values(by='orders', ascending=True)"}
{"source": "The DataFrame contains the following columns: Batch Number, Environment Name, Origin System, Session Token, Timestamp Created, profit, stores.\nQuery: arrange all stoers according to most PROFIT", "target": "df.sort_values(by='profit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Error Code, Processing Time, Source File Name, System ID, products, ratings.\nQuery: get top 3 PRODUCTS greatest RATINGS", "target": "df.sort_values(by='ratings', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Origin System, Project Tag, Release Version, Session Token, Workflow Step, customers, revenue.\nQuery: get top 20 custmers highest Revenue", "target": "df.sort_values(by='revenue', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Manual Override, Origin System, Retry Count, Run ID, Sync Status, customers, revenue.\nQuery: CustomerS sorted most by reveneu", "target": "df.sort_values(by='revenue', ascending=False)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Error Code, Manual Override, Release Version, Workflow Step, categories, orders.\nQuery: CategorieS sorted bottom by ORDERS", "target": "df.sort_values(by='orders', ascending=True)"}
{"source": "The DataFrame contains the following columns: Request ID, Run ID, Timestamp Created, Validation Notes, Workflow Step, employees, sales.\nQuery: empoyees sorted most by Sells", "target": "df.sort_values(by='sales', ascending=False)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Project Tag, Request ID, Validation Notes, employees, units_sold.\nQuery: EMPLoyees sorted low to high by unit_sold", "target": "df.sort_values(by='units_sold', ascending=True)"}
{"source": "The DataFrame contains the following columns: Last Modified By, Processing Time, Release Version, Request ID, Session Token, products, ratings.\nQuery: show top 20 PRODUCTS by ratingz", "target": "df.sort_values(by='ratings', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Batch Number, Document Ref, Retry Count, Run ID, Session Token, employees, sales.\nQuery: 3 empoyees with greatest sails", "target": "df.sort_values(by='sales', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Flagged Reason, Session Token, Source File Name, customers, revenue.\nQuery: customrs sorted bottom by Revenue", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Project Tag, Request ID, Session Token, employees, sales.\nQuery: 5 empoyees with greatest SALES", "target": "df.sort_values(by='sales', ascending=False).head(5)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Internal Notes, Manual Override, Release Version, Reviewer Comments, employees, sales.\nQuery: show top 5 EMPLoyees by SALES", "target": "df.sort_values(by='sales', ascending=True).head(5)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Flagged Reason, Last Modified By, Reviewer Comments, products, ratings.\nQuery: organize PRODUCTS by RATINGS (bottom)", "target": "df.sort_values(by='ratings', ascending=True)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Request ID, Retry Count, Run ID, Source File Name, categories, orders.\nQuery: categores sorted ascending by odders", "target": "df.sort_values(by='orders', ascending=True)"}
{"source": "The DataFrame contains the following columns: Error Code, Internal Notes, Manual Override, Reviewer Comments, Validation Notes, categories, orders.\nQuery: categoriess sorted top by ORDERS", "target": "df.sort_values(by='orders', ascending=False)"}
{"source": "The DataFrame contains the following columns: Environment Name, Manual Override, Request ID, Retry Count, Sync Status, employees, sales.\nQuery: show top 10 empoyees by Sells", "target": "df.sort_values(by='sales', ascending=False).head(10)"}
{"source": "The DataFrame contains the following columns: Origin System, Release Version, Reviewer Comments, Run ID, Validation Notes, customers, revenue.\nQuery: CustomerS sorted descending by REVENUE", "target": "df.sort_values(by='revenue', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Audit Trail, Error Code, Project Tag, customers, revenue.\nQuery: arrange all custmers according to low to high reveneu", "target": "df.sort_values(by='revenue', ascending=True)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Run ID, Source File Name, Sync Status, categories, orders.\nQuery: show top eight categories by orders", "target": "df.sort_values(by='orders', ascending=True).head(8)"}
{"source": "The DataFrame contains the following columns: Document Ref, Origin System, Reviewer Comments, Session Token, Tracking Code, profit, stores.\nQuery: list two stores having most profit", "target": "df.sort_values(by='profit', ascending=False).head(2)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Error Code, Request ID, Run ID, employees, units_sold.\nQuery: show top two employees by units_sold", "target": "df.sort_values(by='units_sold', ascending=True).head(2)"}
{"source": "The DataFrame contains the following columns: Backup ID, Flagged Reason, Internal Notes, Origin System, Project Tag, employees, units_sold.\nQuery: three employees with bottom units_sold", "target": "df.sort_values(by='units_sold', ascending=True).head(3)"}
{"source": "The DataFrame contains the following columns: Batch Number, Document Ref, Last Modified By, Response Time (ms), System ID, employees, units_sold.\nQuery: list three employees having greatest units_sold", "target": "df.sort_values(by='units_sold', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Environment Name, Error Code, Release Version, Response Time (ms), employees, units_sold.\nQuery: display five employees sorted by units_sold (increasing)", "target": "df.sort_values(by='units_sold', ascending=True).head(5)"}
{"source": "The DataFrame contains the following columns: Approval Status, Environment Name, Last Modified By, Response Time (ms), Timestamp Created, employees, units_sold.\nQuery: display fifty employees sorted by units_sold (increasing)", "target": "df.sort_values(by='units_sold', ascending=True).head(50)"}
{"source": "The DataFrame contains the following columns: Approval Status, Origin System, Response Time (ms), Timestamp Created, Validation Notes, employees, units_sold.\nQuery: eight employees with smallest units_sold", "target": "df.sort_values(by='units_sold', ascending=True).head(8)"}
{"source": "The DataFrame contains the following columns: Backup ID, Environment Name, Session Token, Sync Status, System ID, employees, sales.\nQuery: list four employees having least sales", "target": "df.sort_values(by='sales', ascending=True).head(4)"}
{"source": "The DataFrame contains the following columns: Backup ID, Error Code, Origin System, Release Version, Source File Name, categories, orders.\nQuery: display nine categories sorted by orders (increasing)", "target": "df.sort_values(by='orders', ascending=True).head(9)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Release Version, Request ID, Run ID, products, ratings.\nQuery: display twenty products sorted by ratings (decreasing)", "target": "df.sort_values(by='ratings', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Batch Number, Manual Override, Origin System, Release Version, Session Token, employees, sales.\nQuery: display six employees sorted by sales (bottom)", "target": "df.sort_values(by='sales', ascending=True).head(6)"}
{"source": "The DataFrame contains the following columns: Processing Time, Project Tag, Release Version, Request ID, Tracking Code, employees, units_sold.\nQuery: display thirty employees sorted by units_sold (increasing)", "target": "df.sort_values(by='units_sold', ascending=True).head(30)"}
{"source": "The DataFrame contains the following columns: Backup ID, Internal Notes, Origin System, Processing Time, Workflow Step, products, ratings.\nQuery: five products with low to high ratings", "target": "df.sort_values(by='ratings', ascending=True).head(5)"}
{"source": "The DataFrame contains the following columns: Document Ref, Manual Override, Release Version, Reviewer Comments, System ID, categories, orders.\nQuery: get top seven categories most orders", "target": "df.sort_values(by='orders', ascending=False).head(7)"}
{"source": "The DataFrame contains the following columns: Environment Name, Retry Count, Session Token, System ID, Tracking Code, employees, units_sold.\nQuery: show top twenty employees by units_sold", "target": "df.sort_values(by='units_sold', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Origin System, Processing Time, Sync Status, Tracking Code, Validation Notes, employees, units_sold.\nQuery: display fifty employees sorted by units_sold (bottom)", "target": "df.sort_values(by='units_sold', ascending=True).head(50)"}
{"source": "The DataFrame contains the following columns: Batch Number, Flagged Reason, Manual Override, Request ID, Workflow Step, employees, sales.\nQuery: list seven employees having ascending sales", "target": "df.sort_values(by='sales', ascending=True).head(7)"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Response Time (ms), Session Token, Workflow Step, products, ratings.\nQuery: get top four products least ratings", "target": "df.sort_values(by='ratings', ascending=True).head(4)"}
{"source": "The DataFrame contains the following columns: Environment Name, Request ID, Run ID, Source File Name, Sync Status, profit, stores.\nQuery: show top six stores by profit", "target": "df.sort_values(by='profit', ascending=False).head(6)"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Posting Updated, Processing Time, Sync Status, Validation Notes, jobs.\nQuery: display six entries sorted by Posting Updated (highest)", "target": "df.sort_values(by='Posting Updated', ascending=False).head(6)"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Last Modified By, Project Tag, Title Classification, Workflow Step, jobs.\nQuery: sort jobs by Title Classification in low to high order", "target": "df.sort_values(by='Title Classification', ascending=True)"}
{"source": "The DataFrame contains the following columns: Document Ref, Internal Notes, Processing Time, Project Tag, Request ID, Title Classification, jobs.\nQuery: list three jobs with highest Title Classification", "target": "df.sort_values(by='Title Classification', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Division/Work Unit, Project Tag, Request ID, Response Time (ms), Source File Name, Validation Notes, jobs.\nQuery: arrange job entries according to highest Division/Work Unit", "target": "df.sort_values(by='Division/Work Unit', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Full-Time/Part-Time indicator, Internal Notes, Origin System, Sync Status, Workflow Step, jobs.\nQuery: arrange job entries according to decreasing Full-Time/Part-Time indicator", "target": "df.sort_values(by='Full-Time/Part-Time indicator', ascending=False)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Residency Requirement, Sync Status, Tracking Code, Workflow Step, jobs.\nQuery: display nine entries sorted by Residency Requirement (highest)", "target": "df.sort_values(by='Residency Requirement', ascending=False).head(9)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Posting Date, Source File Name, Sync Status, System ID, Workflow Step, jobs.\nQuery: display five entries sorted by Posting Date (low to high)", "target": "df.sort_values(by='Posting Date', ascending=True).head(5)"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Internal Notes, Manual Override, Post Until, Retry Count, jobs.\nQuery: organize postings by Post Until descending", "target": "df.sort_values(by='Post Until', ascending=False)"}
{"source": "The DataFrame contains the following columns: Approval Status, Internal Notes, Manual Override, Post Until, Project Tag, Response Time (ms), jobs.\nQuery: sort jobs by Post Until in top order", "target": "df.sort_values(by='Post Until', ascending=False)"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Salary Range To, Session Token, Tracking Code, Validation Notes, Workflow Step, jobs.\nQuery: organize postings by Salary Range To increasing", "target": "df.sort_values(by='Salary Range To', ascending=True)"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Division/Work Unit, Run ID, Source File Name, Timestamp Created, jobs.\nQuery: display two entries sorted by Division/Work Unit (least)", "target": "df.sort_values(by='Division/Work Unit', ascending=True).head(2)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Manual Override, Posting Date, Source File Name, Tracking Code, Validation Notes, jobs.\nQuery: display eight entries sorted by Posting Date (smallest)", "target": "df.sort_values(by='Posting Date', ascending=True).head(8)"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Internal Notes, Processing Time, Project Tag, Salary Range From, jobs.\nQuery: list seven jobs with bottom Salary Range From", "target": "df.sort_values(by='Salary Range From', ascending=True).head(7)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Batch Number, Posting Updated, Release Version, Tracking Code, jobs.\nQuery: display seven entries sorted by Posting Updated (descending)", "target": "df.sort_values(by='Posting Updated', ascending=False).head(7)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Flagged Reason, Internal Notes, Preferred Skills, Processing Time, Retry Count, jobs.\nQuery: thirty job postings with top Preferred Skills", "target": "df.sort_values(by='Preferred Skills', ascending=False).head(30)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Release Version, Salary Range From, Source File Name, Sync Status, jobs.\nQuery: four job postings with increasing Salary Range From", "target": "df.sort_values(by='Salary Range From', ascending=True).head(4)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Flagged Reason, Manual Override, Recruitment Contact, Request ID, Source File Name, jobs.\nQuery: organize postings by Recruitment Contact least", "target": "df.sort_values(by='Recruitment Contact', ascending=True)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Internal Notes, Processing Time, Session Token, Work Location 1, Workflow Step, jobs.\nQuery: list four jobs with high to low Work Location 1", "target": "df.sort_values(by='Work Location 1', ascending=False).head(4)"}
{"source": "The DataFrame contains the following columns: Manual Override, Project Tag, Release Version, Request ID, Salary Range From, Source File Name, jobs.\nQuery: sort jobs by Salary Range From in highest order", "target": "df.sort_values(by='Salary Range From', ascending=False)"}
{"source": "The DataFrame contains the following columns: Error Code, Internal Notes, Minimum Qual Requirements, Response Time (ms), System ID, Workflow Step, jobs.\nQuery: list two jobs with most Minimum Qual Requirements", "target": "df.sort_values(by='Minimum Qual Requirements', ascending=False).head(2)"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Internal Notes, Job Category, Request ID, Run ID, jobs.\nQuery: nine job postings with increasing Job Category", "target": "df.sort_values(by='Job Category', ascending=True).head(9)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Error Code, Response Time (ms), Session Token, Source File Name, To Apply, jobs.\nQuery: sort jobs by To Apply in bottom order", "target": "df.sort_values(by='To Apply', ascending=True)"}
{"source": "The DataFrame contains the following columns: Origin System, Project Tag, Recruitment Contact, Response Time (ms), System ID, Timestamp Created, jobs.\nQuery: forty job postings with ascending Recruitment Contact", "target": "df.sort_values(by='Recruitment Contact', ascending=True).head(40)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Environment Name, Processing Time, Reviewer Comments, Title Classification, jobs.\nQuery: display seven entries sorted by Title Classification (greatest)", "target": "df.sort_values(by='Title Classification', ascending=False).head(7)"}
{"source": "The DataFrame contains the following columns: Last Modified By, Manual Override, Source File Name, Sync Status, Timestamp Created, Title Code No, jobs.\nQuery: organize postings by Title Code No most", "target": "df.sort_values(by='Title Code No', ascending=False)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Civil Service Title, Processing Time, Response Time (ms), Timestamp Created, Tracking Code, jobs.\nQuery: show top two jobs by Civil Service Title", "target": "df.sort_values(by='Civil Service Title', ascending=False).head(2)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Posting Date, Project Tag, Retry Count, Reviewer Comments, System ID, jobs.\nQuery: organize postings by Posting Date descending", "target": "df.sort_values(by='Posting Date', ascending=False)"}
{"source": "The DataFrame contains the following columns: Batch Number, Full-Time/Part-Time indicator, Response Time (ms), Retry Count, Session Token, Timestamp Created, jobs.\nQuery: list ten jobs with top Full-Time/Part-Time indicator", "target": "df.sort_values(by='Full-Time/Part-Time indicator', ascending=False).head(10)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Document Ref, Residency Requirement, Timestamp Created, Workflow Step, jobs.\nQuery: display four entries sorted by Residency Requirement (descending)", "target": "df.sort_values(by='Residency Requirement', ascending=False).head(4)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Preferred Skills, Request ID, Response Time (ms), Reviewer Comments, System ID, jobs.\nQuery: show top six jobs by Preferred Skills", "target": "df.sort_values(by='Preferred Skills', ascending=True).head(6)"}
{"source": "The DataFrame contains the following columns: Release Version, Sync Status, System ID, Timestamp Created, Tracking Code, Work Location 1, jobs.\nQuery: display six entries sorted by Work Location 1 (most)", "target": "df.sort_values(by='Work Location 1', ascending=False).head(6)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Batch Number, Processing Time, Salary Frequency, Tracking Code, jobs.\nQuery: order jobs based on Salary Frequency (ascending)", "target": "df.sort_values(by='Salary Frequency', ascending=True)"}
{"source": "The DataFrame contains the following columns: Error Code, Full-Time/Part-Time indicator, Project Tag, Reviewer Comments, Source File Name, Validation Notes, jobs.\nQuery: show top three jobs by Full-Time/Part-Time indicator", "target": "df.sort_values(by='Full-Time/Part-Time indicator', ascending=False).head(3)"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Error Code, Release Version, Work Location 1, Workflow Step, jobs.\nQuery: twenty job postings with ascending Work Location 1", "target": "df.sort_values(by='Work Location 1', ascending=True).head(20)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Manual Override, Run ID, Salary Frequency, Workflow Step, jobs.\nQuery: sort jobs by Salary Frequency in increasing order", "target": "df.sort_values(by='Salary Frequency', ascending=True)"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Processing Time, Response Time (ms), Salary Frequency, Workflow Step, jobs.\nQuery: show top forty jobs by Salary Frequency", "target": "df.sort_values(by='Salary Frequency', ascending=False).head(40)"}
{"source": "The DataFrame contains the following columns: Internal Notes, Last Modified By, Manual Override, Salary Range To, Session Token, Workflow Step, jobs.\nQuery: order jobs based on Salary Range To (least)", "target": "df.sort_values(by='Salary Range To', ascending=True)"}
{"source": "The DataFrame contains the following columns: Document Ref, Job Category, Source File Name, Sync Status, Tracking Code, Validation Notes, jobs.\nQuery: arrange job entries according to descending Job Category", "target": "df.sort_values(by='Job Category', ascending=False)"}
{"source": "The DataFrame contains the following columns: Project Tag, Request ID, Run ID, Salary Range To, Sync Status, Validation Notes, jobs.\nQuery: sort jobs by Salary Range To in least order", "target": "df.sort_values(by='Salary Range To', ascending=True)"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Error Code, Job Description, Manual Override, Sync Status, jobs.\nQuery: show top twenty jobs by Job Description", "target": "df.sort_values(by='Job Description', ascending=False).head(20)"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Retry Count, Source File Name, Workflow Step, email.\nQuery: Get rows where email field has the substring 'Manager'.", "target": "df[df['email'].str.contains('Manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Error Code, Flagged Reason, Last Modified By, city.\nQuery: Find all values in city that end with 'com'.", "target": "df[df['city'].str.endswith('com', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Internal Notes, Request ID, Reviewer Comments, product_name.\nQuery: List all records where product_name includes 'tech'.", "target": "df[df['product_name'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Manual Override, Project Tag, Timestamp Created, customer_name.\nQuery: Get rows where customer_name field has the substring 'Service'.", "target": "df[df['customer_name'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Response Time (ms), Retry Count, Reviewer Comments, Tracking Code, Validation Notes, category.\nQuery: Find all values in category that end with 'Manager'.", "target": "df[df['category'].str.endswith('Manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Last Modified By, Request ID, Sync Status, product_name.\nQuery: Filter rows where product_name contains 'Service' substring.", "target": "df[df['product_name'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Last Modified By, Origin System, Session Token, Workflow Step, customer_name.\nQuery: Filter rows where customer_name contains 'Service' substring.", "target": "df[df['customer_name'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Error Code, Last Modified By, Sync Status, city.\nQuery: List all records where city includes 'tech'.", "target": "df[df['city'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Last Modified By, Origin System, Request ID, Validation Notes, city.\nQuery: Filter rows where city contains 'Store' substring.", "target": "df[df['city'].str.contains('Store', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Internal Notes, Release Version, Request ID, Timestamp Created, category.\nQuery: Find category values that contain 'Pro' case-insensitively.", "target": "df[df['category'].str.contains('Pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Internal Notes, Project Tag, Session Token, Source File Name, customer_name.\nQuery: List records where customer_name begins with 'Inc'.", "target": "df[df['customer_name'].str.startswith('Inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Manual Override, Validation Notes, Workflow Step, department.\nQuery: List all records where department includes 'Manager'.", "target": "df[df['department'].str.contains('Manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Last Modified By, Release Version, Reviewer Comments, Source File Name, Sync Status, category.\nQuery: Get rows where category field has the substring 'sales'.", "target": "df[df['category'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Processing Time, Session Token, Source File Name, System ID, department.\nQuery: Get rows where department field has the substring 'Service'.", "target": "df[df['department'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Internal Notes, Run ID, Session Token, Timestamp Created, product_name.\nQuery: Get rows where product_name field has the substring 'Inc'.", "target": "df[df['product_name'].str.contains('Inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Session Token, Source File Name, Timestamp Created, Validation Notes, customer_name.\nQuery: Find customer_name values that contain 'Manager' case-insensitively.", "target": "df[df['customer_name'].str.contains('Manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Error Code, Flagged Reason, Reviewer Comments, Run ID, city.\nQuery: List all records where city includes 'Store'.", "target": "df[df['city'].str.contains('Store', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Processing Time, Project Tag, Sync Status, Workflow Step, email.\nQuery: Filter rows where email contains 'North' substring.", "target": "df[df['email'].str.contains('North', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Response Time (ms), Retry Count, Tracking Code, Validation Notes, city.\nQuery: List records where city begins with 'Manager'.", "target": "df[df['city'].str.startswith('Manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Batch Number, Error Code, Source File Name, city.\nQuery: List records where city begins with 'com'.", "target": "df[df['city'].str.startswith('com', na=False)]"}
{"source": "The DataFrame contains the following columns: Project Tag, Sync Status, Timestamp Created, Tracking Code, Workflow Step, city.\nQuery: Get rows where city field has the substring 'tech'.", "target": "df[df['city'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Origin System, Source File Name, System ID, Timestamp Created, customer_name.\nQuery: Find customer_name values that contain 'Inc' case-insensitively.", "target": "df[df['customer_name'].str.contains('Inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Error Code, Response Time (ms), Session Token, city.\nQuery: List all records where city includes 'Inc'.", "target": "df[df['city'].str.contains('Inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Document Ref, Release Version, Source File Name, department.\nQuery: List records where department begins with 'New'.", "target": "df[df['department'].str.startswith('New', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Flagged Reason, Last Modified By, Retry Count, System ID, customer_name.\nQuery: List all records where customer_name includes 'Service'.", "target": "df[df['customer_name'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Project Tag, Retry Count, Reviewer Comments, Session Token, System ID, department.\nQuery: Find department values that contain 'Store' case-insensitively.", "target": "df[df['department'].str.contains('Store', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Last Modified By, Manual Override, System ID, Workflow Step, category.\nQuery: List records where category begins with 'tech'.", "target": "df[df['category'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Origin System, Reviewer Comments, Run ID, System ID, customer_name.\nQuery: Get rows where customer_name starts with 'tech'.", "target": "df[df['customer_name'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Project Tag, Response Time (ms), Source File Name, Validation Notes, city.\nQuery: List all records where city includes 'New'.", "target": "df[df['city'].str.contains('New', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Project Tag, Response Time (ms), Sync Status, Tracking Code, product_name.\nQuery: Find product_name values that contain 'North' case-insensitively.", "target": "df[df['product_name'].str.contains('North', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Error Code, Manual Override, Session Token, Sync Status, city.\nQuery: Show entries where city ends with 'Pro'.", "target": "df[df['city'].str.endswith('Pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Flagged Reason, Processing Time, Session Token, category.\nQuery: Find all category that contain the word 'tech'.", "target": "df[df['category'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Flagged Reason, Last Modified By, Response Time (ms), Validation Notes, department.\nQuery: Show entries where department ends with 'Service'.", "target": "df[df['department'].str.endswith('Service', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Origin System, Reviewer Comments, Timestamp Created, product_name.\nQuery: Get rows where product_name starts with 'Store'.", "target": "df[df['product_name'].str.startswith('Store', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Manual Override, Retry Count, System ID, email.\nQuery: Find email values that contain 'Service' case-insensitively.", "target": "df[df['email'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Manual Override, Response Time (ms), Reviewer Comments, Sync Status, Tracking Code, city.\nQuery: Get rows where city field has the substring 'New'.", "target": "df[df['city'].str.contains('New', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Manual Override, Processing Time, System ID, Workflow Step, city.\nQuery: Find all city that contain the word 'Service'.", "target": "df[df['city'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Manual Override, Processing Time, Reviewer Comments, Source File Name, product_name.\nQuery: Get rows where product_name starts with 'Manager'.", "target": "df[df['product_name'].str.startswith('Manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Last Modified By, Origin System, Request ID, Workflow Step, product_name.\nQuery: Get rows where product_name field has the substring 'Store'.", "target": "df[df['product_name'].str.contains('Store', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Manual Override, Origin System, Project Tag, Sync Status, customer_name.\nQuery: Find all customer_name that contain the word 'New'.", "target": "df[df['customer_name'].str.contains('New', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Archived Flag, Reviewer Comments, Session Token, city.\nQuery: Find all values in city that end with 'Inc'.", "target": "df[df['city'].str.endswith('Inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Project Tag, Source File Name, System ID, product_name.\nQuery: List all records where product_name includes 'North'.", "target": "df[df['product_name'].str.contains('North', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Internal Notes, Origin System, Sync Status, Validation Notes, category.\nQuery: Find all entries with category matching 'Store' exactly.", "target": "df[df['category'] == 'Store']"}
{"source": "The DataFrame contains the following columns: Batch Number, Error Code, Reviewer Comments, Tracking Code, Workflow Step, customer_name.\nQuery: Find all values in customer_name that end with 'North'.", "target": "df[df['customer_name'].str.endswith('North', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Origin System, Release Version, Workflow Step, email.\nQuery: Find all entries with email matching 'Service' exactly.", "target": "df[df['email'] == 'Service']"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Environment Name, Release Version, Retry Count, category.\nQuery: Find category values that contain 'Manager' case-insensitively.", "target": "df[df['category'].str.contains('Manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Error Code, Origin System, Run ID, Timestamp Created, category.\nQuery: Find category values that contain 'Store' case-insensitively.", "target": "df[df['category'].str.contains('Store', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Environment Name, Retry Count, Run ID, category.\nQuery: Find all category that contain the word 'Inc'.", "target": "df[df['category'].str.contains('Inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Origin System, Request ID, Retry Count, Validation Notes, department.\nQuery: List all records where department includes 'sales'.", "target": "df[df['department'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Flagged Reason, Reviewer Comments, Source File Name, department.\nQuery: Find department values that contain 'Inc' case-insensitively.", "target": "df[df['department'].str.contains('Inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Flagged Reason, Project Tag, Response Time (ms), Retry Count, customer_name.\nQuery: Show entries where customer_name ends with 'New'.", "target": "df[df['customer_name'].str.endswith('New', na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Project Tag, Request ID, Retry Count, System ID, product_name.\nQuery: List records where product_name begins with 'New'.", "target": "df[df['product_name'].str.startswith('New', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Environment Name, Flagged Reason, Sync Status, Timestamp Created, email.\nQuery: Find all email that contain the word 'Service'.", "target": "df[df['email'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Error Code, Sync Status, System ID, email.\nQuery: Find all values in email that end with 'tech'.", "target": "df[df['email'].str.endswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Manual Override, Response Time (ms), Retry Count, Source File Name, customer_name.\nQuery: Find all customer_name that contain the word 'tech'.", "target": "df[df['customer_name'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Manual Override, Source File Name, Workflow Step, department.\nQuery: Find department values that contain 'Service' case-insensitively.", "target": "df[df['department'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Error Code, Processing Time, Workflow Step, department.\nQuery: Get rows where department starts with 'sales'.", "target": "df[df['department'].str.startswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Manual Override, Processing Time, Retry Count, Run ID, department.\nQuery: Find department values that contain 'Store' case-insensitively.", "target": "df[df['department'].str.contains('Store', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Manual Override, Request ID, Reviewer Comments, email.\nQuery: List all records where email includes 'Inc'.", "target": "df[df['email'].str.contains('Inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Environment Name, Response Time (ms), Timestamp Created, customer_name.\nQuery: List records where customer_name begins with 'New'.", "target": "df[df['customer_name'].str.startswith('New', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Release Version, Request ID, Source File Name, customer_name.\nQuery: Find customer_name values that contain 'Inc' case-insensitively.", "target": "df[df['customer_name'].str.contains('Inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Processing Time, Release Version, Reviewer Comments, Sync Status, Workflow Step, customer_name.\nQuery: Find all customer_name that contain the word 'tech'.", "target": "df[df['customer_name'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Batch Number, Flagged Reason, Retry Count, Run ID, department.\nQuery: Find all values in department that end with 'Store'.", "target": "df[df['department'].str.endswith('Store', na=False)]"}
{"source": "The DataFrame contains the following columns: Request ID, Response Time (ms), Source File Name, Tracking Code, Workflow Step, email.\nQuery: Find email values that contain 'Inc' case-insensitively.", "target": "df[df['email'].str.contains('Inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Project Tag, Response Time (ms), Timestamp Created, Validation Notes, Workflow Step, department.\nQuery: Get rows where department field has the substring 'tech'.", "target": "df[df['department'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Response Time (ms), Source File Name, Validation Notes, city.\nQuery: Find all entries with city matching 'North' exactly.", "target": "df[df['city'] == 'North']"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Document Ref, Error Code, Flagged Reason, email.\nQuery: List records where email begins with 'Service'.", "target": "df[df['email'].str.startswith('Service', na=False)]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Manual Override, Project Tag, Response Time (ms), Workflow Step, category.\nQuery: Get rows where category starts with 'Pro'.", "target": "df[df['category'].str.startswith('Pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Internal Notes, Last Modified By, Session Token, department.\nQuery: Find all entries with department matching 'com' exactly.", "target": "df[df['department'] == 'com']"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Batch Number, Last Modified By, Release Version, Tracking Code, city.\nQuery: Find all values in city that end with 'Pro'.", "target": "df[df['city'].str.endswith('Pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Last Modified By, Request ID, Run ID, customer_name.\nQuery: Get rows where customer_name starts with 'Store'.", "target": "df[df['customer_name'].str.startswith('Store', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Error Code, Flagged Reason, Validation Notes, product_name.\nQuery: Find all values in product_name that end with 'tech'.", "target": "df[df['product_name'].str.endswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Release Version, Sync Status, System ID, product_name.\nQuery: Find all values in product_name that end with 'New'.", "target": "df[df['product_name'].str.endswith('New', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Manual Override, Reviewer Comments, System ID, Tracking Code, category.\nQuery: Get rows where category field has the substring 'Service'.", "target": "df[df['category'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Last Modified By, Request ID, Validation Notes, Workflow Step, customer_name.\nQuery: Find customer_name values that contain 'Store' case-insensitively.", "target": "df[df['customer_name'].str.contains('Store', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Internal Notes, Last Modified By, Processing Time, Timestamp Created, department.\nQuery: Find all entries with department matching 'Service' exactly.", "target": "df[df['department'] == 'Service']"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Document Ref, Environment Name, Processing Time, email.\nQuery: Get rows where email starts with 'com'.", "target": "df[df['email'].str.startswith('com', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Error Code, Flagged Reason, Session Token, Timestamp Created, city.\nQuery: Find all entries with city matching 'com' exactly.", "target": "df[df['city'] == 'com']"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Backup ID, Error Code, Processing Time, customer_name.\nQuery: Get rows where customer_name starts with 'com'.", "target": "df[df['customer_name'].str.startswith('com', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Last Modified By, Release Version, Run ID, department.\nQuery: Find all entries with department matching 'Service' exactly.", "target": "df[df['department'] == 'Service']"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Response Time (ms), Run ID, System ID, department.\nQuery: Find department values that contain 'Manager' case-insensitively.", "target": "df[df['department'].str.contains('Manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Manual Override, Origin System, Release Version, Request ID, product_name.\nQuery: List records where product_name begins with 'Service'.", "target": "df[df['product_name'].str.startswith('Service', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Flagged Reason, Manual Override, Timestamp Created, city.\nQuery: Get rows where city starts with 'tech'.", "target": "df[df['city'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Source File Name, Sync Status, System ID, Workflow Step, product_name.\nQuery: Filter rows where product_name contains 'Manager' substring.", "target": "df[df['product_name'].str.contains('Manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Manual Override, Response Time (ms), Session Token, Validation Notes, product_name.\nQuery: List records where product_name begins with 'North'.", "target": "df[df['product_name'].str.startswith('North', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Environment Name, Manual Override, Response Time (ms), Tracking Code, email.\nQuery: Get rows where email field has the substring 'Pro'.", "target": "df[df['email'].str.contains('Pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Manual Override, Project Tag, Session Token, Validation Notes, category.\nQuery: List all records where category includes 'com'.", "target": "df[df['category'].str.contains('com', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Reviewer Comments, Run ID, Source File Name, email.\nQuery: Find all values in email that end with 'Service'.", "target": "df[df['email'].str.endswith('Service', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Backup ID, Flagged Reason, Source File Name, customer_name.\nQuery: Find all customer_name that contain the word 'tech'.", "target": "df[df['customer_name'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Last Modified By, Processing Time, Session Token, Sync Status, customer_name.\nQuery: List records where customer_name begins with 'tech'.", "target": "df[df['customer_name'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Flagged Reason, Manual Override, Processing Time, Validation Notes, department.\nQuery: Get rows where department field has the substring 'Service'.", "target": "df[df['department'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Last Modified By, Release Version, Response Time (ms), Run ID, product_name.\nQuery: Get rows where product_name starts with 'Store'.", "target": "df[df['product_name'].str.startswith('Store', na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Run ID, Session Token, Sync Status, Tracking Code, department.\nQuery: List all records where department includes 'New'.", "target": "df[df['department'].str.contains('New', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Last Modified By, Origin System, Project Tag, Session Token, category.\nQuery: Find category values that contain 'Pro' case-insensitively.", "target": "df[df['category'].str.contains('Pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Release Version, Validation Notes, email.\nQuery: List records where email begins with 'Inc'.", "target": "df[df['email'].str.startswith('Inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Error Code, Run ID, Session Token, Validation Notes, product_name.\nQuery: List all records where product_name includes 'Service'.", "target": "df[df['product_name'].str.contains('Service', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Document Ref, Internal Notes, Processing Time, Retry Count, department.\nQuery: Get rows where department starts with 'New'.", "target": "df[df['department'].str.startswith('New', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Internal Notes, Retry Count, Reviewer Comments, System ID, department.\nQuery: Get rows where department field has the substring 'tech'.", "target": "df[df['department'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Last Modified By, Manual Override, Processing Time, Retry Count, Workflow Step, department.\nQuery: List records where department begins with 'tech'.", "target": "df[df['department'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Manual Override, Origin System, System ID, Tracking Code, email.\nQuery: Find all entries with email matching 'Service' exactly.", "target": "df[df['email'] == 'Service']"}
{"source": "The DataFrame contains the following columns: Approval Status, Project Tag, Release Version, Request ID, Run ID, company_name.\nQuery: find company_name ending in Sales", "target": "df[df['company_name'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Environment Name, Flagged Reason, Manual Override, Workflow Step, email.\nQuery: find email ending in salez", "target": "df[df['email'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Flagged Reason, Origin System, Request ID, Tracking Code, department.\nQuery: department has 'managr' in it", "target": "df[df['department'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Run ID, Timestamp Created, Validation Notes, Workflow Step, product_name.\nQuery: product_name has word salez", "target": "df[df['product_name'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Environment Name, Manual Override, Release Version, city.\nQuery: city has 'Manager' in it", "target": "df[df['city'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Release Version, Run ID, Sync Status, product_name.\nQuery: get records with product_name beginning as Tech", "target": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Manual Override, Origin System, Timestamp Created, product_name.\nQuery: get values with product_name trailing with dotcom", "target": "df[df['product_name'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Internal Notes, Last Modified By, Request ID, email.\nQuery: find rows where email includes 'Manager'", "target": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Batch Number, Environment Name, Internal Notes, Last Modified By, email.\nQuery: email has word mngr", "target": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Flagged Reason, Last Modified By, Release Version, Retry Count, job_title.\nQuery: get records with job_title beginning as mngr", "target": "df[df['job_title'].str.startswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Manual Override, Origin System, Release Version, Request ID, Timestamp Created, city.\nQuery: show rows where city starts with dotcom", "target": "df[df['city'].str.startswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Last Modified By, Reviewer Comments, Run ID, Tracking Code, product_name.\nQuery: product_name field holds value support", "target": "df[df['product_name'].str.contains('support', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Error Code, Manual Override, Release Version, Session Token, city.\nQuery: city has word hiringg", "target": "df[df['city'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Project Tag, Run ID, Source File Name, Tracking Code, email.\nQuery: find email ending in dotcom", "target": "df[df['email'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Project Tag, Release Version, Run ID, Session Token, System ID, product_name.\nQuery: get values with product_name trailing with Pro", "target": "df[df['product_name'].str.endswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Flagged Reason, Internal Notes, Manual Override, Run ID, job_title.\nQuery: get values with job_title trailing with inc.", "target": "df[df['job_title'].str.endswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Flagged Reason, Request ID, Retry Count, Tracking Code, email.\nQuery: find rows where email includes 'manager'", "target": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Retry Count, Reviewer Comments, Sync Status, Validation Notes, job_title.\nQuery: get records with job_title beginning as pro", "target": "df[df['job_title'].str.startswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Request ID, Sync Status, Validation Notes, product_name.\nQuery: find product_name ending in Manager", "target": "df[df['product_name'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Error Code, Processing Time, Request ID, Workflow Step, department.\nQuery: find department ending in support", "target": "df[df['department'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Internal Notes, Release Version, Session Token, Sync Status, department.\nQuery: list where department ends with INC", "target": "df[df['department'].str.endswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Last Modified By, Release Version, Source File Name, city.\nQuery: show rows where city starts with sup", "target": "df[df['city'].str.startswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Last Modified By, Processing Time, System ID, Tracking Code, job_title.\nQuery: job_title has word managr", "target": "df[df['job_title'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Batch Number, Error Code, Project Tag, Workflow Step, city.\nQuery: list where city ends with hiringg", "target": "df[df['city'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Error Code, Flagged Reason, Validation Notes, department.\nQuery: department field begins with dotcom", "target": "df[df['department'].str.startswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Internal Notes, Processing Time, Reviewer Comments, Sync Status, city.\nQuery: find city ending in Manager", "target": "df[df['city'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Last Modified By, Project Tag, Request ID, Workflow Step, job_title.\nQuery: job_title field begins with Pro", "target": "df[df['job_title'].str.startswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Flagged Reason, Manual Override, Request ID, Workflow Step, department.\nQuery: find department ending in managr", "target": "df[df['department'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Origin System, Release Version, Sync Status, email.\nQuery: get values with email trailing with manager", "target": "df[df['email'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Project Tag, Reviewer Comments, Tracking Code, company_name.\nQuery: list where company_name ends with .COM", "target": "df[df['company_name'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Processing Time, Retry Count, Session Token, city.\nQuery: find rows where city includes 'Sales'", "target": "df[df['city'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Document Ref, Internal Notes, Run ID, city.\nQuery: find city ending in support", "target": "df[df['city'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Last Modified By, Response Time (ms), Source File Name, Validation Notes, department.\nQuery: list where department ends with Hiring", "target": "df[df['department'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Internal Notes, Origin System, Project Tag, Workflow Step, department.\nQuery: show all department with tech in it", "target": "df[df['department'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Release Version, Retry Count, Run ID, Validation Notes, product_name.\nQuery: find rows where product_name includes 'TECH'", "target": "df[df['product_name'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Last Modified By, Project Tag, Run ID, Timestamp Created, Workflow Step, job_title.\nQuery: job_title has 'mngr' in it", "target": "df[df['job_title'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Retry Count, Run ID, Session Token, Workflow Step, product_name.\nQuery: product_name has word INC", "target": "df[df['product_name'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Release Version, Request ID, Workflow Step, email.\nQuery: show rows where email starts with sales", "target": "df[df['email'].str.startswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Flagged Reason, Manual Override, Response Time (ms), Validation Notes, product_name.\nQuery: get records with product_name beginning as TECH", "target": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Project Tag, Response Time (ms), Sync Status, System ID, department.\nQuery: find department ending in Manager", "target": "df[df['department'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Request ID, Retry Count, Run ID, Sync Status, email.\nQuery: get records with email beginning as Support", "target": "df[df['email'].str.startswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Internal Notes, Session Token, Sync Status, job_title.\nQuery: job_title has 'hire' in it", "target": "df[df['job_title'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Processing Time, Retry Count, Sync Status, company_name.\nQuery: company_name field holds value Sales", "target": "df[df['company_name'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Reviewer Comments, Timestamp Created, Tracking Code, department.\nQuery: show rows where department starts with pro", "target": "df[df['department'].str.startswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Flagged Reason, Project Tag, Timestamp Created, Tracking Code, department.\nQuery: department has word inc.", "target": "df[df['department'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Environment Name, Manual Override, Sync Status, Validation Notes, email.\nQuery: show rows where email starts with INC", "target": "df[df['email'].str.startswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Origin System, Session Token, Timestamp Created, Workflow Step, product_name.\nQuery: get values with product_name trailing with dotcom", "target": "df[df['product_name'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Project Tag, Retry Count, Source File Name, Tracking Code, Workflow Step, product_name.\nQuery: find product_name ending in Support", "target": "df[df['product_name'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Processing Time, Project Tag, Source File Name, System ID, product_name.\nQuery: product_name field begins with TECH", "target": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Request ID, Retry Count, Sync Status, department.\nQuery: get entries if department contains .com", "target": "df[df['department'].str.contains('.com', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Environment Name, Error Code, Sync Status, Workflow Step, product_name.\nQuery: get rows where product_name does not contain 'suport'", "target": "df[~df['product_name'].str.contains('suport', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Release Version, Source File Name, Sync Status, Tracking Code, Validation Notes, company_name.\nQuery: get rows where company_name does not contain '.COM'", "target": "df[~df['company_name'].str.contains('.COM', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Environment Name, Release Version, Run ID, Sync Status, email.\nQuery: find email having 'tech' and company_name with 'hiringg'", "target": "df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Flagged Reason, Last Modified By, System ID, Workflow Step, product_name.\nQuery: get rows where product_name does not contain 'tek'", "target": "df[~df['product_name'].str.contains('tek', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Manual Override, Project Tag, Request ID, department.\nQuery: find department having 'support' and job_title with 'inc.'", "target": "df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Error Code, Project Tag, Tracking Code, company_name.\nQuery: get rows where company_name does not contain 'hiring'", "target": "df[~df['company_name'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Last Modified By, Response Time (ms), Timestamp Created, company_name.\nQuery: find company_name having 'salez' and product_name with 'managr'", "target": "df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Batch Number, Error Code, Source File Name, Validation Notes, department.\nQuery: find department having 'salez' and email with 'sales'", "target": "df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Environment Name, Processing Time, Sync Status, System ID, product_name.\nQuery: get rows where product_name does not contain 'Sales'", "target": "df[~df['product_name'].str.contains('Sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Error Code, Last Modified By, Manual Override, email.\nQuery: get rows where email does not contain 'support'", "target": "df[~df['email'].str.contains('support', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Last Modified By, Processing Time, Sync Status, department.\nQuery: list records where department has 'dotcom' or company_name has 'dotcom'", "target": "df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Error Code, Manual Override, Project Tag, Response Time (ms), department.\nQuery: get rows where department does not contain 'inc.'", "target": "df[~df['department'].str.contains('inc.', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Document Ref, Origin System, Source File Name, job_title.\nQuery: find job_title having 'managr' and city with '.com'", "target": "df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Last Modified By, Manual Override, Reviewer Comments, department.\nQuery: get rows where department does not contain 'tek'", "target": "df[~df['department'].str.contains('tek', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Environment Name, Processing Time, Retry Count, System ID, department.\nQuery: get rows where department does not contain 'hiring'", "target": "df[~df['department'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Request ID, Source File Name, Timestamp Created, product_name.\nQuery: get rows where product_name does not contain 'PRo'", "target": "df[~df['product_name'].str.contains('PRo', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Flagged Reason, Processing Time, Retry Count, city.\nQuery: find city having 'dotcom' and product_name with 'pr0'", "target": "df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Batch Number, Retry Count, Validation Notes, product_name.\nQuery: list records where product_name has 'Tech' or job_title has 'PRo'", "target": "df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Environment Name, Last Modified By, Origin System, Timestamp Created, department.\nQuery: list records where department has '.com' or job_title has 'hiring'", "target": "df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Batch Number, Flagged Reason, Manual Override, job_title.\nQuery: list records where job_title has 'sup' or product_name has '.com'", "target": "df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Run ID, Timestamp Created, Workflow Step, product_name.\nQuery: list records where product_name has 'support' or job_title has 'Sales'", "target": "df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Error Code, Request ID, Timestamp Created, Validation Notes, email.\nQuery: find email having 'salez' and job_title with 'dotcom'", "target": "df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Environment Name, Request ID, Reviewer Comments, System ID, job_title.\nQuery: find job_title having 'mngr' and company_name with 'hiringg'", "target": "df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Flagged Reason, Processing Time, Validation Notes, job_title.\nQuery: list records where job_title has 'sales' or product_name has 'ink'", "target": "df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Flagged Reason, Project Tag, Reviewer Comments, job_title.\nQuery: list records where job_title has '.COM' or email has 'pro'", "target": "df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Processing Time, Response Time (ms), Salary Range To, Session Token, Tracking Code.\nQuery: list entries where Salary Range To has 'inc' in it", "target": "df[df['Salary Range To'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Civil Service Title, Flagged Reason, Internal Notes, Last Modified By, Response Time (ms), Validation Notes.\nQuery: show rows where Civil Service Title finishes with salez", "target": "df[df['Civil Service Title'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Level, Origin System, Processing Time, Retry Count, Validation Notes.\nQuery: show records where Level begins with INC", "target": "df[df['Level'].str.startswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Additional Information, Environment Name, Retry Count, Reviewer Comments, Run ID, System ID.\nQuery: show records where Additional Information begins with sells", "target": "df[df['Additional Information'].str.startswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Project Tag, Reviewer Comments, Run ID, Salary Range To, Tracking Code.\nQuery: Salary Range To contains value sales", "target": "df[df['Salary Range To'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Flagged Reason, Job Description, Processing Time, Project Tag, Validation Notes.\nQuery: find all where Job Description contains 'hire'", "target": "df[df['Job Description'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Salary Range From, Sync Status, Tracking Code, Validation Notes.\nQuery: list entries where Salary Range From has '.com' in it", "target": "df[df['Salary Range From'].str.contains('.com', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Civil Service Title, Project Tag, Release Version, Request ID, Reviewer Comments, Run ID.\nQuery: find all where Civil Service Title contains 'Tech'", "target": "df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Origin System, Project Tag, Release Version, Run ID, Timestamp Created, Work Location 1.\nQuery: show records where Work Location 1 begins with ink", "target": "df[df['Work Location 1'].str.startswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Level, Manual Override, Origin System, Release Version, Timestamp Created.\nQuery: Level starts with 'support'", "target": "df[df['Level'].str.startswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Posting Updated, Release Version, Response Time (ms), Sync Status.\nQuery: Posting Updated ends with 'Support'", "target": "df[df['Posting Updated'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Additional Information, Approval Status, Internal Notes, Last Modified By, Request ID, Retry Count.\nQuery: Additional Information starts with 'managr'", "target": "df[df['Additional Information'].str.startswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Project Tag, Residency Requirement, Response Time (ms), Run ID, Validation Notes.\nQuery: show records where Residency Requirement begins with sup", "target": "df[df['Residency Requirement'].str.startswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Residency Requirement, Session Token, System ID, Validation Notes.\nQuery: show records where Residency Requirement begins with sells", "target": "df[df['Residency Requirement'].str.startswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Additional Information, Alert Triggered, Last Modified By, Origin System, Processing Time, Session Token.\nQuery: Additional Information ends with 'Sales'", "target": "df[df['Additional Information'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Additional Information, Archived Flag, Batch Number, Release Version, Run ID, System ID.\nQuery: Additional Information includes 'Pro'", "target": "df[df['Additional Information'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Flagged Reason, Hours/Shift, Response Time (ms), Session Token.\nQuery: list entries where Hours/Shift has 'pr0' in it", "target": "df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Level, Processing Time, Retry Count, Session Token, Validation Notes.\nQuery: show records where Level begins with Manager", "target": "df[df['Level'].str.startswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Internal Notes, Posting Date, Project Tag, Response Time (ms).\nQuery: show rows where Posting Date finishes with pro", "target": "df[df['Posting Date'].str.endswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Minimum Qual Requirements, Retry Count, Reviewer Comments, Source File Name, Timestamp Created.\nQuery: Minimum Qual Requirements includes 'INC'", "target": "df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Career Level, Environment Name, Error Code, Flagged Reason, Origin System, Validation Notes.\nQuery: Career Level includes 'pr0'", "target": "df[df['Career Level'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Last Modified By, Process Date, Request ID, Run ID.\nQuery: Process Date starts with 'Tech'", "target": "df[df['Process Date'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Hours/Shift, Internal Notes, Request ID, Retry Count.\nQuery: Hours/Shift ends with 'dotcom'", "target": "df[df['Hours/Shift'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Level, Processing Time, Project Tag, Run ID, System ID.\nQuery: show records where Level begins with Pro", "target": "df[df['Level'].str.startswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Last Modified By, Process Date, Processing Time, Reviewer Comments, Run ID.\nQuery: Process Date ends with 'Hiring'", "target": "df[df['Process Date'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Career Level, Document Ref, Error Code, Last Modified By, System ID, Timestamp Created.\nQuery: show rows where Career Level finishes with inc.", "target": "df[df['Career Level'].str.endswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Error Code, Internal Notes, Manual Override, Minimum Qual Requirements, Response Time (ms).\nQuery: find all where Minimum Qual Requirements contains 'TECH'", "target": "df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Error Code, Full-Time/Part-Time indicator, Last Modified By, Source File Name, Tracking Code.\nQuery: Full-Time/Part-Time indicator starts with 'ink'", "target": "df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Error Code, Job Description, Origin System, Retry Count, Session Token.\nQuery: Job Description starts with 'dotcom'", "target": "df[df['Job Description'].str.startswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Manual Override, Post Until, Processing Time, Project Tag, Validation Notes.\nQuery: Post Until ends with 'sales'", "target": "df[df['Post Until'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Internal Notes, Last Modified By, Project Tag, Title Classification.\nQuery: Title Classification starts with 'managr'", "target": "df[df['Title Classification'].str.startswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Flagged Reason, Internal Notes, Origin System, Post Until.\nQuery: show rows where Post Until finishes with Support", "target": "df[df['Post Until'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Hours/Shift, Request ID, Response Time (ms), Sync Status, Workflow Step.\nQuery: Hours/Shift ends with 'hiringg'", "target": "df[df['Hours/Shift'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Internal Notes, Level, Release Version, Request ID, Retry Count.\nQuery: Level contains value pro", "target": "df[df['Level'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Origin System, Release Version, Request ID, Retry Count, Salary Frequency, Tracking Code.\nQuery: Salary Frequency ends with '.COM'", "target": "df[df['Salary Frequency'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Internal Notes, Response Time (ms), Source File Name, Title Classification, Tracking Code.\nQuery: Title Classification includes 'inc.'", "target": "df[df['Title Classification'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Flagged Reason, Request ID, Source File Name, System ID, Work Location 1.\nQuery: Work Location 1 ends with 'hiring'", "target": "df[df['Work Location 1'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Level, Origin System, Retry Count, System ID, Validation Notes.\nQuery: Level ends with 'Tech'", "target": "df[df['Level'].str.endswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Division/Work Unit, Document Ref, Processing Time, Retry Count, Workflow Step.\nQuery: Division/Work Unit starts with 'sells'", "target": "df[df['Division/Work Unit'].str.startswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Posting Updated, Release Version, Reviewer Comments, Session Token, Workflow Step.\nQuery: Posting Updated ends with 'TECH'", "target": "df[df['Posting Updated'].str.endswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Flagged Reason, Release Version, Reviewer Comments, Sync Status, company_name.\nQuery: find company_name ending in Sales", "target": "df[df['company_name'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Reviewer Comments, Source File Name, Tracking Code, Workflow Step, email.\nQuery: find email ending in salez", "target": "df[df['email'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Internal Notes, Manual Override, Request ID, Run ID, department.\nQuery: department has 'managr' in it", "target": "df[df['department'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Flagged Reason, Session Token, Validation Notes, product_name.\nQuery: product_name has word salez", "target": "df[df['product_name'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Internal Notes, Request ID, Timestamp Created, city.\nQuery: city has 'Manager' in it", "target": "df[df['city'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Origin System, Retry Count, Run ID, System ID, product_name.\nQuery: get records with product_name beginning as Tech", "target": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Manual Override, Release Version, Reviewer Comments, Sync Status, product_name.\nQuery: get values with product_name trailing with dotcom", "target": "df[df['product_name'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Processing Time, Release Version, System ID, email.\nQuery: find rows where email includes 'Manager'", "target": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Error Code, Project Tag, Release Version, Request ID, email.\nQuery: email has word mngr", "target": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Project Tag, Request ID, Reviewer Comments, Workflow Step, job_title.\nQuery: get records with job_title beginning as mngr", "target": "df[df['job_title'].str.startswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Release Version, Source File Name, Tracking Code, Workflow Step, city.\nQuery: show rows where city starts with dotcom", "target": "df[df['city'].str.startswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Flagged Reason, Manual Override, Sync Status, product_name.\nQuery: product_name field holds value support", "target": "df[df['product_name'].str.contains('support', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Environment Name, Reviewer Comments, Source File Name, city.\nQuery: city has word hiringg", "target": "df[df['city'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Processing Time, Release Version, Validation Notes, email.\nQuery: find email ending in dotcom", "target": "df[df['email'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Flagged Reason, Internal Notes, Run ID, Session Token, product_name.\nQuery: get values with product_name trailing with Pro", "target": "df[df['product_name'].str.endswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Error Code, Run ID, Timestamp Created, job_title.\nQuery: get values with job_title trailing with inc.", "target": "df[df['job_title'].str.endswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Response Time (ms), Session Token, Source File Name, System ID, email.\nQuery: find rows where email includes 'manager'", "target": "df[df['email'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Run ID, System ID, Timestamp Created, Tracking Code, job_title.\nQuery: get records with job_title beginning as pro", "target": "df[df['job_title'].str.startswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Archived Flag, Document Ref, Source File Name, product_name.\nQuery: find product_name ending in Manager", "target": "df[df['product_name'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Last Modified By, Manual Override, Release Version, department.\nQuery: find department ending in support", "target": "df[df['department'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Internal Notes, Manual Override, Release Version, Session Token, department.\nQuery: list where department ends with INC", "target": "df[df['department'].str.endswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Error Code, Last Modified By, Retry Count, Sync Status, city.\nQuery: show rows where city starts with sup", "target": "df[df['city'].str.startswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Internal Notes, Processing Time, Release Version, Run ID, job_title.\nQuery: job_title has word managr", "target": "df[df['job_title'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Last Modified By, Request ID, Run ID, Validation Notes, Workflow Step, city.\nQuery: list where city ends with hiringg", "target": "df[df['city'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Origin System, Retry Count, Session Token, Sync Status, department.\nQuery: department field begins with dotcom", "target": "df[df['department'].str.startswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Environment Name, Origin System, Release Version, Session Token, city.\nQuery: find city ending in Manager", "target": "df[df['city'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Internal Notes, Release Version, Timestamp Created, Validation Notes, job_title.\nQuery: job_title field begins with Pro", "target": "df[df['job_title'].str.startswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Environment Name, Project Tag, Source File Name, department.\nQuery: find department ending in managr", "target": "df[df['department'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Run ID, Sync Status, Validation Notes, Workflow Step, email.\nQuery: get values with email trailing with manager", "target": "df[df['email'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Response Time (ms), Retry Count, Validation Notes, company_name.\nQuery: list where company_name ends with .COM", "target": "df[df['company_name'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Project Tag, Run ID, Validation Notes, Workflow Step, city.\nQuery: find rows where city includes 'Sales'", "target": "df[df['city'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Environment Name, Flagged Reason, Project Tag, Source File Name, city.\nQuery: find city ending in support", "target": "df[df['city'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Origin System, Processing Time, Source File Name, Sync Status, department.\nQuery: list where department ends with Hiring", "target": "df[df['department'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Environment Name, Internal Notes, Workflow Step, department.\nQuery: show all department with tech in it", "target": "df[df['department'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Error Code, Internal Notes, Response Time (ms), Validation Notes, product_name.\nQuery: find rows where product_name includes 'TECH'", "target": "df[df['product_name'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Response Time (ms), Reviewer Comments, Timestamp Created, Workflow Step, job_title.\nQuery: job_title has 'mngr' in it", "target": "df[df['job_title'].str.contains('manager', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Flagged Reason, Request ID, Response Time (ms), product_name.\nQuery: product_name has word INC", "target": "df[df['product_name'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Error Code, Response Time (ms), Tracking Code, email.\nQuery: show rows where email starts with sales", "target": "df[df['email'].str.startswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Processing Time, Retry Count, Reviewer Comments, Workflow Step, product_name.\nQuery: get records with product_name beginning as TECH", "target": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Release Version, Source File Name, System ID, Timestamp Created, Validation Notes, department.\nQuery: find department ending in Manager", "target": "df[df['department'].str.endswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Internal Notes, Release Version, Response Time (ms), Sync Status, email.\nQuery: get records with email beginning as Support", "target": "df[df['email'].str.startswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Flagged Reason, Manual Override, Request ID, job_title.\nQuery: job_title has 'hire' in it", "target": "df[df['job_title'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Sync Status, Timestamp Created, Workflow Step, company_name.\nQuery: company_name field holds value Sales", "target": "df[df['company_name'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Manual Override, Release Version, Timestamp Created, department.\nQuery: show rows where department starts with pro", "target": "df[df['department'].str.startswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Environment Name, Release Version, Timestamp Created, department.\nQuery: department has word inc.", "target": "df[df['department'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Run ID, Source File Name, Tracking Code, email.\nQuery: show rows where email starts with INC", "target": "df[df['email'].str.startswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Internal Notes, Run ID, System ID, Workflow Step, product_name.\nQuery: get values with product_name trailing with dotcom", "target": "df[df['product_name'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Origin System, Response Time (ms), Run ID, product_name.\nQuery: find product_name ending in Support", "target": "df[df['product_name'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Document Ref, Error Code, Project Tag, product_name.\nQuery: product_name field begins with TECH", "target": "df[df['product_name'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Run ID, Source File Name, Tracking Code, Workflow Step, department.\nQuery: get entries if department contains .com", "target": "df[df['department'].str.contains('.com', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Error Code, Run ID, Timestamp Created, product_name.\nQuery: get rows where product_name does not contain 'suport'", "target": "df[~df['product_name'].str.contains('suport', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Run ID, Source File Name, Sync Status, Validation Notes, company_name.\nQuery: get rows where company_name does not contain '.COM'", "target": "df[~df['company_name'].str.contains('.COM', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Environment Name, Retry Count, Tracking Code, Validation Notes, company_name, email.\nQuery: find email having 'tech' and company_name with 'hiringg'", "target": "df[df['email'].str.contains('tech', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Environment Name, Flagged Reason, Last Modified By, product_name.\nQuery: get rows where product_name does not contain 'tek'", "target": "df[~df['product_name'].str.contains('tek', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Backup ID, Release Version, Validation Notes, department, job_title.\nQuery: find department having 'support' and job_title with 'inc.'", "target": "df[df['department'].str.contains('support', case=False, na=False) & df['job_title'].str.contains('inc.', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Flagged Reason, Last Modified By, Request ID, Workflow Step, company_name.\nQuery: get rows where company_name does not contain 'hiring'", "target": "df[~df['company_name'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Processing Time, Release Version, Retry Count, Reviewer Comments, company_name, product_name.\nQuery: find company_name having 'salez' and product_name with 'managr'", "target": "df[df['company_name'].str.contains('salez', case=False, na=False) & df['product_name'].str.contains('managr', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Environment Name, Flagged Reason, System ID, department, email.\nQuery: find department having 'salez' and email with 'sales'", "target": "df[df['department'].str.contains('salez', case=False, na=False) & df['email'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Error Code, Run ID, Validation Notes, product_name.\nQuery: get rows where product_name does not contain 'Sales'", "target": "df[~df['product_name'].str.contains('Sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Flagged Reason, Internal Notes, Timestamp Created, Workflow Step, email.\nQuery: get rows where email does not contain 'support'", "target": "df[~df['email'].str.contains('support', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Response Time (ms), Retry Count, Source File Name, Tracking Code, company_name, department.\nQuery: list records where department has 'dotcom' or company_name has 'dotcom'", "target": "df[df['department'].str.contains('dotcom', case=False, na=False) | df['company_name'].str.contains('dotcom', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Manual Override, Run ID, Validation Notes, department.\nQuery: get rows where department does not contain 'inc.'", "target": "df[~df['department'].str.contains('inc.', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Last Modified By, Manual Override, Project Tag, Response Time (ms), Timestamp Created, city, job_title.\nQuery: find job_title having 'managr' and city with '.com'", "target": "df[df['job_title'].str.contains('managr', case=False, na=False) & df['city'].str.contains('.com', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Document Ref, Run ID, Session Token, Timestamp Created, department.\nQuery: get rows where department does not contain 'tek'", "target": "df[~df['department'].str.contains('tek', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Error Code, Project Tag, Request ID, Source File Name, department.\nQuery: get rows where department does not contain 'hiring'", "target": "df[~df['department'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Environment Name, Internal Notes, Response Time (ms), Reviewer Comments, product_name.\nQuery: get rows where product_name does not contain 'PRo'", "target": "df[~df['product_name'].str.contains('PRo', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Flagged Reason, Release Version, Source File Name, Timestamp Created, city, product_name.\nQuery: find city having 'dotcom' and product_name with 'pr0'", "target": "df[df['city'].str.contains('dotcom', case=False, na=False) & df['product_name'].str.contains('pr0', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Last Modified By, Processing Time, Release Version, Validation Notes, job_title, product_name.\nQuery: list records where product_name has 'Tech' or job_title has 'PRo'", "target": "df[df['product_name'].str.contains('Tech', case=False, na=False) | df['job_title'].str.contains('PRo', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Internal Notes, Last Modified By, Reviewer Comments, Tracking Code, department, job_title.\nQuery: list records where department has '.com' or job_title has 'hiring'", "target": "df[df['department'].str.contains('.com', case=False, na=False) | df['job_title'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Project Tag, System ID, Tracking Code, Workflow Step, job_title, product_name.\nQuery: list records where job_title has 'sup' or product_name has '.com'", "target": "df[df['job_title'].str.contains('sup', case=False, na=False) | df['product_name'].str.contains('.com', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Processing Time, Project Tag, Response Time (ms), Timestamp Created, job_title, product_name.\nQuery: list records where product_name has 'support' or job_title has 'Sales'", "target": "df[df['product_name'].str.contains('support', case=False, na=False) | df['job_title'].str.contains('Sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Internal Notes, Sync Status, Tracking Code, email, job_title.\nQuery: find email having 'salez' and job_title with 'dotcom'", "target": "df[df['email'].str.contains('salez', case=False, na=False) & df['job_title'].str.contains('dotcom', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Last Modified By, Project Tag, Run ID, company_name, job_title.\nQuery: find job_title having 'mngr' and company_name with 'hiringg'", "target": "df[df['job_title'].str.contains('mngr', case=False, na=False) & df['company_name'].str.contains('hiringg', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Flagged Reason, Retry Count, Run ID, Source File Name, job_title, product_name.\nQuery: list records where job_title has 'sales' or product_name has 'ink'", "target": "df[df['job_title'].str.contains('sales', case=False, na=False) | df['product_name'].str.contains('ink', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Manual Override, Release Version, Retry Count, email, job_title.\nQuery: list records where job_title has '.COM' or email has 'pro'", "target": "df[df['job_title'].str.contains('.COM', case=False, na=False) | df['email'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Flagged Reason, Manual Override, Origin System, Project Tag, Salary Range To.\nQuery: list entries where Salary Range To has 'inc' in it", "target": "df[df['Salary Range To'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Civil Service Title, Document Ref, Internal Notes, Request ID, Reviewer Comments.\nQuery: show rows where Civil Service Title finishes with salez", "target": "df[df['Civil Service Title'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Level, Project Tag, Release Version, Sync Status, System ID, Validation Notes.\nQuery: show records where Level begins with INC", "target": "df[df['Level'].str.startswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Additional Information, Document Ref, Origin System, Request ID, Response Time (ms), Run ID.\nQuery: show records where Additional Information begins with sells", "target": "df[df['Additional Information'].str.startswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Environment Name, Internal Notes, Last Modified By, Response Time (ms), Salary Range To, Source File Name.\nQuery: Salary Range To contains value sales", "target": "df[df['Salary Range To'].str.contains('sales', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Job Description, Processing Time, Project Tag, Run ID.\nQuery: find all where Job Description contains 'hire'", "target": "df[df['Job Description'].str.contains('hiring', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Internal Notes, Response Time (ms), Salary Range From, Timestamp Created, Workflow Step.\nQuery: list entries where Salary Range From has '.com' in it", "target": "df[df['Salary Range From'].str.contains('.com', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Civil Service Title, Run ID, Source File Name, Validation Notes.\nQuery: find all where Civil Service Title contains 'Tech'", "target": "df[df['Civil Service Title'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Batch Number, Flagged Reason, Last Modified By, Run ID, Work Location 1.\nQuery: show records where Work Location 1 begins with ink", "target": "df[df['Work Location 1'].str.startswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Batch Number, Flagged Reason, Level, Request ID, Source File Name.\nQuery: Level starts with 'support'", "target": "df[df['Level'].str.startswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Document Ref, Posting Updated, Source File Name, System ID.\nQuery: Posting Updated ends with 'Support'", "target": "df[df['Posting Updated'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Additional Information, Alert Triggered, Batch Number, Response Time (ms), Run ID, Source File Name.\nQuery: Additional Information starts with 'managr'", "target": "df[df['Additional Information'].str.startswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Internal Notes, Project Tag, Release Version, Residency Requirement, Retry Count.\nQuery: show records where Residency Requirement begins with sup", "target": "df[df['Residency Requirement'].str.startswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Internal Notes, Last Modified By, Residency Requirement, Session Token.\nQuery: show records where Residency Requirement begins with sells", "target": "df[df['Residency Requirement'].str.startswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Additional Information, Batch Number, Last Modified By, Manual Override, Request ID, Run ID.\nQuery: Additional Information ends with 'Sales'", "target": "df[df['Additional Information'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Additional Information, Internal Notes, Source File Name, Timestamp Created, Tracking Code, Workflow Step.\nQuery: Additional Information includes 'Pro'", "target": "df[df['Additional Information'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Hours/Shift, Last Modified By, Project Tag, Response Time (ms).\nQuery: list entries where Hours/Shift has 'pr0' in it", "target": "df[df['Hours/Shift'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Level, Origin System, Retry Count, Tracking Code.\nQuery: show records where Level begins with Manager", "target": "df[df['Level'].str.startswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Internal Notes, Posting Date, Reviewer Comments, System ID.\nQuery: show rows where Posting Date finishes with pro", "target": "df[df['Posting Date'].str.endswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Batch Number, Last Modified By, Minimum Qual Requirements, Processing Time, Release Version, Request ID.\nQuery: Minimum Qual Requirements includes 'INC'", "target": "df[df['Minimum Qual Requirements'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Career Level, Session Token, Sync Status, System ID, Tracking Code.\nQuery: Career Level includes 'pr0'", "target": "df[df['Career Level'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Batch Number, Manual Override, Process Date, Release Version, Source File Name.\nQuery: Process Date starts with 'Tech'", "target": "df[df['Process Date'].str.startswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Document Ref, Hours/Shift, Response Time (ms), Run ID, Timestamp Created, Workflow Step.\nQuery: Hours/Shift ends with 'dotcom'", "target": "df[df['Hours/Shift'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Level, Reviewer Comments, System ID, Validation Notes.\nQuery: show records where Level begins with Pro", "target": "df[df['Level'].str.startswith('pro', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Internal Notes, Process Date, Release Version, Run ID, System ID.\nQuery: Process Date ends with 'Hiring'", "target": "df[df['Process Date'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Career Level, Error Code, Sync Status, Timestamp Created, Tracking Code.\nQuery: show rows where Career Level finishes with inc.", "target": "df[df['Career Level'].str.endswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Backup ID, Error Code, Minimum Qual Requirements, Timestamp Created.\nQuery: find all where Minimum Qual Requirements contains 'TECH'", "target": "df[df['Minimum Qual Requirements'].str.contains('tech', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Error Code, Full-Time/Part-Time indicator, Response Time (ms), Reviewer Comments.\nQuery: Full-Time/Part-Time indicator starts with 'ink'", "target": "df[df['Full-Time/Part-Time indicator'].str.startswith('inc', na=False)]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Environment Name, Job Description, Origin System, Processing Time, Timestamp Created.\nQuery: Job Description starts with 'dotcom'", "target": "df[df['Job Description'].str.startswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Flagged Reason, Origin System, Post Until, Project Tag.\nQuery: Post Until ends with 'sales'", "target": "df[df['Post Until'].str.endswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Flagged Reason, Last Modified By, Manual Override, Session Token, Title Classification.\nQuery: Title Classification starts with 'managr'", "target": "df[df['Title Classification'].str.startswith('manager', na=False)]"}
{"source": "The DataFrame contains the following columns: Origin System, Post Until, Processing Time, Release Version, Run ID, Timestamp Created.\nQuery: show rows where Post Until finishes with Support", "target": "df[df['Post Until'].str.endswith('support', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Environment Name, Error Code, Hours/Shift, Project Tag.\nQuery: Hours/Shift ends with 'hiringg'", "target": "df[df['Hours/Shift'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Error Code, Level, Origin System, Project Tag, Reviewer Comments, Run ID.\nQuery: Level contains value pro", "target": "df[df['Level'].str.contains('pro', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Project Tag, Release Version, Response Time (ms), Salary Frequency, System ID.\nQuery: Salary Frequency ends with '.COM'", "target": "df[df['Salary Frequency'].str.endswith('.com', na=False)]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Audit Trail, Last Modified By, Processing Time, Timestamp Created, Title Classification.\nQuery: Title Classification includes 'inc.'", "target": "df[df['Title Classification'].str.contains('inc', case=False, na=False)]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Processing Time, Request ID, Source File Name, Work Location 1, Workflow Step.\nQuery: Work Location 1 ends with 'hiring'", "target": "df[df['Work Location 1'].str.endswith('hiring', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Internal Notes, Level, Origin System, Sync Status.\nQuery: Level ends with 'Tech'", "target": "df[df['Level'].str.endswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Batch Number, Division/Work Unit, Internal Notes, Processing Time, Release Version.\nQuery: Division/Work Unit starts with 'sells'", "target": "df[df['Division/Work Unit'].str.startswith('sales', na=False)]"}
{"source": "The DataFrame contains the following columns: Approval Status, Posting Updated, Project Tag, Reviewer Comments, Validation Notes, Workflow Step.\nQuery: Posting Updated ends with 'TECH'", "target": "df[df['Posting Updated'].str.endswith('tech', na=False)]"}
{"source": "The DataFrame contains the following columns: Backup ID, Origin System, Retry Count, Salary Range From, Timestamp Created, Workflow Step.\nQuery: list all jobs with Salary Range From minimum 50000", "target": "df[df['Salary Range From'] >= 50000]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Level, Origin System, Request ID, Source File Name, Sync Status.\nQuery: Level != 100000", "target": "df[df['Level'] != 100000]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Internal Notes, Salary Range To, Source File Name, Sync Status, Validation Notes.\nQuery: Salary Range To should be below 30000", "target": "df[df['Salary Range To'] < 30000]"}
{"source": "The DataFrame contains the following columns: Environment Name, Internal Notes, Last Modified By, Salary Range From, Session Token, System ID.\nQuery: Salary Range From should be maximum 200000", "target": "df[df['Salary Range From'] <= 200000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Document Ref, Response Time (ms), Salary Range From, Source File Name.\nQuery: show records where Salary Range From is below 75000", "target": "df[df['Salary Range From'] < 75000]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Response Time (ms), Reviewer Comments, Run ID, Salary Range To, System ID.\nQuery: list all jobs with Salary Range To maximum 75000", "target": "df[df['Salary Range To'] <= 75000]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Backup ID, Batch Number, Level, Origin System.\nQuery: get jobs where Level is greater than 150000", "target": "df[df['Level'] > 150000]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Last Modified By, Level, Session Token, Tracking Code, Workflow Step.\nQuery: show records where Level is >= 50000", "target": "df[df['Level'] >= 50000]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Last Modified By, Retry Count, Reviewer Comments, Salary Range To, Source File Name.\nQuery: Salary Range To should be maximum 150000", "target": "df[df['Salary Range To'] <= 150000]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Batch Number, Environment Name, Level, Release Version, Source File Name.\nQuery: show records where Level is more than 30000", "target": "df[df['Level'] > 30000]"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Flagged Reason, Level, Response Time (ms), Session Token.\nQuery: get jobs where Level is != 50000", "target": "df[df['Level'] != 50000]"}
{"source": "The DataFrame contains the following columns: Origin System, Release Version, Request ID, Salary Range From, System ID, Timestamp Created.\nQuery: Salary Range From should be == 75000", "target": "df[df['Salary Range From'] == 75000]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Level, Release Version, Response Time (ms), Run ID, Timestamp Created.\nQuery: show records where Level is maximum 75000", "target": "df[df['Level'] <= 75000]"}
{"source": "The DataFrame contains the following columns: Environment Name, Level, Origin System, Project Tag, Tracking Code, Validation Notes.\nQuery: get jobs where Level is more than 30000", "target": "df[df['Level'] > 30000]"}
{"source": "The DataFrame contains the following columns: Level, Release Version, Retry Count, Reviewer Comments, Run ID, Sync Status.\nQuery: Level <= 30000", "target": "df[df['Level'] <= 30000]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Last Modified By, Level, Manual Override, Processing Time, Run ID.\nQuery: list all jobs with Level not 200000", "target": "df[df['Level'] != 200000]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Manual Override, Reviewer Comments, Salary Range From, Source File Name, System ID.\nQuery: get jobs where Salary Range From is under 100000", "target": "df[df['Salary Range From'] < 100000]"}
{"source": "The DataFrame contains the following columns: Origin System, Processing Time, Run ID, Salary Range From, Session Token, System ID.\nQuery: Salary Range From should be under 75000", "target": "df[df['Salary Range From'] < 75000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Level, Project Tag, Sync Status, Validation Notes.\nQuery: list all jobs with Level equal to 100000", "target": "df[df['Level'] == 100000]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Backup ID, Processing Time, Retry Count, Salary Range To.\nQuery: Salary Range To should be not 30000", "target": "df[df['Salary Range To'] != 30000]"}
{"source": "The DataFrame contains the following columns: Approval Status, Backup ID, Environment Name, Level, Project Tag, Workflow Step.\nQuery: show records where Level is more than 50000", "target": "df[df['Level'] > 50000]"}
{"source": "The DataFrame contains the following columns: Approval Status, Last Modified By, Response Time (ms), Salary Range To, Sync Status, Tracking Code.\nQuery: Salary Range To != 50000", "target": "df[df['Salary Range To'] != 50000]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Batch Number, Environment Name, Salary Range From, Validation Notes.\nQuery: Salary Range From <= 75000", "target": "df[df['Salary Range From'] <= 75000]"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Processing Time, Request ID, Salary Range From, Source File Name.\nQuery: get jobs where Salary Range From is maximum 75000", "target": "df[df['Salary Range From'] <= 75000]"}
{"source": "The DataFrame contains the following columns: Environment Name, Level, Release Version, System ID, Timestamp Created, Validation Notes.\nQuery: get jobs where Level is >= 200000", "target": "df[df['Level'] >= 200000]"}
{"source": "The DataFrame contains the following columns: Batch Number, Document Ref, Level, Release Version, Session Token, System ID.\nQuery: Level minimum 50000", "target": "df[df['Level'] >= 50000]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Flagged Reason, Internal Notes, Request ID, Run ID, Salary Range To.\nQuery: Salary Range To should be != 200000", "target": "df[df['Salary Range To'] != 200000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Error Code, Request ID, Salary Range To, Validation Notes.\nQuery: Salary Range To less than 200000", "target": "df[df['Salary Range To'] < 200000]"}
{"source": "The DataFrame contains the following columns: Batch Number, Environment Name, Processing Time, Reviewer Comments, Run ID, Salary Range To.\nQuery: show records where Salary Range To is under 30000", "target": "df[df['Salary Range To'] < 30000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Level, Release Version, Sync Status, Validation Notes.\nQuery: show records where Level is at most 200000", "target": "df[df['Level'] <= 200000]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Release Version, Salary Range To, Session Token, System ID, Tracking Code.\nQuery: get jobs where Salary Range To is <= 100000", "target": "df[df['Salary Range To'] <= 100000]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Last Modified By, Manual Override, Release Version, Salary Range To, Validation Notes.\nQuery: list all jobs with Salary Range To maximum 150000", "target": "df[df['Salary Range To'] <= 150000]"}
{"source": "The DataFrame contains the following columns: Last Modified By, Retry Count, Salary Range From, Session Token, Sync Status, System ID.\nQuery: Salary Range From should be above 100000", "target": "df[df['Salary Range From'] > 100000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Approval Status, Reviewer Comments, Salary Range To, System ID, Timestamp Created.\nQuery: show records where Salary Range To is at most 30000", "target": "df[df['Salary Range To'] <= 30000]"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Level, Processing Time, Reviewer Comments, Tracking Code.\nQuery: list all jobs with Level less than 30000", "target": "df[df['Level'] < 30000]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Last Modified By, Reviewer Comments, Salary Range From, Validation Notes, Workflow Step.\nQuery: show records where Salary Range From is equal to 30000", "target": "df[df['Salary Range From'] == 30000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Backup ID, Batch Number, Release Version, Salary Range From, Sync Status.\nQuery: get jobs where Salary Range From is minimum 50000", "target": "df[df['Salary Range From'] >= 50000]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Document Ref, Internal Notes, Retry Count, Salary Range From.\nQuery: show records where Salary Range From is not 200000", "target": "df[df['Salary Range From'] != 200000]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Environment Name, Error Code, Level, Origin System, Request ID.\nQuery: get jobs where Level is at most 100000", "target": "df[df['Level'] <= 100000]"}
{"source": "The DataFrame contains the following columns: Error Code, Flagged Reason, Project Tag, Response Time (ms), Salary Range From, Validation Notes.\nQuery: list all jobs with Salary Range From above 75000", "target": "df[df['Salary Range From'] > 75000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Archived Flag, Project Tag, Salary Range From, System ID, Validation Notes.\nQuery: Salary Range From should be != 200000", "target": "df[df['Salary Range From'] != 200000]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Level, Manual Override, Session Token, Tracking Code, Validation Notes.\nQuery: list all jobs with Level is 150000", "target": "df[df['Level'] == 150000]"}
{"source": "The DataFrame contains the following columns: Backup ID, Document Ref, Request ID, Reviewer Comments, Salary Range To, Tracking Code.\nQuery: show records where Salary Range To is greater than 200000", "target": "df[df['Salary Range To'] > 200000]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Manual Override, Reviewer Comments, Salary Range To, Workflow Step.\nQuery: show records where Salary Range To is not equal to 150000", "target": "df[df['Salary Range To'] != 150000]"}
{"source": "The DataFrame contains the following columns: Environment Name, Internal Notes, Request ID, Reviewer Comments, Salary Range From, Session Token.\nQuery: list all jobs with Salary Range From >= 100000", "target": "df[df['Salary Range From'] >= 100000]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Internal Notes, Last Modified By, Level, Request ID, Reviewer Comments.\nQuery: list all jobs with Level not 75000", "target": "df[df['Level'] != 75000]"}
{"source": "The DataFrame contains the following columns: Approval Status, Document Ref, Error Code, Level, Processing Time, System ID.\nQuery: show records where Level is greater than 200000", "target": "df[df['Level'] > 200000]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Processing Time, Salary Range From, Session Token, System ID, Timestamp Created.\nQuery: Salary Range From maximum 100000", "target": "df[df['Salary Range From'] <= 100000]"}
{"source": "The DataFrame contains the following columns: Document Ref, Request ID, Retry Count, Salary Range To, Timestamp Created, Validation Notes.\nQuery: Salary Range To should be at least 75000", "target": "df[df['Salary Range To'] >= 75000]"}
{"source": "The DataFrame contains the following columns: Document Ref, Flagged Reason, Origin System, Release Version, Salary Range To, Sync Status.\nQuery: Salary Range To != 50000", "target": "df[df['Salary Range To'] != 50000]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Last Modified By, Posting Date, Processing Time, Reviewer Comments, Session Token.\nQuery: show records where Posting Date is not equal to 200000", "target": "df[pd.to_datetime(df['Posting Date']) != pd.to_datetime('200000')]"}
{"source": "The DataFrame contains the following columns: Batch Number, Internal Notes, Manual Override, Origin System, Sales, Source File Name.\nQuery: show entries having Sales >= 25000", "target": "df[df['Sales'] >= 25000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Last Modified By, Manual Override, Release Version, Timestamp Created, discount.\nQuery: show entries having discount is 150000", "target": "df[df['discount'] == 150000]"}
{"source": "The DataFrame contains the following columns: Environment Name, Processing Time, Request ID, Reviewer Comments, Session Token, units_sold.\nQuery: units_sold <= 30000", "target": "df[df['units_sold'] <= 30000]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Backup ID, Error Code, Internal Notes, Run ID, revenue.\nQuery: revenue should be more than 30000", "target": "df[df['revenue'] > 30000]"}
{"source": "The DataFrame contains the following columns: Environment Name, Flagged Reason, Processing Time, Timestamp Created, Tracking Code, discount.\nQuery: show entries having discount below 200000", "target": "df[df['discount'] < 200000]"}
{"source": "The DataFrame contains the following columns: Last Modified By, Release Version, Salary Range To, Session Token, Tracking Code, Workflow Step.\nQuery: Salary Range To >= 200000", "target": "df[df['Salary Range To'] >= 200000]"}
{"source": "The DataFrame contains the following columns: Document Ref, Error Code, Internal Notes, Origin System, Posting Date, Release Version.\nQuery: Posting Date should be minimum 100000", "target": "df[pd.to_datetime(df['Posting Date']) >= pd.to_datetime('100000')]"}
{"source": "The DataFrame contains the following columns: Batch Number, Document Ref, Processing Time, Release Version, Source File Name, units_sold.\nQuery: units_sold should be >= 25000", "target": "df[df['units_sold'] >= 25000]"}
{"source": "The DataFrame contains the following columns: Retry Count, Run ID, Salary Range To, Session Token, Timestamp Created, Workflow Step.\nQuery: Salary Range To not 150000", "target": "df[df['Salary Range To'] != 150000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Environment Name, Flagged Reason, System ID, Validation Notes, revenue.\nQuery: revenue equal to 25000", "target": "df[df['revenue'] == 25000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Flagged Reason, Internal Notes, Source File Name, Timestamp Created, revenue.\nQuery: show entries having revenue not 99999", "target": "df[df['revenue'] != 99999]"}
{"source": "The DataFrame contains the following columns: Request ID, Retry Count, Reviewer Comments, System ID, Timestamp Created, revenue.\nQuery: get records where revenue is greater than 50000", "target": "df[df['revenue'] > 50000]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Release Version, Salary Range To, Sync Status, Tracking Code, Workflow Step.\nQuery: Salary Range To less than 30000", "target": "df[df['Salary Range To'] < 30000]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Document Ref, Environment Name, Processing Time, Request ID, Salary Range From.\nQuery: Salary Range From under 25000", "target": "df[df['Salary Range From'] < 25000]"}
{"source": "The DataFrame contains the following columns: Approval Status, Archived Flag, Document Ref, Process Date, Processing Time, Retry Count.\nQuery: Process Date should be <= 99999", "target": "df[pd.to_datetime(df['Process Date']) <= pd.to_datetime('99999')]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Environment Name, Salary Range From, Sync Status, System ID, Timestamp Created.\nQuery: show entries having Salary Range From equal to 1", "target": "df[df['Salary Range From'] == 1]"}
{"source": "The DataFrame contains the following columns: Internal Notes, Last Modified By, Origin System, Retry Count, Sync Status, revenue.\nQuery: revenue should be equal to 30000", "target": "df[df['revenue'] == 30000]"}
{"source": "The DataFrame contains the following columns: Backup ID, Origin System, Posting Updated, Release Version, Run ID, Sync Status.\nQuery: entries where Posting Updated is at most 25000", "target": "df[pd.to_datetime(df['Posting Updated']) <= pd.to_datetime('25000')]"}
{"source": "The DataFrame contains the following columns: Alert Triggered, Document Ref, Error Code, Processing Time, Run ID, Sales.\nQuery: get records where Sales is greater than 100000", "target": "df[df['Sales'] > 100000]"}
{"source": "The DataFrame contains the following columns: Environment Name, Internal Notes, Run ID, Source File Name, System ID, revenue.\nQuery: get records where revenue is more than 100000", "target": "df[df['revenue'] > 100000]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Backup ID, Error Code, Last Modified By, Posting Updated, Response Time (ms).\nQuery: list data with Posting Updated less than 10", "target": "df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')]"}
{"source": "The DataFrame contains the following columns: Flagged Reason, Internal Notes, Posting Updated, Project Tag, Sync Status, Timestamp Created.\nQuery: list data with Posting Updated under 0", "target": "df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('0')]"}
{"source": "The DataFrame contains the following columns: Error Code, Origin System, Posting Updated, Timestamp Created, Tracking Code, Validation Notes.\nQuery: show records where Posting Updated is below 10", "target": "df[pd.to_datetime(df['Posting Updated']) < pd.to_datetime('10')]"}
{"source": "The DataFrame contains the following columns: Approval Status, Audit Trail, Error Code, Post Until, Processing Time, Request ID.\nQuery: Post Until should be not 200000", "target": "df[pd.to_datetime(df['Post Until']) != pd.to_datetime('200000')]"}
{"source": "The DataFrame contains the following columns: Backup ID, Flagged Reason, Process Date, Processing Time, System ID, Tracking Code.\nQuery: show records where Process Date is >= 150000", "target": "df[pd.to_datetime(df['Process Date']) >= pd.to_datetime('150000')]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Project Tag, Run ID, Sales, Sync Status, Workflow Step.\nQuery: Sales below 10", "target": "df[df['Sales'] < 10]"}
{"source": "The DataFrame contains the following columns: Document Ref, Processing Time, Project Tag, Salary Range From, System ID, Tracking Code.\nQuery: Salary Range From greater than 200000", "target": "df[df['Salary Range From'] > 200000]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Internal Notes, Origin System, Reviewer Comments, Salary Range From, Tracking Code.\nQuery: get records where Salary Range From is == 25000", "target": "df[df['Salary Range From'] == 25000]"}
{"source": "The DataFrame contains the following columns: Origin System, Processing Time, Reviewer Comments, Run ID, Sync Status, units_sold.\nQuery: units_sold should be is 30000", "target": "df[df['units_sold'] == 30000]"}
{"source": "The DataFrame contains the following columns: Last Modified By, Process Date, Request ID, Session Token, Tracking Code, Workflow Step.\nQuery: Process Date should be greater than 30000", "target": "df[pd.to_datetime(df['Process Date']) > pd.to_datetime('30000')]"}
{"source": "The DataFrame contains the following columns: Environment Name, Error Code, Release Version, Tracking Code, Workflow Step, discount.\nQuery: show entries having discount at most 30000", "target": "df[df['discount'] <= 30000]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Audit Trail, Document Ref, Origin System, Validation Notes, units_sold.\nQuery: show entries having units_sold at most 150000", "target": "df[df['units_sold'] <= 150000]"}
{"source": "The DataFrame contains the following columns: Document Ref, Internal Notes, Last Modified By, Origin System, Process Date, Processing Time.\nQuery: Process Date should be under 9999", "target": "df[pd.to_datetime(df['Process Date']) < pd.to_datetime('9999')]"}
{"source": "The DataFrame contains the following columns: Archived Flag, Internal Notes, Release Version, Reviewer Comments, Workflow Step, discount.\nQuery: show entries having discount at least 25000", "target": "df[df['discount'] >= 25000]"}
{"source": "The DataFrame contains the following columns: Backup ID, Batch Number, Release Version, Request ID, Retry Count, Sales.\nQuery: Sales should be is 99999", "target": "df[df['Sales'] == 99999]"}
{"source": "The DataFrame contains the following columns: Environment Name, Reviewer Comments, Source File Name, Timestamp Created, Workflow Step, revenue.\nQuery: get records where revenue is at most 50000", "target": "df[df['revenue'] <= 50000]"}
{"source": "The DataFrame contains the following columns: Environment Name, Response Time (ms), Retry Count, Reviewer Comments, System ID, revenue.\nQuery: revenue should be != 0", "target": "df[df['revenue'] != 0]"}
{"source": "The DataFrame contains the following columns: Audit Trail, Origin System, Project Tag, Reviewer Comments, Sales, Sync Status.\nQuery: Sales should be below 9999", "target": "df[df['Sales'] < 9999]"}
{"source": "The DataFrame contains the following columns: Approval Status, Error Code, Flagged Reason, Response Time (ms), Sales, Session Token.\nQuery: get records where Sales is is 150000", "target": "df[df['Sales'] == 150000]"}
